<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>runtime.pcvalue (1 samples, 0.16%)</title><rect x="1180.6" y="37" width="1.9" height="15.0" fill="rgb(239,194,42)" rx="2" ry="2" />
<text  x="1183.63" y="47.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (1 samples, 0.16%)</title><rect x="1176.9" y="181" width="1.9" height="15.0" fill="rgb(249,177,19)" rx="2" ry="2" />
<text  x="1179.89" y="191.5" ></text>
</g>
<g >
<title>syscall.Syscall (1 samples, 0.16%)</title><rect x="1176.9" y="85" width="1.9" height="15.0" fill="rgb(231,116,49)" rx="2" ry="2" />
<text  x="1179.89" y="95.5" ></text>
</g>
<g >
<title>net/url.parse (2 samples, 0.32%)</title><rect x="13.7" y="277" width="3.8" height="15.0" fill="rgb(217,10,32)" rx="2" ry="2" />
<text  x="16.75" y="287.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (622 samples, 98.73%)</title><rect x="17.5" y="325" width="1165.0" height="15.0" fill="rgb(238,23,51)" rx="2" ry="2" />
<text  x="20.49" y="335.5" >net/http.serverHandler.ServeHTTP</text>
</g>
<g >
<title>net.uitoa (1 samples, 0.16%)</title><rect x="10.0" y="277" width="1.9" height="15.0" fill="rgb(215,6,37)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.16%)</title><rect x="1188.1" y="309" width="1.9" height="15.0" fill="rgb(251,93,52)" rx="2" ry="2" />
<text  x="1191.13" y="319.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).grow (2 samples, 0.32%)</title><rect x="1152.5" y="229" width="3.8" height="15.0" fill="rgb(232,38,30)" rx="2" ry="2" />
<text  x="1155.54" y="239.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (1 samples, 0.16%)</title><rect x="10.0" y="325" width="1.9" height="15.0" fill="rgb(233,26,16)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>net.IP.String (1 samples, 0.16%)</title><rect x="10.0" y="293" width="1.9" height="15.0" fill="rgb(229,75,32)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Write (3 samples, 0.48%)</title><rect x="1176.9" y="229" width="5.6" height="15.0" fill="rgb(227,36,46)" rx="2" ry="2" />
<text  x="1179.89" y="239.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.16%)</title><rect x="11.9" y="261" width="1.8" height="15.0" fill="rgb(244,118,29)" rx="2" ry="2" />
<text  x="14.87" y="271.5" ></text>
</g>
<g >
<title>math/rand.(*lockedSource).Int63 (3 samples, 0.48%)</title><rect x="1171.3" y="165" width="5.6" height="15.0" fill="rgb(227,36,43)" rx="2" ry="2" />
<text  x="1174.27" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.16%)</title><rect x="15.6" y="229" width="1.9" height="15.0" fill="rgb(220,204,49)" rx="2" ry="2" />
<text  x="18.62" y="239.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.16%)</title><rect x="1188.1" y="293" width="1.9" height="15.0" fill="rgb(253,126,51)" rx="2" ry="2" />
<text  x="1191.13" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.16%)</title><rect x="10.0" y="213" width="1.9" height="15.0" fill="rgb(245,182,27)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (1 samples, 0.16%)</title><rect x="1186.3" y="309" width="1.8" height="15.0" fill="rgb(214,38,32)" rx="2" ry="2" />
<text  x="1189.25" y="319.5" ></text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.16%)</title><rect x="1182.5" y="341" width="1.9" height="15.0" fill="rgb(235,211,40)" rx="2" ry="2" />
<text  x="1185.51" y="351.5" ></text>
</g>
<g >
<title>net.ipEmptyString (1 samples, 0.16%)</title><rect x="10.0" y="309" width="1.9" height="15.0" fill="rgb(224,185,17)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>net.(*conn).Write (1 samples, 0.16%)</title><rect x="1178.8" y="165" width="1.8" height="15.0" fill="rgb(249,221,18)" rx="2" ry="2" />
<text  x="1181.76" y="175.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.16%)</title><rect x="1182.5" y="277" width="1.9" height="15.0" fill="rgb(254,19,49)" rx="2" ry="2" />
<text  x="1185.51" y="287.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.16%)</title><rect x="10.0" y="261" width="1.9" height="15.0" fill="rgb(245,185,30)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.16%)</title><rect x="11.9" y="229" width="1.8" height="15.0" fill="rgb(241,7,11)" rx="2" ry="2" />
<text  x="14.87" y="239.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Int31n (10 samples, 1.59%)</title><rect x="1158.2" y="213" width="18.7" height="15.0" fill="rgb(214,117,31)" rx="2" ry="2" />
<text  x="1161.16" y="223.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.16%)</title><rect x="11.9" y="293" width="1.8" height="15.0" fill="rgb(210,141,45)" rx="2" ry="2" />
<text  x="14.87" y="303.5" ></text>
</g>
<g >
<title>net/http.readRequest (2 samples, 0.32%)</title><rect x="13.7" y="309" width="3.8" height="15.0" fill="rgb(237,79,43)" rx="2" ry="2" />
<text  x="16.75" y="319.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.16%)</title><rect x="1180.6" y="117" width="1.9" height="15.0" fill="rgb(250,206,12)" rx="2" ry="2" />
<text  x="1183.63" y="127.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Write (2 samples, 0.32%)</title><rect x="1176.9" y="197" width="3.7" height="15.0" fill="rgb(212,22,6)" rx="2" ry="2" />
<text  x="1179.89" y="207.5" ></text>
</g>
<g >
<title>syscall.Write (1 samples, 0.16%)</title><rect x="1178.8" y="133" width="1.8" height="15.0" fill="rgb(242,102,23)" rx="2" ry="2" />
<text  x="1181.76" y="143.5" ></text>
</g>
<g >
<title>net/url.ParseRequestURI (2 samples, 0.32%)</title><rect x="13.7" y="293" width="3.8" height="15.0" fill="rgb(215,209,11)" rx="2" ry="2" />
<text  x="16.75" y="303.5" ></text>
</g>
<g >
<title>math/rand.(*rngSource).Int63 (1 samples, 0.16%)</title><rect x="1171.3" y="149" width="1.8" height="15.0" fill="rgb(244,220,21)" rx="2" ry="2" />
<text  x="1174.27" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.16%)</title><rect x="1184.4" y="293" width="1.9" height="15.0" fill="rgb(240,39,33)" rx="2" ry="2" />
<text  x="1187.38" y="303.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.16%)</title><rect x="11.9" y="245" width="1.8" height="15.0" fill="rgb(247,12,54)" rx="2" ry="2" />
<text  x="14.87" y="255.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (1 samples, 0.16%)</title><rect x="1184.4" y="325" width="1.9" height="15.0" fill="rgb(226,100,3)" rx="2" ry="2" />
<text  x="1187.38" y="335.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.16%)</title><rect x="1182.5" y="229" width="1.9" height="15.0" fill="rgb(215,148,18)" rx="2" ry="2" />
<text  x="1185.51" y="239.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Intn (10 samples, 1.59%)</title><rect x="1158.2" y="229" width="18.7" height="15.0" fill="rgb(219,94,7)" rx="2" ry="2" />
<text  x="1161.16" y="239.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (3 samples, 0.48%)</title><rect x="1184.4" y="341" width="5.6" height="15.0" fill="rgb(238,74,20)" rx="2" ry="2" />
<text  x="1187.38" y="351.5" ></text>
</g>
<g >
<title>net/http.(*response).Write (3 samples, 0.48%)</title><rect x="1176.9" y="261" width="5.6" height="15.0" fill="rgb(235,68,22)" rx="2" ry="2" />
<text  x="1179.89" y="271.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (626 samples, 99.37%)</title><rect x="10.0" y="341" width="1172.5" height="15.0" fill="rgb(241,26,1)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >net/http.(*conn).serve</text>
</g>
<g >
<title>math/rand.Intn (11 samples, 1.75%)</title><rect x="1156.3" y="245" width="20.6" height="15.0" fill="rgb(231,194,22)" rx="2" ry="2" />
<text  x="1159.29" y="255.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.16%)</title><rect x="11.9" y="181" width="1.8" height="15.0" fill="rgb(212,156,48)" rx="2" ry="2" />
<text  x="14.87" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.16%)</title><rect x="1184.4" y="309" width="1.9" height="15.0" fill="rgb(219,19,36)" rx="2" ry="2" />
<text  x="1187.38" y="319.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.16%)</title><rect x="1184.4" y="277" width="1.9" height="15.0" fill="rgb(229,53,9)" rx="2" ry="2" />
<text  x="1187.38" y="287.5" ></text>
</g>
<g >
<title>runtime.futexsleep (1 samples, 0.16%)</title><rect x="1184.4" y="229" width="1.9" height="15.0" fill="rgb(208,46,31)" rx="2" ry="2" />
<text  x="1187.38" y="239.5" ></text>
</g>
<g >
<title>syscall.Syscall (1 samples, 0.16%)</title><rect x="1178.8" y="101" width="1.8" height="15.0" fill="rgb(240,153,5)" rx="2" ry="2" />
<text  x="1181.76" y="111.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.16%)</title><rect x="11.9" y="277" width="1.8" height="15.0" fill="rgb(228,194,51)" rx="2" ry="2" />
<text  x="14.87" y="287.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).Write (4 samples, 0.63%)</title><rect x="1148.8" y="245" width="7.5" height="15.0" fill="rgb(248,213,46)" rx="2" ry="2" />
<text  x="1151.79" y="255.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (1 samples, 0.16%)</title><rect x="1176.9" y="133" width="1.9" height="15.0" fill="rgb(214,73,21)" rx="2" ry="2" />
<text  x="1179.89" y="143.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.16%)</title><rect x="1184.4" y="261" width="1.9" height="15.0" fill="rgb(250,194,40)" rx="2" ry="2" />
<text  x="1187.38" y="271.5" ></text>
</g>
<g >
<title>main.genSomeBytes (15 samples, 2.38%)</title><rect x="1148.8" y="261" width="28.1" height="15.0" fill="rgb(238,224,27)" rx="2" ry="2" />
<text  x="1151.79" y="271.5" >m..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.16%)</title><rect x="1180.6" y="165" width="1.9" height="15.0" fill="rgb(251,229,42)" rx="2" ry="2" />
<text  x="1183.63" y="175.5" ></text>
</g>
<g >
<title>runtime.gosweepone (1 samples, 0.16%)</title><rect x="1182.5" y="325" width="1.9" height="15.0" fill="rgb(210,209,39)" rx="2" ry="2" />
<text  x="1185.51" y="335.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.16%)</title><rect x="1180.6" y="53" width="1.9" height="15.0" fill="rgb(224,36,40)" rx="2" ry="2" />
<text  x="1183.63" y="63.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.16%)</title><rect x="15.6" y="261" width="1.9" height="15.0" fill="rgb(232,182,51)" rx="2" ry="2" />
<text  x="18.62" y="271.5" ></text>
</g>
<g >
<title>net.(*conn).Write (1 samples, 0.16%)</title><rect x="1176.9" y="149" width="1.9" height="15.0" fill="rgb(239,78,51)" rx="2" ry="2" />
<text  x="1179.89" y="159.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.16%)</title><rect x="1180.6" y="69" width="1.9" height="15.0" fill="rgb(213,141,39)" rx="2" ry="2" />
<text  x="1183.63" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (1 samples, 0.16%)</title><rect x="1182.5" y="261" width="1.9" height="15.0" fill="rgb(231,43,10)" rx="2" ry="2" />
<text  x="1185.51" y="271.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Int63 (5 samples, 0.79%)</title><rect x="1167.5" y="181" width="9.4" height="15.0" fill="rgb(212,206,9)" rx="2" ry="2" />
<text  x="1170.52" y="191.5" ></text>
</g>
<g >
<title>runtime.convT2E (1 samples, 0.16%)</title><rect x="1180.6" y="197" width="1.9" height="15.0" fill="rgb(232,202,41)" rx="2" ry="2" />
<text  x="1183.63" y="207.5" ></text>
</g>
<g >
<title>runtime.gosweepone.func1 (1 samples, 0.16%)</title><rect x="1182.5" y="293" width="1.9" height="15.0" fill="rgb(211,54,40)" rx="2" ry="2" />
<text  x="1185.51" y="303.5" ></text>
</g>
<g >
<title>main.doSomeThingOne (604 samples, 95.87%)</title><rect x="17.5" y="261" width="1131.3" height="15.0" fill="rgb(227,42,21)" rx="2" ry="2" />
<text  x="20.49" y="271.5" >main.doSomeThingOne</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.16%)</title><rect x="1180.6" y="101" width="1.9" height="15.0" fill="rgb(227,181,2)" rx="2" ry="2" />
<text  x="1183.63" y="111.5" ></text>
</g>
<g >
<title>syscall.write (1 samples, 0.16%)</title><rect x="1178.8" y="117" width="1.8" height="15.0" fill="rgb(249,45,37)" rx="2" ry="2" />
<text  x="1181.76" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.16%)</title><rect x="1184.4" y="245" width="1.9" height="15.0" fill="rgb(214,159,31)" rx="2" ry="2" />
<text  x="1187.38" y="255.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.16%)</title><rect x="1184.4" y="213" width="1.9" height="15.0" fill="rgb(214,171,5)" rx="2" ry="2" />
<text  x="1187.38" y="223.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.16%)</title><rect x="1180.6" y="181" width="1.9" height="15.0" fill="rgb(247,77,5)" rx="2" ry="2" />
<text  x="1183.63" y="191.5" ></text>
</g>
<g >
<title>syscall.write (1 samples, 0.16%)</title><rect x="1176.9" y="101" width="1.9" height="15.0" fill="rgb(229,154,10)" rx="2" ry="2" />
<text  x="1179.89" y="111.5" ></text>
</g>
<g >
<title>runtime.rawstring (1 samples, 0.16%)</title><rect x="10.0" y="229" width="1.9" height="15.0" fill="rgb(208,162,23)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.16%)</title><rect x="1180.6" y="149" width="1.9" height="15.0" fill="rgb(249,181,48)" rx="2" ry="2" />
<text  x="1183.63" y="159.5" ></text>
</g>
<g >
<title>runtime.freespecial (1 samples, 0.16%)</title><rect x="1182.5" y="245" width="1.9" height="15.0" fill="rgb(244,183,27)" rx="2" ry="2" />
<text  x="1185.51" y="255.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.16%)</title><rect x="11.9" y="197" width="1.8" height="15.0" fill="rgb(229,218,23)" rx="2" ry="2" />
<text  x="14.87" y="207.5" ></text>
</g>
<g >
<title>sync.(*Mutex).Unlock (2 samples, 0.32%)</title><rect x="1173.1" y="149" width="3.8" height="15.0" fill="rgb(226,169,45)" rx="2" ry="2" />
<text  x="1176.14" y="159.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (622 samples, 98.73%)</title><rect x="17.5" y="309" width="1165.0" height="15.0" fill="rgb(219,130,13)" rx="2" ry="2" />
<text  x="20.49" y="319.5" >net/http.(*ServeMux).ServeHTTP</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.16%)</title><rect x="11.9" y="213" width="1.8" height="15.0" fill="rgb(249,218,31)" rx="2" ry="2" />
<text  x="14.87" y="223.5" ></text>
</g>
<g >
<title>main.handler (622 samples, 98.73%)</title><rect x="17.5" y="277" width="1165.0" height="15.0" fill="rgb(228,141,50)" rx="2" ry="2" />
<text  x="20.49" y="287.5" >main.handler</text>
</g>
<g >
<title>syscall.Write (1 samples, 0.16%)</title><rect x="1176.9" y="117" width="1.9" height="15.0" fill="rgb(216,72,42)" rx="2" ry="2" />
<text  x="1179.89" y="127.5" ></text>
</g>
<g >
<title>net/http.newBufioWriterSize (1 samples, 0.16%)</title><rect x="11.9" y="309" width="1.8" height="15.0" fill="rgb(247,96,9)" rx="2" ry="2" />
<text  x="14.87" y="319.5" ></text>
</g>
<g >
<title>net/http.(*chunkWriter).Write (3 samples, 0.48%)</title><rect x="1176.9" y="213" width="5.6" height="15.0" fill="rgb(246,49,13)" rx="2" ry="2" />
<text  x="1179.89" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.32%)</title><rect x="1186.3" y="325" width="3.7" height="15.0" fill="rgb(246,48,34)" rx="2" ry="2" />
<text  x="1189.25" y="335.5" ></text>
</g>
<g >
<title>all (630 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(210,78,30)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.16%)</title><rect x="1182.5" y="309" width="1.9" height="15.0" fill="rgb(225,100,9)" rx="2" ry="2" />
<text  x="1185.51" y="319.5" ></text>
</g>
<g >
<title>math/rand.(*Rand).Int31 (5 samples, 0.79%)</title><rect x="1167.5" y="197" width="9.4" height="15.0" fill="rgb(239,172,42)" rx="2" ry="2" />
<text  x="1170.52" y="207.5" ></text>
</g>
<g >
<title>runtime.rawstringtmp (1 samples, 0.16%)</title><rect x="10.0" y="245" width="1.9" height="15.0" fill="rgb(215,20,10)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.16%)</title><rect x="1180.6" y="85" width="1.9" height="15.0" fill="rgb(254,182,18)" rx="2" ry="2" />
<text  x="1183.63" y="95.5" ></text>
</g>
<g >
<title>runtime.gcDrain (1 samples, 0.16%)</title><rect x="1186.3" y="293" width="1.8" height="15.0" fill="rgb(246,21,53)" rx="2" ry="2" />
<text  x="1189.25" y="303.5" ></text>
</g>
<g >
<title>net/http.(*response).write (3 samples, 0.48%)</title><rect x="1176.9" y="245" width="5.6" height="15.0" fill="rgb(222,90,35)" rx="2" ry="2" />
<text  x="1179.89" y="255.5" ></text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.16%)</title><rect x="1186.3" y="277" width="1.8" height="15.0" fill="rgb(236,180,28)" rx="2" ry="2" />
<text  x="1189.25" y="287.5" ></text>
</g>
<g >
<title>runtime.goexit (630 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(246,17,39)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >runtime.goexit</text>
</g>
<g >
<title>net/http.(*conn).readRequest (3 samples, 0.48%)</title><rect x="11.9" y="325" width="5.6" height="15.0" fill="rgb(238,221,42)" rx="2" ry="2" />
<text  x="14.87" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.16%)</title><rect x="15.6" y="245" width="1.9" height="15.0" fill="rgb(243,170,18)" rx="2" ry="2" />
<text  x="18.62" y="255.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (1 samples, 0.16%)</title><rect x="1178.8" y="149" width="1.8" height="15.0" fill="rgb(247,9,12)" rx="2" ry="2" />
<text  x="1181.76" y="159.5" ></text>
</g>
<g >
<title>net/http.checkConnErrorWriter.Write (1 samples, 0.16%)</title><rect x="1178.8" y="181" width="1.8" height="15.0" fill="rgb(239,167,40)" rx="2" ry="2" />
<text  x="1181.76" y="191.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.16%)</title><rect x="1180.6" y="133" width="1.9" height="15.0" fill="rgb(239,6,47)" rx="2" ry="2" />
<text  x="1183.63" y="143.5" ></text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (622 samples, 98.73%)</title><rect x="17.5" y="293" width="1165.0" height="15.0" fill="rgb(240,3,11)" rx="2" ry="2" />
<text  x="20.49" y="303.5" >net/http.HandlerFunc.ServeHTTP</text>
</g>
<g >
<title>net/http.checkConnErrorWriter.Write (1 samples, 0.16%)</title><rect x="1176.9" y="165" width="1.9" height="15.0" fill="rgb(245,145,23)" rx="2" ry="2" />
<text  x="1179.89" y="175.5" ></text>
</g>
</g>
</svg>
