---
title: inspect
layout: post
category: python
author: 夏泽民
---
inspect模块用于收集python对象的信息，可以获取类或函数的参数的信息，源码，解析堆栈，对对象进行类型检查等等。

inspect模块主要提供了四种用处：

对是否是模块、框架、函数进行类型检查
获取源码
获取类或者函数的参数信息
解析堆栈解析堆栈

1、getargspec(func)
返回一个命名元组ArgSpect(args, varargs, keywords, defaults)，
args是函数位置参数名列表，varargs是*参数名，keywords是**参数名，defaults是默认参数值的元组。

# 函数
def f1(a, b, *args, **kwargs):
    pass
    
argspec = inspect.getargspec(f1)
print argspec  # ArgSpec(args=['a', 'b'], varargs='args', keywords='kwargs', defaults=None)
print argspec.args  # ['a', 'b']
print argspec.varargs  # args


# 类方法
class F():
    def f1(self, a, b, *args, **kwargs):
        pass


argspec = inspect.getargspec(F.f1)
print argspec  # ArgSpec(args=['self', 'a', 'b'], varargs='args', keywords='kwargs', defaults=None)
print argspec.args  # ['self', 'a', 'b']
print argspec.varargs  # args
 

2、getsource(object)
返回类或者函数的源码

class F():
    def f1(self, a, b, *args, **kwargs):
        pass


print inspect.getsource(F)
print inspect.getsource(F.f1)
 

3、getsourcelines(object)
返回一个元组，元组第一项为对象源代码行的列表，第二项是第一行源代码的行号

class F():
    def f1(self, a, b, *args, **kwargs):
        pass


print inspect.getsourcelines(F)
# (['class F():\n', '    def f1(self, a, b, *args, **kwargs):\n', '        pass\n'], 3)
print inspect.getsourcelines(F.f1)
# (['    def f1(self, a, b, *args, **kwargs):\n', '        pass\n'], 4)
 

4、getmodule(object)
返回定义对象的模块

class F():
    def f1(self, a, b, *args, **kwargs):
        pass


print inspect.getmodule(F)  # <module '__main__' from 'D:/Projects/test.py'>
print inspect.getmodule(F.f1)  # <module '__main__' from 'D:/Projects/test.py'>
 

5、ismodule,isclass,ismethod,isfunction,isbuiltin
一系列判断对象类型的方法，大都是包装了isinstance(object, types.FunctionType)之类语句的函数。

 

6.getmembers(object[, predicate])
返回一个包含对象的所有成员的(name, value)列表。返回的内容比对象的__dict__包含的内容多，源码是通过dir()实现的。
predicate是一个可选的函数参数，被此函数判断为True的成员才被返回。

# getmembers的源码
def getmembers(object, predicate=None):
    """Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate."""
    results = []
    for key in dir(object):
        try:
            value = getattr(object, key)
        except AttributeError:
            continue
        if not predicate or predicate(value):
            results.append((key, value))
    results.sort()
    return results

# 示例
class Foo(object):

    def __init__(self, name):
        self.__name = name

    def getname(self):
        return self.__name


print inspect.getmembers(Foo, inspect.ismethod)
结果：
[('__init__', <unbound method Foo.__init__>), ('getname', <unbound method Foo.getname>)]

https://www.cnblogs.com/Zzbj/p/11716806.html 
<!-- more -->
getmembers(object[, predicate])

返回一个包含对象的所有成员的(name, value)列表。返回的内容比对象的__dict__包含的内容多，源码是通过dir()实现的。

predicate是一个可选的函数参数，被此函数判断为True的成员才被返回。

getmodule(object)

返回定义对象的模块

getsource(object)

返回对象的源代码

getsourcelines(object)

返回一个元组，元组第一项为对象源代码行的列表，第二项是第一行源代码的行号

https://www.zhihu.com/question/23760468

https://github.com/more-itertools/more-itertools


{% raw %}
首先通过一个例子来看一下本文中可能用到的对象和相关概念。

复制代码
#coding:utf-8
import sys

def foo():pass

class Cat(object):
    def __init__(self, name='Kitty'):
        self.name = name

    def sayHi(self):
        print self.name, 'says Hi!'

cat = Cat()

print Cat.sayHi
print cat.sayHi
复制代码
有时候我们会碰到这样的需求，需要执行对象的某个方法，或是需要对对象的某个字段赋值，而方法名或是字段名在编码代码时并不能确定，需要通过参数传递字符串的形式输入。举个具体的例子：当我们需要实现一个通用的DBM框架时，可能需要对数据对象的字段赋值，但我们无法预知用到这个框架的数据对象都有些什么字段，换言之，我们在写框架的时候需要通过某种机制访问未知的属性。

这个机制被称为反射（反过来让对象告诉我们他是什么），或是自省（让对象自己告诉我们他是什么，好吧我承认括号里是我瞎掰的- -#），用于实现在运行时获取未知对象的信息。反射是个很吓唬人的名词，听起来高深莫测，在一般的编程语言里反射相对其他概念来说稍显复杂，一般来说都是作为高级主题来讲；但在Python中反射非常简单，用起来几乎感觉不到与其他的代码有区别，使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例；不过获取到的字段不能直接赋值，因为拿到的其实是另一个指向同一个地方的引用，赋值只能改变当前的这个引用而已。

1. 访问对象的属性

以下列出了几个内建方法，可以用来检查或是访问对象的属性。这些方法可以用于任意对象而不仅仅是例子中的Cat实例对象；Python中一切都是对象。

复制代码
#coding:utf-8
from a import *

cat = Cat('kitty')

print cat.name
cat.sayHi()    #调用实例方法

print dir(cat)

if hasattr(cat, 'name'): #检查实例是否有这个属性
    setattr(cat, 'name', 'tiger') #same as: a.name = 'tiger'
    print getattr(cat, 'name') #same as: print a.name

    
getattr(cat, 'sayHi')()
复制代码
    dir([obj]):
    调用这个方法将返回包含obj大多数属性名的列表（会有一些特殊的属性不包含在内）。obj的默认值是当前的模块对象。
    hasattr(obj, attr): 
    这个方法用于检查obj是否有一个名为attr的值的属性，返回一个布尔值。
    getattr(obj, attr): 
    调用这个方法将返回obj中名为attr值的属性的值，例如如果attr为’bar’，则返回obj.bar。
    setattr(obj, attr, val):
    调用这个方法将给obj的名为attr的值的属性赋值为val。例如如果attr为’bar’，则相当于obj.bar = val。

 

2. 访问对象的元数据

当你对一个你构造的对象使用dir()时，可能会发现列表中的很多属性并不是你定义的。这些属性一般保存了对象的元数据，比如类的__name__属性保存了类名。大部分这些属性都可以修改，不过改动它们意义并不是很大；修改其中某些属性如function.func_code还可能导致很难发现的问题，所以改改name什么的就好了，其他的属性不要在不了解后果的情况下修改。

接下来列出特定对象的一些特殊属性。另外，Python的文档中有提到部分属性不一定会一直提供，下文中将以红色的星号*标记，使用前你可以先打开解释器确认一下。

2.0. 准备工作：确定对象的类型
在types模块中定义了全部的Python内置类型，结合内置方法isinstance()就可以确定对象的具体类型了。

isinstance(object, classinfo): 
检查object是不是classinfo中列举出的类型，返回布尔值。classinfo可以是一个具体的类型，也可以是多个类型的元组或列表。
types模块中仅仅定义了类型，而inspect模块中封装了很多检查类型的方法，比直接使用types模块更为轻松，所以这里不给出关于types的更多介绍，如有需要可以直接查看types模块的文档说明。本文第3节中介绍了inspect模块。

2.1. 模块(module)
__doc__: 文档字符串。如果模块没有文档，这个值是None。
*__name__: 始终是定义时的模块名；即使你使用import .. as 为它取了别名，或是赋值给了另一个变量名。
*__dict__: 包含了模块里可用的属性名-属性的字典；也就是可以使用模块名.属性名访问的对象。
__file__: 包含了该模块的文件路径。需要注意的是内建的模块没有这个属性，访问它会抛出异常！
复制代码
#coding:utf-8
import fnmatch as m

print m.__doc__.splitlines()[0]
print m.__name__
print m.__file__
print m.__dict__.items()[0]
复制代码


__dict__ 返回属性、方法对象名值的字典，而dir仅仅是个属性、方法名的列表。

2.2. 类(class)
__doc__: 文档字符串。如果类没有文档，这个值是None。
*__name__: 始终是定义时的类名。
*__dict__: 包含了类里可用的属性名-属性的字典；也就是可以使用类名.属性名访问的对象。
__module__: 包含该类的定义的模块名；需要注意，是字符串形式的模块名而不是模块对象。
*__bases__: 直接父类对象的元组；但不包含继承树更上层的其他类，比如父类的父类
复制代码
#coding:utf-8
from a import *

print Cat.__doc__ #None Cat类没有doc
print Cat.__name__ #Cat
print Cat.__module__ # a 如果在自身的module中执行时__main__
print Cat.__bases__ #(<type 'object'>,)
print Cat.__dict__ # 一个属性、方法对象名值的字典
复制代码
2.3. 实例(instance)
实例是指类实例化以后的对象。

*__dict__: 包含了可用的属性名-属性对象字典。
*__class__: 该实例的类对象。对于类Cat，cat.__class__ == Cat 为 True。
#coding:utf-8
from a import *

print cat.__dict__ #{'name': 'Kitty'} 仅仅有属性，没有方法
print cat.__class__ #<class 'a.Cat'>
print cat.__class__ == Cat #True
 

2.4. 内建函数和方法(built-in functions and methods)
根据定义，内建的(built-in)模块是指使用C写的模块，可以通过sys模块的builtin_module_names字段查看都有哪些模块是内建的。这些模块中的函数和方法可以使用的属性比较少，不过一般也不需要在代码中查看它们的信息。

__doc__: 函数或方法的文档。
__name__: 函数或方法定义时的名字。
__self__: 仅方法可用，如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。
*__module__: 函数或方法所在的模块名。
2.5. 函数(function)
这里特指非内建的函数。注意，在类中使用def定义的是方法，方法与函数虽然有相似的行为，但它们是不同的概念。

__doc__: 函数的文档；另外也可以用属性名func_doc。
__name__: 函数定义时的函数名；另外也可以用属性名func_name。
*__module__: 包含该函数定义的模块名；同样注意，是模块名而不是模块对象。
*__dict__: 函数的可用属性；另外也可以用属性名func_dict。  不要忘了函数也是对象，可以使用函数.属性名访问属性（赋值时如果属性不存在将新增一个），或使用内置函数has/get/setattr()访问。不过，在函数中保存属性的意义并不大。
func_defaults: 这个属性保存了函数的参数默认值元组；因为默认值总是靠后的参数才有，所以不使用字典的形式也是可以与参数对应上的。
func_code: 这个属性指向一个该函数对应的code对象，code对象中定义了其他的一些特殊属性，将在下文中另外介绍。
func_globals: 这个属性指向当前的全局命名空间而不是定义函数时的全局命名空间，用处不大，并且是只读的。
*func_closure: 这个属性仅当函数是一个闭包时有效，指向一个保存了所引用到的外部函数的变量cell的元组，这个属性也是只读的。（通过func_closure可以查看必报）
复制代码
#coding:utf-8
def foo():
    name = 'zhangsan'
    age = 11

    def bar():
        print name, age

    return bar

closure = foo()

print closure.func_closure 
# (<cell at 0x7f2fa7d36558: int object at 0x19f7b78>, <cell at 0x7f2fa7d36590: str object at 0x7f2fa7d37450>)

for cell in closure.func_closure:
    print cell.cell_contents
    # zhangsan
    # 11
复制代码
 

 

2.6. 方法(method)
方法虽然不是函数，但可以理解为在函数外面加了一层外壳；拿到方法里实际的函数以后，就可以使用2.5节的属性了。

__doc__: 与函数相同。
__name__: 与函数相同。
*__module__: 与函数相同。
im_func: 使用这个属性可以拿到方法里实际的函数对象的引用。另外如果是2.6以上的版本，还可以使用属性名__func__。
im_self: 如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。如果是2.6以上的版本，还可以使用属性名__self__。
im_class: 实际调用该方法的类，或实际调用该方法的实例的类。注意不是方法的定义所在的类，如果有继承关系的话。
 这里讨论的是一般的实例方法，另外还有两种特殊的方法分别是类方法(classmethod)和静态方法(staticmethod)。类方法还是方法，不过因为需要使用类名调用，所以他始终是绑定的；而静态方法可以看成是在类的命名空间里的函数（需要使用类名调用的函数），它只能使用函数的属性，不能使用方法的属性。

复制代码
#coding:utf-8

class Dog(object):
    def imeth(self):
        print 'instance method ', self

    @classmethod
    def cmeth(cls):
        print 'class method ', cls

    @staticmethod
    def smeth():
        print 'static method '

dog = Dog()
dog.imeth() #实例调用 绑定方法
Dog.imeth(dog) #类调用 未绑定方法

Dog.cmeth() # 类调用类方法
Dog.smeth() # 类调用静态方法

# 实例虽然也可以调用 类方法和静态方法，但是没有多大意义，类方法依旧绑定类本身
dog.cmeth()
dog.smeth()

print '============================'


print dog.imeth.__self__ #<__main__.Dog object at 0x7f9a69d04e10>
print Dog.imeth.__self__ #None 未绑定
print Dog.cmeth.__self__ #<class '__main__.Dog'>
print dog.cmeth.__self__ #<class '__main__.Dog'> 使用实例调用类方法没有多大意义，依旧绑定类本身
#print Dog.smeth.__self__ # 静态方法可以理解为类中的函数（function），所以没有__self__
复制代码
 

2.7. 生成器(generator)
生成器是调用一个生成器函数(generator function)返回的对象，多用于集合对象的迭代。

__iter__: 仅仅是一个可迭代的标记。
gi_code: 生成器对应的code对象。
gi_frame: 生成器对应的frame对象。
gi_running: 生成器函数是否在执行。生成器函数在yield以后、执行yield的下一行代码前处于frozen状态，此时这个属性的值为0。
next|close|send|throw: 这是几个可调用的方法，并不包含元数据信息，如何使用可以查看生成器的相关文档。
 

复制代码
#coding:utf-8

def gen():
    for n in xrange(5):
        yield n

g = gen()

print g
print g.gi_code
print g.gi_frame
print g.gi_running
复制代码
接下来讨论的是几个不常用到的内置对象类型。这些类型在正常的编码过程中应该很少接触，除非你正在自己实现一个解释器或开发环境之类。所以这里只列出一部分属性，如果需要一份完整的属性表或想进一步了解，可以查看文末列出的参考文档。

2.8. 代码块(code)
代码块可以由类源代码、函数源代码或是一个简单的语句代码编译得到。这里我们只考虑它指代一个函数时的情况；2.5节中我们曾提到可以使用函数的func_code属性获取到它。code的属性全部是只读的。

co_argcount: 普通参数的总数，不包括*参数和**参数。
co_varnames: 所有的参数名（包括*参数和**参数）和局部变量名的元组。
co_filename: 源代码所在的文件名。
co_flags:  这是一个数值，每一个二进制位都包含了特定信息。较关注的是0b100(0×4)和0b1000(0×8)，如果co_flags & 0b100 != 0，说明使用了*args参数；如果co_flags & 0b1000 != 0，说明使用了**kwargs参数。另外，如果co_flags & 0b100000(0×20) != 0，则说明这是一个生成器函数(generator function)
（我的理解是code代表了类、函数代码本身的一些特征）

复制代码
#coding:utf-8

def foo(name, age=11, home='CHN', *args, **kwargs):
    inner = 'inner'
    
co = foo.func_code
print co.co_argcount #3 普通参数 name age home
print co.co_varnames 
# ('name', 'age', 'home', 'args', 'kwargs', 'inner')
print co.co_flags & 0b100 #4 表明使用了*args
复制代码
2.9. 栈帧(frame)
栈帧表示程序运行时函数调用栈中的某一帧。函数没有属性可以获取它，因为它在函数调用时才会产生，而生成器则是由函数调用返回的，所以有属性指向栈帧（我的理解就是生成器是动态的）。想要获得某个函数相关的栈帧，则必须在调用这个函数且这个函数尚未返回时获取。你可以使用sys模块的_getframe()函数、或inspect模块的currentframe()函数获取当前栈帧。这里列出来的属性全部是只读的。

f_back: 调用栈的前一帧。
f_code: 栈帧对应的code对象。
f_locals: 用在当前栈帧时与内建函数locals()相同，但你可以先获取其他帧然后使用这个属性获取那个帧的locals()。
f_globals: 用在当前栈帧时与内建函数globals()相同，但你可以先获取其他帧……。
2.10. 追踪(traceback)
追踪是在出现异常时用于回溯的对象，与栈帧相反。由于异常时才会构建，而异常未捕获时会一直向外层栈帧抛出，所以需要使用try才能见到这个对象。你可以使用sys模块的exc_info()函数获得它，这个函数返回一个元组，元素分别是异常类型、异常对象、追踪。traceback的属性全部是只读的。

tb_next: 追踪的下一个追踪对象。
tb_frame: 当前追踪对应的栈帧。
tb_lineno: 当前追踪的行号。
 

 

3. 使用inspect模块
inspect模块提供了一系列函数用于帮助使用自省。下面仅列出较常用的一些函数，想获得全部的函数资料可以查看inspect模块的文档。

3.1. 检查对象类型
 

is{module|class|function|method|builtin}(obj): 检查对象是否为模块、类、函数、方法、内建函数或方法。
 

 

isroutine(obj):  用于检查对象是否为函数、方法、内建函数或方法等等可调用类型。用这个方法会比多个is*()更方便，不过它的实现仍然是用了多个is*()。
 

复制代码
#coding:utf-8
import inspect

print inspect.ismodule(inspect) #True
print inspect.isfunction(inspect.isfunction) #True
print inspect.isbuiltin(sorted) #True
print inspect.isroutine(sorted) #True
复制代码
 

对于实现了__call__的类实例，这个方法会返回False。如果目的是只要可以直接调用就需要是True的话，不妨使用isinstance(obj, collections.Callable)这种形式。我也不知道为什么Callable会在collections模块中，抱歉！我猜大概是因为collections模块中包含了很多其他的ABC(Abstract Base Class)的缘故吧：）

 

复制代码
#coding:utf-8
import collections

class Dog(object):
    def __call__(self, name):#实现__call__方法就可以直接调用对象了
        print 'i am a dog named ' , name

dog = Dog()
dog('DaHuang')

print isinstance(dog, collections.Callable) #True

print dog.__class__.__bases__
复制代码
3.2. 获取对象信息
getmembers(object[, predicate]): 这个方法是dir()的扩展版，它会将dir()找到的名字对应的属性一并返回，形如[(name, value), ...]。另外，predicate是一个方法的引用，如果指定，则应当接受value作为参数并返回一个布尔值，如果为False，相应的属性将不会返回。使用is*作为第二个参数可以过滤出指定类型的属性。
getmodule(object):还在为第2节中的__module__属性只返回字符串而遗憾吗？这个方法一定可以满足你，它返回object的定义所在的模块对象。
get{file|sourcefile}(object):获取object的定义所在的模块的文件名|源代码文件名（如果没有则返回None）。用于内建的对象（内建模块、类、函数、方法）上时会抛出TypeError异常。
get{source|sourcelines}(object):获取object的定义的源代码，以字符串|字符串列表返回。代码无法访问时会抛出IOError异常。只能用于module/class/function/method/code/frame/traceack对象。
getargspec(func): 仅用于方法，获取方法声明的参数，返回元组，分别是(普通参数名的列表, *参数名, **参数名, 默认值元组)。如果没有值，将是空列表和3个None。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。
复制代码
#coding:utf-8
import inspect
from a import *

print inspect.getmembers(Cat, inspect.ismethod)
#[('__init__', <unbound method Cat.__init__>), ('sayHi', <unbound method Cat.sayHi>)]

print cat.__module__ #str
print inspect.getmodule(cat) #<module 'a' from '/tmp/zc/a.pyc'> module 对象

print inspect.getfile(Cat) #/tmp/zc/a.pyc

print inspect.getsource(Cat) # 返回源代码（觉得这个挺酷的！！！）
"""
class Cat(object):
    def __init__(self, name='Kitty'):
        self.name = name

    def sayHi(self):
        print self.name, 'says Hi!'
"""
class Dog(object):
    def foo(self, name, age=11, home='CHN', *args, **kwargs):
        pass


print inspect.getargspec(Dog.foo)
#ArgSpec(args=['self', 'name', 'age', 'home'], varargs='args', keywords='kwargs', defaults=(11, 'CHN'))
复制代码
 

getmro(cls): 
返回一个类型元组，查找类属性时按照这个元组中的顺序。如果是新式类，与cls.__mro__结果一样。但旧式类没有__mro__这个属性，直接使用这个属性会报异常，所以这个方法还是有它的价值的。

 

复制代码
#coding:utf-8
import inspect

class A(object):
    pass

class B(object):
    pass

class C(A, B):
    pass

print inspect.getmro(C) 
print C.__mro__
print C.mro()
"""
(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <type 'object'>)
(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <type 'object'>)
[<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <type 'object'>]
"""
{% endraw %}
https://www.cnblogs.com/zh1164/p/6031464.html
