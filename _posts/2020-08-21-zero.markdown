---
title: zero
layout: post
category: golang
author: 夏泽民
---
https://github.com/tal-tech/go-zero
https://gocn.vip/topics/10845
强大的工具支持，尽可能少的代码编写
极简的接口
完全兼容 net/http
支持中间件，方便扩展
高性能
面向故障编程，弹性设计
内建服务发现、负载均衡
内建限流、熔断、降载，且自动触发，自动恢复
API 参数自动校验
超时级联控制
自动缓存控制
链路跟踪、统计报警等
高并发支撑，稳定保障了晓黑板疫情期间每天的流量洪峰
<!-- more -->
o get -u github.com/tal-tech/go-zero
7. Quick Start
编译 goctl 工具
go build tools/goctl/goctl.go
把 goctl 放到 $PATH 的目录下，确保 goctl 可执行

定义 API 文件，比如 greet.api，可以在 vs code 里安装goctl插件，支持 api 语法
type Request struct {
  Name string `path:"name,options=you|me"` // 框架自动验证请求参数是否合法
}

type Response struct {
  Message string `json:"message"`
}

service greet-api {
  @server(
    handler: GreetHandler
  )
  get /greet/from/:name(Request) returns (Response);
}
也可以通过 goctl 生成 api 模本文件，命令如下：

goctl api -o greet.api
生成 go 服务端代码
goctl api go -api greet.api -dir greet
生成的文件结构如下：

├── greet
│   ├── etc
│   │   └── greet-api.json        // 配置文件
│   ├── greet.go                  // main文件
│   └── internal
│       ├── config
│       │   └── config.go         // 配置定义
│       ├── handler
│       │   ├── greethandler.go   // get/put/post/delete等路由定义文件
│       │   └── routes.go         // 路由列表
│       ├── logic
│       │   └── greetlogic.go     // 请求逻辑处理文件
│       ├── svc
│       │   └── servicecontext.go // 请求上下文，可以传入mysql, redis等依赖
│       └── types
│           └── types.go          // 请求、返回等类型定义
└── greet.api                     // api描述文件
生成的代码可以直接运行：

cd greet
go run greet.go -f etc/greet-api.json
默认侦听在 8888 端口（可以在配置文件里修改），可以通过 curl 请求：

➜  go-zero git:(master) curl -w "\ncode: %{http_code}\n" http://localhost:8888/greet/from/kevin
{"code":0}
code: 200
编写业务代码：

可以在 servicecontext.go 里面传递依赖给 logic，比如 mysql, redis 等
在 api 定义的 get/post/put/delete 等请求对应的 logic 里增加业务处理逻辑
可以根据 api 文件生成前端需要的 Java, TypeScript, Dart, JavaScript 代码
goctl api java -api greet.api -dir greet
goctl api dart -api greet.api -dir greet