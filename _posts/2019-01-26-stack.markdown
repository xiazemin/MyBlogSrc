---
title: golang 内存分配
layout: post
category: golang
author: 夏泽民
---
1 变量的生命周期　　 
　　生命周期是指程序执行过程中变量存在的时间段。下面我们分别来看看包变量（全局变量）和局部变量两种变量的生命周期。 
　　① 包变量一直常驻在内存到程序的结束，然后被系统垃圾回收器回收。也就是说包变量的生命周期是整个程序的执行时间。 
　　② 局部变量，例如一个函数中定义的变量。它有一个动态的生命周期：每次执行生命语句时创建一个新的实体，变量一直生存到它变得不可访问（例如没有外部指针指向它，函数退出我们没有路径能访问到这个变量），这时它占用的存储空间就会被回收。 
　　所以我们有结论： 
　　并不是定义在函数内部的局部变量在访问退出函数后就会被回收! 
2 堆与栈的分配 
　　学过其他诸如C/C++语言的都知道，变量定义完成一般是分配在堆和栈空间上的。存在哪个空间上是跟你是否动态分配内存有关（new/malloc）。但是在Go语言上这个选择并不是基于使用var和new关键字来声明变量的。 
　　我们看下面两个程序实例：

var p *int    //全局指针变量
func f(){
    var i int
    i = 1
    p = &x    //全局指针变量指向局部变量i
}
func f(){
    p := new(int) //局部指针变量，使用new申请的空间
    *p = 1
}
　　上面程序中，第一个程序虽然i是通过var申请的局部变量，但是由于有外部指针指向访问，我们有路径可找到这个空间（变量能够逃逸出函数），所以局部变量i是申请在堆空间上。而第二个程序中p指针变量虽然是使用new申请的空间，但是由于退出函数就没有路径可寻找到它（变量无法逃出函数），所以局部变量p是申请在栈空间上的。 
　　另外我需要提的一点，Go语言区别于C/C++，虽然变量申请在堆空间上，但是它有自动回收垃圾的功能，所以这些堆地址空间也无需我们手动回收，系统会在需要释放的时刻自动进行垃圾回收。
