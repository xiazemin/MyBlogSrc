---
title: Sidecar
layout: post
category: golang
author: 夏泽民
---
Sidecar 是一个很纠结的名字，我们在翻译技术雷达时采用了一个比较通俗的翻译，即边车，而这个词随着微服务的火热与 Service Mesh 的逐渐成熟而进入人们的视野。虽然很多企业在自己的后台应用中已经大量的使用了 Sidecar，但是也是没有意识到这是一个极为有用的 pattern
<!-- more -->
Sidecar 直接表示就是挎斗摩托车，也就是常说的“三蹦子”
我们目前很多程序都是奔着 Cloud Native 的目标去的，我们的代码注定是要跑在云上的，当有人问我如果我要做到 Cloud Native 时，有没有合适的学习资料之类的时，我会考虑如果你是有一定经验的开发者，并且对 Design Pattern 有一些了解，那么你非常适合这本来自微软 P & P Group 的书 Cloud Design Patterns，虽然这本书很简单，实例也不多，但是更多的是启发性。我也是在 Cloud Design Pattern 这本书中学到了很多，sidecar 也是其中之一，并且我们写了很多很多 Sidecar 用于管理自己的 Service Mesh 。
为什么你需要 Sidecar？
非常简单，想象一下你要编写一堆 Web Service API，使用 JSON 作为数据格式暴露给前端，这个应用程序是用最常见的 Spring Boot 编写的，然后你要把他丢在你的虚拟机或者 k8s 上，你除了写代码，还需要考虑什么？

DNS
反向代理
服务发现
服务注册
负载均衡
HTTPS
弹性
日志
性能监控 APM
警报
终端安全
获取配置
等等
很多同事都对这些事情嗤之以鼻，毕竟大多数人的核心工作还是写代码，把应用做起来，至于这些事情是 ops 做的事儿，或者工程师可以做一部分，比如配置日志、给端点加个证书配置等等。于是我问一个朋友，Spring Boot 自带的 server 你知道怎么配证书和日志，那么 node express 呢？那么 on rails 呢？那么 play framework 呢？特别是当你决心要实现微服务架构的时候，这些看起来比较麻烦又很简单的事儿，反倒最消耗人，我们不希望给每个服务都做一遍，但是又不得不做一遍。所以，sidecar 的出现可以让我们以更优雅的方式解决这个事情，刚才我们提到的大量的功能都可以用 out-of-process 的方式实现，比如说反向代理。

Ruby 的 Unicorn Server 是一个很好的 Rack 容器，但是它对慢连接很敏感，而且不是很好处理 access log，熟悉 NGINX 的你一定想到了，如果我在虚拟机上开启一个 NGINX 进程，并且将 443 端口暴露出去，然后在这个 NGINX 中配置好 access log 与证书，并且将收到的请求使用 linux socket 的方式转发给 unicorn（或者直接走 docker network），这样我的 unicorn server 不就很简单了，我甚至都不需要配置。这样的一个 NGINX 就是一个 sidecar，它实现了访问记录、端点安全、进程隔离、并且轻量。你的应用程序不用再在乎这些，大约长得像这样：

server {
  listen 80;
...
  location / {
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Request-Start "t=\${msec}";
    proxy_set_header Host \$http_host;
    proxy_redirect off;
    proxy_pass http://backend;
...
再举一个例子，我们每个应用程序都会记录日志，而我们并不希望日志保存在每台机器上或者容器中，我们希望每个应用是不产生任何状态的。但是这很难，我们必须开发所谓的日志收集系统，并且相关的日志组件，往往我们只能兼顾一两个流行语言或平台，例如 Java 与 JavaScript，而且我们还得维护这些东西，直到公司倒闭。有没有更优雅的解决办法呢？答案是有，在 12 factor app: logs 中，我们希望以事件流的方式去处理日志，如果我的应用把日志丢到 stdout 与 stderr 中，然后有人来自动收集，归档并发送到日志中心呢？这就是日志收集器，这也是一个 sidecar。

Sidecar 核心思想
Sidecar 不是应用程序的必要组成部分，当你使用 docker-compose 在本地启动一个小服务做开发测试的时候，Sidecar 并不会起作用，所以它不影响你的核心功能。但是，Sidecar 在真正的生产环境中，是和你的应用程序绑定在一起的，应用在哪里启动，它就出现在哪里。我们的应用不论是在虚拟机或者是在容器中，每一个应用的实体，都有大量的 sidecar 来做这种与核心功能无关的活儿。

每个“三蹦子”都有自己的 sidecar，每个 sidecar 都是紧紧的 attach 到它的“三蹦子”上的。

Sidecar 是独立于其应用程序之外的，不使用应用程序的运行环境与编程语言。比如你可以使用 JavaScript 去做日志收集器，而不用关心应用程序用的什么语言，你们使用进程通信的方式或者更粗暴的流
Sidecar 是可以访问一些相同的系统资源的，和应用程序一样。这样你才能进行系统监控与收集程序的健康数据。但是也有一些数据是在应用程序内打桩，然后暴露出去的比如 transaction
Sidecar 实际上对性能的损失非常小，特别是使用了容器化技术后，本来启动容器就是很廉价的事情，而且使用 docker image 发布 sidecar 让这个事情成本更低
Sidecar 同样可以进行应用程序扩展，比如说，我们可以将 circuit breaker 实现在 sidecar 中，这样就可以避免代码中使用各种 circuit breaker 的实现，你的代码依旧可以简单的 RestTemplate 去做你想做的事儿，也不用担心下游服务的实效，导致串联失效的问题
Sidecar 的适合场景
如果你们公司已经开始使用微服务架构，践行了小组自治，那么大量的应用程序会用各种流行语言编写，并且使用了各种不同的框架，那么 Sidecar 就是你一定要考虑的。使用 out-of-process 的方式封装共有的一些功能，让应用程序变得简单，而这些共有的功能，最理想的情况下就是部署脚本中的一些配置。

Sidecar 在微服务领域是服务治理的重要工具，也是实现 Service Mesh 的必备工具，在 Service Mesh 的概念下，我们希望提供一层额外的抽象来保证服务的简单、可以相互调用，并且帮助我们轻松的解决服务发现、服务调用、服务监控、服务注册等等功能，这额外的一层可以通过 sidecar 来实现。不论是 Istio 还是 conduit 很多关键功能就是这么实现的。当然，很多情况下我们还是会自己去写适合自己组织架构的 sidecar，之前我们提到的 NGINX 与日志收集器就是一些很好的例子。而之前我们列举出一个 Web Service 可能会需要的功能，也有一部分是根据你的云平台进行裁剪的，比如负载均衡和弹性，完全可以使用 AWS 的 ELB 与 AutoScaling 来解决。

那么什么时候不适用呢？
应用程序过小，或者成本问题：如果没有使用微服务架构或者你的程序就一个 MVC App 就解决了，那就不需要使用 sidecar，毕竟开发成本很高
对性能要求极高：进程间通信还是有成本的，有时也是会有显著的延迟或者被阻塞；docker network 的性能也是赶不上进程间通信的，所以如果你的应用有小于毫秒级别的性能要求的话，这个 sidecar 不适合你
Sidecar 与 DevOps
我在与别人聊 Sidecar 时，很多朋友觉得这个东西的难点不在于创建一个又一个的 sidecar，而是在于如何在部署时，按照应用程序的要求将 sidecar 与应用程序紧紧的组合在一起。这是非常难的，首先每个企业使用的平台并不相同，每个企业的部署方式也不一样，这是没有通用解的问题，只能按照现有情况。在之前我们使用 aws ec2 + docker 时，我们会在 ec2 的 launch config 中去启动不同的 docker image 并且配置其 docker network，但这是一种比较低效的做法，因为只是使用 docker image 来封装你的产出物，而不是使用其作为秒级开启的容器。但是如果在 k8s 上做这件事儿，我们更倾向于在一个容器中把应用的事情做好，很难做到每个应用所运行的容器上都有 attached sidecars。所以这个话题没有好的回答，只能说是 It depends。

Reference
https://docs.microsoft.com/en-us/azure/architecture/patterns/
https://rubygems.org/gems/unicorn/versions/5.1.0
https://www.nginx.com/blog/what-is-a-service-mesh/
https://12factor.net
https://istio.io/
https://github.com/runconduit/conduit
https://martinfowler.com/bliki/CircuitBreaker.html
http://www.baeldung.com/rest-template