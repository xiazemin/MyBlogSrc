---
title: swoole
layout: post
category: linux
author: 夏泽民
---
https://github.com/swoole/swoole-src/
https://toxmc.github.io/swoole-cs.github.io/

PHP的 协程 高性能网络通信引擎，使用C/C++语言编写，提供了多种通信协议的网络服务器和客户端模块。包括：

TCP/UDP/UnixSock 服务器端
Http/WebSocket/Http2.0 服务器端
协程 TCP/UDP/UnixSock 客户端
协程 MySQL 客户端
异步 Redis 客户端
协程 Http/WebSocket 客户端
协程 Http2 客户端
AsyncTask
毫秒定时器
协程文件读写
Swoole4支持完整的协程编程模式，可以使用完全同步的代码实现异步程序。PHP代码无需额外增加任何关键词，底层自动进行协程调度，实现异步IO。

https://wiki.swoole.com/
<!-- more -->
swoole 的进程之间有两种通信方式，一种是消息队列(queue)，另一种是管道(pipe)，对swoole_process 的研究在swoole中显得尤为重要。

预备知识
IO多路复用
swoole 中的io多路复用表现为底层的 epoll进程模型，在C语言中表现为 epoll 函数。

epoll 模型下会持续监听自己名下的素有socket 描述符 fd
当触发了 socket 监听的事件时，epoll 函数才会响应，并返回所有监听该时间的 socket 集合
epoll 的本质是阻塞IO，它的优点在于能同事处理大量socket连接
Event loop 事件循环
swoole 对 epoll 实现了一个Reactor线程模型封装，设置了read事件和write事件的监听回调函数。（详见swoole_event_add）

Event loop 是一个Reactor线程，其中运行了一个epoll实例。
通过swoole_event_add将socket描述符的一个事件添加到epoll监听中，事件发生时将执行回调函数
不可用于fpm环境下，因为fpm在任务结束时可能会关掉进程。
swoole_process

基于C语言封装的进程管理模块，方便php来调用
内置管道、消息队列接口，方便实现进程间通信
我们在php-fpm.conf配置文件中发现，php-fpm中有两种进程池管理设置。

静态模式 即初始化固定的进程数，当来了一个请求时，从中选取一个进程来处理。
动态模式 指定最小、最大进程数，当请求量过大，进程数不超过最大限制时，新增线程去处理请求