---
title: lex
layout: post
category: lang
author: 夏泽民
---
<!-- more -->
ex
Lex 是一种生成扫描器的工具。扫描器是一种识别文本中的词汇模式的程序。 这些词汇模式（或者常规表达式）在一种特殊的句子结构中定义，这个我们一会儿就要讨论。

一种匹配的常规表达式可能会包含相关的动作。这一动作可能还包括返回一个标记。 当 Lex 接收到文件或文本形式的输入时，它试图将文本与常规表达式进行匹配。 它一次读入一个输入字符，直到找到一个匹配的模式。 如果能够找到一个匹配的模式，Lex 就执行相关的动作（可能包括返回一个标记）。 另一方面，如果没有可以匹配的常规表达式，将会停止进一步的处理，Lex 将显示一个错误消息。

Lex 和 C 是强耦合的。一个 .lex 文件（Lex 文件具有 .lex 的扩展名）通过 lex 公用程序来传递，并生成 C 的输出文件。这些文件被编译为词法分析器的可执行版本。

Lex 的常规表达式
常规表达式是一种使用元语言的模式描述。表达式由符号组成。符号一般是字符和数字，但是 Lex 中还有一些具有特殊含义的其他标记。 下面两个表格定义了 Lex 中使用的一些标记并给出了几个典型的例子。

用 Lex 定义常规表达式
字符	含义
A-Z, 0-9, a-z	构成了部分模式的字符和数字。
.	匹配任意字符，除了 \n。
-	用来指定范围。例如：A-Z 指从 A 到 Z 之间的所有字符。
[ ]	一个字符集合。匹配括号内的 任意 字符。如果第一个字符是 ^ 那么它表示否定模式。例如: [abC] 匹配 a, b, 和 C中的任何一个。
*	匹配 0个或者多个上述的模式。
+	匹配 1个或者多个上述模式。
?	匹配 0个或1个上述模式。
$	作为模式的最后一个字符匹配一行的结尾。
{ }	指出一个模式可能出现的次数。 例如: A{1,3} 表示 A 可能出现1次或3次。
\	用来转义元字符。同样用来覆盖字符在此表中定义的特殊意义，只取字符的本意。
^	否定。
|	表达式间的逻辑或。
"<一些符号>"	字符的字面含义。元字符具有。
/	向前匹配。如果在匹配的模版中的“/”后跟有后续表达式，只匹配模版中“/”前 面的部分。如：如果输入 A01，那么在模版 A0/1 中的 A0 是匹配的。
( )	将一系列常规表达式分组。
常规表达式举例
常规表达式	含义
joke[rs]	匹配 jokes 或 joker。
A{1,2}shis+	匹配 AAshis, Ashis, AAshi, Ashi。
(A[b-e])+	匹配在 A 出现位置后跟随的从 b 到 e 的所有字符中的 0 个或 1个。
Lex 中的标记声明类似 C 中的变量名。每个标记都有一个相关的表达式。 （下表中给出了标记和表达式的例子。） 使用这个表中的例子，我们就可以编一个字数统计的程序了。 我们的第一个任务就是说明如何声明标记。

标记声明举例
标记	相关表达式	含义
数字(number)	([0-9])+	1个或多个数字
字符(chars)	[A-Za-z]	任意字符
空格(blank)	" "	一个空格
字(word)	(chars)+	1个或多个 chars
变量(variable)	(字符)+(数字)*(字符)*(数字)*	
Lex 编程
Lex 编程可以分为三步：

以 Lex 可以理解的格式指定模式相关的动作。
在这一文件上运行 Lex，生成扫描器的 C 代码。
编译和链接 C 代码，生成可执行的扫描器。
注意: 如果扫描器是用 Yacc 开发的解析器的一部分，只需要进行第一步和第二步。 关于这一特殊问题的帮助请阅读 Yacc和 将 Lex 和 Yacc 结合起来部分。

现在让我们来看一看 Lex 可以理解的程序格式。一个 Lex 程序分为三个段：第一段是 C 和 Lex 的全局声明，第二段包括模式（C 代码），第三段是补充的 C 函数。 例如, 第三段中一般都有 main() 函数。这些段以%%来分界。 那么，回到字数统计的 Lex 程序，让我们看一下程序不同段的构成。

C 和 Lex 的全局声明
这一段中我们可以增加 C 变量声明。这里我们将为字数统计程序声明一个整型变量，来保存程序统计出来的字数。 我们还将进行 Lex 的标记声明。

字数统计程序的声明
%{
 int wordCount = 0;
 %}
 chars [A-za-z\_\'\.\"]
 numbers ([0-9])+
 delim [" "\n\t]
 whitespace {delim}+
 words {chars}+
 %%
两个百分号标记指出了 Lex 程序中这一段的结束和三段中第二段的开始。

Lex 的模式匹配规则
让我们看一下 Lex 描述我们所要匹配的标记的规则。（我们将使用 C 来定义标记匹配后的动作。） 继续看我们的字数统计程序，下面是标记匹配的规则。

字数统计程序中的 Lex 规则
{words} { wordCount++; /*
 increase the word count by one*/ }
 {whitespace} { /* do
 nothing*/ }
 {numbers} { /* one may
 want to add some processing here*/ }
 %%
C 代码
Lex 编程的第三段，也就是最后一段覆盖了 C 的函数声明（有时是主函数）。注意这一段必须包括 yywrap() 函数。 Lex 有一套可供使用的函数和变量。 其中之一就是 yywrap。 一般来说，yywrap() 的定义如下例。我们将在 高级 Lex 中探讨这一问题。

字数统计程序的 C 代码段
void main()
 {
 yylex(); /* start the
 analysis*/
 printf(" No of words:
 %d\n", wordCount);
 }
 int yywrap()
 {
 return 1;
 }
上一节我们讨论了 Lex 编程的基本元素，它将帮助你编写简单的词法分析程序。 在 高级 Lex 这一节中我们将讨论 Lex 提供的函数，这样你就能编写更加复杂的程序了。

将它们全部结合起来
.lex文件是 Lex 的扫描器。它在 Lex 程序中如下表示：

1
$ lex <file name.lex>
这生成了 lex.yy.c 文件，它可以用 C 编译器来进行编译。它还可以用解析器来生成可执行程序，或者在链接步骤中通过选项 �ll 包含 Lex 库。

这里是一些 Lex 的标志：

-c表示 C 动作，它是缺省的。
-t写入 lex.yy.c 程序来代替标准输出。
-v提供一个两行的统计汇总。
-n不打印 -v 的汇总。
高级 Lex
Lex 有几个函数和变量提供了不同的信息，可以用来编译实现复杂函数的程序。 下表中列出了一些变量和函数，以及它们的使用。 详尽的列表请参考 Lex 或 Flex 手册（见后文的 资源）。

Lex 变量
yyin	FILE* 类型。 它指向 lexer 正在解析的当前文件。
yyout	FILE* 类型。 它指向记录 lexer 输出的位置。 缺省情况下，yyin 和 yyout 都指向标准输入和输出。
yytext	匹配模式的文本存储在这一变量中（char*）。
yyleng	给出匹配模式的长度。
yylineno	提供当前的行数信息。 （lexer不一定支持。）
Lex 函数
yylex()	这一函数开始分析。 它由 Lex 自动生成。
yywrap()	这一函数在文件（或输入）的末尾调用。 如果函数的返回值是1，就停止解析。 因此它可以用来解析多个文件。 代码可以写在第三段，这就能够解析多个文件。 方法是使用 yyin 文件指针（见上表）指向不同的文件，直到所有的文件都被解析。 最后，yywrap() 可以返回 1 来表示解析的结束。
yyless(int n)	这一函数可以用来送回除了前�n? 个字符外的所有读出标记。
yymore()	这一函数告诉 Lexer 将下一个标记附加到当前标记后。
对 Lex 的讨论就到这里。下面我们来讨论 Yacc...

Yacc
Yacc 代表 Yet Another Compiler Compiler。 Yacc 的 GNU 版叫做 Bison。它是一种工具，将任何一种编程语言的所有语法翻译成针对此种语言的 Yacc 语 法解析器。它用巴科斯范式(BNF, Backus Naur Form)来书写。按照惯例，Yacc 文件有 .y 后缀。编译行如下调用 Yacc 编译器：
$ yacc <options>
 <filename ending with .y>
在进一步阐述以前，让我们复习一下什么是语法。在上一节中，我们看到 Lex 从输入序列中识别标记。 如果你在查看标记序列，你可能想在这一序列出现时执行某一动作。 这种情况下有效序列的规范称为语法。Yacc 语法文件包括这一语法规范。 它还包含了序列匹配时你想要做的事。

为了更加说清这一概念，让我们以英语为例。 这一套标记可能是：名词, 动词, 形容词等等。为了使用这些标记造一个语法正确的句子，你的结构必须符合一定的规则。 一个简单的句子可能是名词+动词或者名词+动词+名词。(如 I care. See spot run.)

所以在我们这里，标记本身来自语言（Lex），并且标记序列允许用 Yacc 来指定这些标记(标记序列也叫语法)。

终端和非终端符号
终端符号 : 代表一类在语法结构上等效的标记。 终端符号有三种类型：

命名标记: 这些由 %token 标识符来定义。 按照惯例，它们都是大写。

字符标记 : 字符常量的写法与 C 相同。例如, -- 就是一个字符标记。

字符串标记 : 写法与 C 的字符串常量相同。例如，"<<" 就是一个字符串标记。

lexer 返回命名标记。

非终端符号 : 是一组非终端符号和终端符号组成的符号。 按照惯例，它们都是小写。 在例子中，file 是一个非终端标记而 NAME 是一个终端标记。

用 Yacc 来创建一个编译器包括四个步骤：

通过在语法文件上运行 Yacc 生成一个解析器。
说明语法：
编写一个 .y 的语法文件（同时说明 C 在这里要进行的动作）。
编写一个词法分析器来处理输入并将标记传递给解析器。 这可以使用 Lex 来完成。
编写一个函数，通过调用 yyparse() 来开始解析。
编写错误处理例程（如 yyerror()）。
编译 Yacc 生成的代码以及其他相关的源文件。
将目标文件链接到适当的可执行解析器库。
用 Yacc 编写语法
如同 Lex 一样, 一个 Yacc 程序也用双百分号分为三段。 它们是：声明、语法规则和 C 代码。 我们将解析一个格式为 姓名 = 年龄 的文件作为例子，来说明语法规则。 我们假设文件有多个姓名和年龄，它们以空格分隔。 在看 Yacc 程序的每一段时，我们将为我们的例子编写一个语法文件。

C 与 Yacc 的声明
C 声明可能会定义动作中使用的类型和变量，以及宏。 还可以包含头文件。每个 Yacc 声明段声明了终端符号和非终端符号（标记）的名称，还可能描述操作符优先级和针对不同符号的数据类型。 lexer (Lex) 一般返回这些标记。所有这些标记都必须在 Yacc 声明中进行说明。

在文件解析的例子中我们感兴趣的是这些标记：name, equal sign, 和 age。Name 是一个完全由字符组成的值。 Age 是数字。于是声明段就会像这样：

文件解析例子的声明
%
 #typedef char* string; /*
 to specify token types as char* */
 #define YYSTYPE string /*
 a Yacc variable which has the value of returned token */
 %}
 %token NAME EQ AGE
 %%
你可能会觉得 YYSTYPE 有点奇怪。但是类似 Lex, Yacc 也有一套变量和函数可供用户来进行功能扩展。 YYSTYPE 定义了用来将值从 lexer 拷贝到解析器或者 Yacc 的 yylval （另一个 Yacc 变量）的类型。 默认的类型是 int。 由于字符串可以从 lexer 拷贝，类型被重定义为 char*。 关于 Yacc 变量的详细讨论，请参考 Yacc 手册（见 资源）。

Yacc 语法规则
Yacc 语法规则具有以下一般格式：
result: components { /*
 action to be taken in C */ }
 ;
在这个例子中，result 是规则描述的非终端符号。Components 是根据规则放在一起的不同的终端和非终端符号。 如果匹配特定序列的话 Components 后面可以跟随要执行的动作。 考虑如下的例子：
param : NAME EQ NAME {
 printf("\tName:%s\tValue(name):%s\n", $1,$3);}
     | NAME EQ VALUE{
     printf("\tName:%s\tValue(value):%s\n",$1,$3);}
 ;
如果上例中序列 NAME EQ NAME 被匹配，将执行相应的 { } 括号中的动作。 这里另一个有用的就是 $1 和 $3 的使用, 它们引用了标记 NAME 和 NAME（或者第二行的 VALUE）的值。 lexer 通过 Yacc 的变量 yylval 返回这些值。标记 NAME 的 Lex 代码是这样的：
char [A-Za-z]
 name {char}+
 %%
 {name} { yylval = strdup(yytext);
 return NAME; }
文件解析例子的规则段是这样的：

文件解析的语法
file : record file
 | record
 ;
 record: NAME EQ AGE {
 printf("%s is now %s years old!!!", $1, $3);}
 ;
 %%
附加 C 代码
现在让我们看一下语法文件的最后一段，附加 C 代码。 （这一段是可选的，如果有人想要略过它的话：）一个函数如 main() 调用 yyparse() 函数（Yacc 中 Lex 的 yylex() 等效函数）。 一般来说，Yacc 最好提供 yyerror(char msg) 函数的代码。 当解析器遇到错误时调用 yyerror(char msg)。错误消息作为参数来传递。 一个简单的 yyerror( char* ) 可能是这样的：
int yyerror(char* msg)
 {
 printf("Error: %s
 encountered at line number:%d\n", msg, yylineno);
 }
yylineno 提供了行数信息。

这一段还包括文件解析例子的主函数：

附加 C 代码
void main()
 {
     yyparse();
 }
 int yyerror(char* msg)
 {
 printf("Error: %s
 encountered \n", msg);
要生成代码，可能用到以下命令：
$ yacc _d <filename.y>
这生成了输出文件 y.tab.h 和 y.tab.c，它们可以用 UNIX 上的任何标准 C 编译器来编译（如 gcc）。

命令行的其他常用选项
'-d' ,'--defines' : 编写额外的输出文件，它们包含这些宏定义：语法中定义的标记类型名称，语义的取值类型 YYSTYPE, 以及一些外部变量声明。如果解析器输出文件名叫 'name.c', 那么 '-d' 文件就叫做 'name.h'。 如果你想将 yylex 定义放到独立的源文件中，你需要 'name.h', 因为 yylex 必须能够引用标记类型代码和 yylval变量。
'-b file-prefix' ,'--file-prefix=prefix' : 指定一个所有Yacc输出文件名都可以使用的前缀。选择一个名字，就如输入文件名叫 'prefix.c'.
'-o outfile' ,'--output-file=outfile' : 指定解析器文件的输出文件名。其他输出文件根据 '-d' 选项描述的输出文件来命名。
Yacc 库通常在编译步骤中自动被包括。但是它也能被显式的包括，以便在编译步骤中指定 �ly选项。这种情况下的编译命令行是：
$ cc <source file
 names> -ly
将 Lex 与 Yacc 结合起来
到目前为止我们已经分别讨论了 Lex 和 Yacc。现在让我们来看一下他们是怎样结合使用的。

一个程序通常在每次返回一个标记时都要调用 yylex() 函数。只有在文件结束或者出现错误标记时才会终止。

一个由 Yacc 生成的解析器调用 yylex() 函数来获得标记。 yylex() 可以由 Lex 来生成或完全由自己来编写。 对于由 Lex 生成的 lexer 来说，要和 Yacc 结合使用，每当 Lex 中匹配一个模式时都必须返回一个标记。 因此 Lex 中匹配模式时的动作一般格式为：
{pattern} { /* do smthg*/
 return TOKEN_NAME; }
于是 Yacc 就会获得返回的标记。当 Yacc 编译一个带有 _d 标记的 .y文件时，会生成一个头文件，它对每个标记都有 #define 的定义。 如果 Lex 和 Yacc 一起使用的话，头文件必须在相应的 Lex 文件 .lex中的 C 声明段中包括。

让我们回到名字和年龄的文件解析例子中，看一看 Lex 和 Yacc 文件的代码。

Name.y - 语法文件
%
 typedef char* string;
 #define YYSTYPE string
 %}
 %token NAME EQ AGE
 %%
 file : record file
 | record
 ;
 record : NAME EQ AGE {
 printf("%s is %s years old!!!\n", $1, $3); }
 ;
 %%
 int main()
 {
 yyparse();
 return 0;
 }
 int yyerror(char *msg)
 {
 printf("Error
 encountered: %s \n", msg);
 }
Name.lex - Lex 的解析器文件
%{
 #include "y.tab.h"
  
 #include <stdio.h>
 #include <string.h>
 extern char* yylval;
 %}
 char [A-Za-z]
 num [0-9]
 eq [=]
 name {char}+
 age {num}+
 %%
 {name} { yylval = strdup(yytext);
 return NAME; }
 {eq} { return EQ; }
 {age} { yylval = strdup(yytext);
 return AGE; }
 %%
 int yywrap()
 {
 return 1;
 }
作为一个参考，我们列出了 y.tab.h, Yacc 生成的头文件。

y.tab.h - Yacc 生成的头文件
# define NAME 257
 # define EQ 258
 # define AGE 259
 
 
 
 无论是词法分析，还是语法分析，给我的第一感觉就是逻辑要严谨。由于项目有自己一套完整的语言和语法，设计好其对应的词法分析器和语法分析器显得尤为重要。
        我们采用flex进行词法分析。flex是一个用来生成扫描器（scanners）的工具，其中扫描器就是可以识别文本中词法模式的程序。具体流程为：flex读取给定的输入文件，或标准输入（当没有给定文件名时）读取信息来生成一个扫描器。信息以正则表达式和C代码组成，这种形式称为规则（rule）。flex生成C源代码文件lex.yy.c，其中定义了一个函数yylex()。这个文件通过编译，并用-lfl 链接生成可执行文件。当可执行文件被执行时，它分析输入中可能存在的符合正则表达的内容。当找到任何一个与正则表达式相匹配内容时，相应的C 代码将被执行。

        flex输入文件由三段组成：定义（definitions），规则（rules），用户代码（user code）

一、定义段（definitions）

        定义段包含了简单名称的声明（这些声明可以简化扫描器的说明）和开始条件。在本项目中，定义段中还包含了选项options。现将介绍一些比较常用的options。

        flex 提供一个机制用来在扫描器的说明中，而不是在flex 命令中控制选项。在扫描器的说明文件（flex 的输入文件）的第一段中使用%option 指令就可以实现。你可以用单个%option 指令指定多个选项，也可以使用多个%option指令。

        %option 7bit，%option 8bit——指示flex生成一个7bit或8bit的扫描器与-7，-8 选项等价。

        %option backup——生成一个备份信息到lex.backup，与-b选项等价。

        %option caseful，%option case-sensitive——区分大小写，与-i相反。

        %option case-insensitive，%option caseless——忽略大小写，与-i选项等价。

        %option debug——让生成的扫描器运行在debug模式，与-d选项等价。

        %option default，%option nodefault——%default与-s选项相反，后者与其等价。-s选项作用：使不匹配的输入回显到输出设备的rule失去作用。在此种情况下，如果扫描器不能匹配到任何规则rule的输入，它会终止并返回错误。在查找扫描器的规则漏洞时，-s和%option nodefault都非常有用。

        %option interactive——指示flex生成一个交互式的扫描器。交互式扫描器就是向前查看下一个匹配的token是什么。结果就是总向前多看了一个字符，即使是在扫描器已经看够了文本已经排除了token 的歧义。但向前查看给了扫描器强大的交互能力。与-I等价。

        %option warn——与-w选项相反。%option nowarn与-w选项等价。

        %option array——与%array等价。

        %option pointer——与%point等价。

        以下为%option中定义，但在命令行里没有的特性。

        %option always-interactive——指示flex 生成的扫描器总是把它的输入认为是"interactive"。

        %option main——指示flex 为扫描器提供一个缺省的main()函数，它只是简单的调用了yylex()。这个选项暗示noyywrap。

        %option never-interactive——flex 生成的扫描器从不认为输入是交互的（不会调用isatty()）。这和总是interactive 正好相反。

        %option yylineno——flex 生成的扫描器用全局变量yylineno 维护着输入文件的当前行编号。option lex-compat隐含有这个选项。

        %option yywrap——如果没有设置（就如%option noyywrap），当扫描器遇到end-of-file 时，不会调用yywrap()，但简单的假定没有更多的文件可以扫描（直到用户把yyin 指向新的文件并再一次调用yylex（））。

        flex 通过扫描rule 中的action 来判断你是否使用了REJECT 或是yymore 属性。你可用%option reject 表示要使用这个特性而用%option noyymore 表示不使用这个特性。

        三个选项使用了字符串值，从'='开始：%option outfile="ABC"等同于-oABC ；%option prefix="XYZ" 等同于-PXYZ；最后，%option yyclass="foo" 只有当生成C++扫描器（-+选项）时才有效。

       有些选项可以限制一个例程不出现在生成的扫描器中。下面这些例程如果不被设置（如%option nounput）将不会出现在生成的扫描器中。

       input unput yy_push_state yy_pop_sate yy_top_state yy_scan_buffer yy_scan_bytes yy_scan_string

       可重入c扫描器（Reentrant C Scanners）

       flex能够生成一个可重入的扫描器。通过定义%option reentrant（与-R选项等价）来实现可重入。所生成的扫描器在一个或多个控制线程中不仅可移植，而且安全性好。可重入扫描器通常应用于多线程应用程序。任何一个线程都可以在不考虑与其他线程同步的情况下创建并执行一个可重入的flex扫描器。

       默认情况下，flex生成一个不可重入的扫描器。本项目为了实现多线程，因而在定义段指定%option reentrant。

       性能考虑（performance consideration）

       flex的设计目标就是生成一个高性能的扫描器。它已经对处理大量rule 做了优化。除了用-C 选项进行表格压缩之外，还有一些option/action 会影响到扫描器的速度。从最大影响到最弱，有这一些：

       REJECT          %option yylineno           arbitrary trailing context

       pattern sets that require backing up        %array          %option interactive             %option always-interactive

       '^'beginning-of-line operator      yymore()

       头三个的开销最大，后两个的开销最小。注意unput()有可能被用例程实现而造成更多操作，而yyless()是一个开销相当低的宏；所以如果只是回放一些你多扫了的文本，可以用yyless()。

       本项目中也用到了名字定义和开始条件。其中名字定义包括数字、字符、空白符，多行注释，单行注释，引号间的字符串，整数、浮点数、实数，标示符，变量，日期。

       数字—digit [0-9]，字符—character [a-zA-Z]，空白符—space [ \t\r](在制表符前面留有空格表示空格符)

       多行注释（以/#开头，中间可以为任意非#非\n字符，也可以为一串#后面紧跟非/非\n字符，最后结尾为1个或多个#后跟/）

       comstart   \/\#

       comstop \#+\/

       cominside ([^#\n]*|#+[^#/\n])

       单行注释 line_comment  ^#[^\n]*

       引号间的字符串（以双引号开头以双引号结尾。内容为非转义字符和双引号，当遇到转义字符时，进行特殊处理；当遇到双引号时，停止匹配）

       dquotes \"

       stringstart {dquotes}

       stringstop {dquotes}

       stringinside [^\\\"]+

       注意：在多行注释和引号间的字符串的匹配中，采用了排斥条件（开始条件分为排斥和共享条件）

       排斥条件的定义为 %xc（针对多行注释）

                                         %xs（针对引号间的字符串）

       整数 integer {digit}+

       浮点数 decimal (({digit}+\.{digit}*)|({digit}*\.{digit}+))

                     decimalfail {digit}+\.\.

       实数 real ({integer}|{decimal})[eE][+-]?{digit}+

                 realfail1 ({integer}|decimal)[eE]

                 realfail2 ({integer}|decimal)[eE][+-]

       标示符 identstart [a-zA-Z\200-\377_]

       identcont [a-zA-Z\200-\377_0-9\$]

       identifier {identstart}{identcont}*

       变量（$后跟一个或多个字符） variable \${character}+

       日期 date {digit}+\-{digit}+(\-{digit}+)?

                 datefail1 {digit}+\-{digit}+\-

                 datefail2 {digit}+\- 

二、规则段（rules）

       规则段包含模式（pattern）和动作（action），其中模式不能有缩进，而且动作必须在同一行上跟在动作后面。

       在规则段可以使用开始条件（start conditions）。flex 提供了一种按条件激活规则rule 的机制。所有模式以"<sc>"为前缀的rule 只有在扫描器是在一个名为"sc"的启动条件时才会被激活。使用BEGIN action 可以激活一个开始条件。直到下一个BEGIN action 被执行，在给出开始条件的rule将被激活并且其他给出其他开始条件的rule 并不会被激活。如果使用的是排他的开始条件，那么只有以开始条件修饰的rule 才会被激活。跟在同一个排他开始条件后的rule 说明在扫描器中，这些rule 是独立于flex 输入中的其他rule。

        本项目中涉及到排斥条件的有多行注释、引号间的字符串。

        其中MOVELOC,SAVETOKEN为定义段中定义的宏

        #define MOVELOC  {yylloc->first_column = yylloc->last_column;\

                                             yylloc->last_column = yylloc->first_column + yyleng;}

        #define RESETLOC {yylloc->first_column = yylloc->last_column = 1;\

                                            yylloc->first_line++;\

                                            yylloc->last_line++;}

       #define SAVETOKEN yylval->str = new std::string(yytext, yyleng)

        多行注释(语句输出省略)

        {comstart}       {         MOVELOC;

                                            BEGIN(xc);

                                  }

        <xc>{cominside} {     MOVELOC;      }

        <xc>\n              {         RESETLOC;     }

        <xc>{comstop} {       MOVELOC;

                                            BEGIN(INITIAL);

                                  }

        <xc><<EOF>> {       BEGIN(INITIAL);

                                           std::cerr << "unterminated /# comment" << endl;

                                           yyterminate();

                                   }

       引号间的字符串(输出语句省略)

       {stringstart}         {   MOVELOC;

                                         BEGIN(xs);

                                         SAVETOKEN;

                                  }

       <xs>{stringstop} {  MOVELOC;

                                         BEGIN(INITIAL);

                                         *(yylval->str) += yytext;

                                         return QUOTES_STRING;

                                  }

       <xs>\n               {       RESETLOC;

                                          *(yylval->str) += yytext;

                                  }

       <xs>\\n               {     MOVELOC;

                                          *(yylval->str) += "\n";

                                  }

        <xs>\\t               {      MOVELOC;

                                          *(yylval->str) += "\t";

                                  }

        <xs>\\r               {      MOVLOC;

                                          *(yylval->str) += "\r";

                                  }

        <xs>\\b             {      MOVELOC;

                                          *(yylval->str) += "\b";

                                  }

        <xs>\\f               {      MOVELOC;

                                          *(yylval->str) += "\f";

                                  }

         <xs>\\.             {       MOVELOC;

                                          *(yylval->str) += yytext[1];

                                  }

        <xs>\\\n             {     RESETLOC;

                                          *(yylval->str) += "\n";

                                  }

       <xs>{stringinside} {        MOVELOC;

                                        *(yylval->str) += yytext;

                                  }

       <xs><<EOF>> {     BEGIN(INITIAL);

                                        std::cerr << "unterminated \"" << endl;

                                         delete yylval->str;

                                        yyterminate();

                                 }

三、用户代码段

      用户代码段只会简单的拷贝到lex.yy.c中。这个和扫描器一起，调用扫描器或者被扫描器调用。如果被省略，则第二个%%可以省略。

      使用了%option reentrant后

      1所有的函数都会带一个额外的参数yyscanner。

      2所有的全局变量都被它们的宏等价替换。

      这些变量包括yytext,yyleng, yylineno, yyin, yyout,yyextra, yylval, and yylloc，你可以在action部分安全地使用这些宏（如同使用普通变量一样），但不能够在外部直接使用。以yytext为例，在一个可重入的扫描器中，yytext以及其他类似变量都不是全局变量，因而不能通过action外部或是其他函数来直接访问yytext，而应该使用yyget_text访问器函数来实现对yytext的访问。

      3在使用yylex之前调用yylex_init，在使用之后调用yylex_destroy。

      init以及destroy函数

      int yylex_init ( yyscan_t * ptr_yy_globals ) ;

      int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t * ptr_yy_globals ) ;

      int yylex ( yyscan_t yyscanner ) ;

      int yylex_destroy ( yyscan_t yyscanner ) ;

      函数yylex_init必须在调用任意其他函数之前调用，其参数是一个未初始化的指针地址，并由该函数初始化，这样会覆盖以前的内容。ptr_yy_global中存储的值会传递给yylex和yylex_destroy。flex不会保存传递给yylex_init的变量，因而传递一个局部指针的地址值给yylex_init是很安全的，只要其在调用扫描器到调用yylex_destroy期间一直存在就行。

      yylex的可重入版本带一个参数，该参数即为yylex_init通过变量返回的值。

      yylex_destroy函数用来释放扫描器使用过的资源。当要重复使用时，就不必destroy。

      4获取函数（get或set）提供了访问普通flex变量的途径。

      5用户自定义数据可以再yyextra中存储。

      在一个可重入的扫描器中，使用全局变量让程序的不同部分通信或是保持状态是不明智的。然而，你需要在action中使用额外的数据或是调用额外的函数。同样，你需要传递信息给你的扫描器。在一个不可重入的扫描器中，实现这的唯一方式就是使用全局变量。flex允许你存储任意的、额外的数据到扫描器中。定义如下：

      #define YY_EXTRA_TYPE void*

      YY_EXTRA_TYPE yyget_extra ( yyscan_t scanner );

      void yyset_extra ( YY_EXTRA_TYPE arbitrary_data , yyscan_t scanner);

      项目中最后的代码如下，其中scanner_init初始化yylex，yy_scan_buffer函数（作用是建立输入缓存）从yyext->scanbuf指定的开始位置扫描slen+2个字节，最后两个字节必须是YY_END_OF_BUFFER_CHAR。

[html] view plain copy
yyscan_t  
scanner_init(const char *str, inl_yylex_extra *yyext)  
{  
         int             slen = strlen(str);  
         yyscan_t        scanner;  
   
         if(yylex_init(&scanner) != 0)  
         {  
                 std::cerr << "yylex_init() failed" << std::endl;  
                 exit(1);  
         }  
   
         inl_yyset_extra(yyext, scanner);  
   
         yyext->scanbuf = (char *)malloc(slen + 2);  
         yyext->scanbuflen = slen;  
   
         memcpy(yyext->scanbuf, str, slen);  
         yyext->scanbuf[slen] = yyext->scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;  
         yy_scan_buffer(yyext->scanbuf, slen + 2, scanner);  
   
         return scanner;  
}  
   
void scanner_finish(yyscan_t yyscanner)  
{  
         free((*((inl_yylex_extra**)(yyscanner)))->scanbuf);  
         inl_yylex_destroy(yyscanner);  
}  