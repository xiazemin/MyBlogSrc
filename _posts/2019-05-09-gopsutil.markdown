---
title: gopsutil
layout: post
category: golang
author: 夏泽民
---
发现 python 上收集系统信息的著名模块 psutil (https://github.com/giampaolo/psutil)已经有 go 的版本(https://github.com/shirou/gopsutil)
获取进程信息、网络信息、磁盘信息、内存信息、CPU信息
它主要用来做系统监控，性能分析，进程管理。它实现了同等命令行工具提供的功能，如ps、top、lsof、netstat、ifconfig、who、df、kill、free、nice、ionice、iostat、iotop、uptime、pidof、tty、taskset、pmap等。目前支持32位和64位的Linux、Windows、OS X、FreeBSD和Sun Solaris等操作系统.
<!-- more -->
go get github.com/shirou/gopsutil

 cannot find package "golang.org/x/sys/unix" in any of:
	/usr/local/go/src/golang.org/x/sys/unix (from $GOROOT)
	
使用镜像
可以通过配置将墙了的版本库 URL 映射到没被墙的 URL，甚至也可以映射到本地版本库
glide mirror set golang.org/x/crypto github.com/golang/crypto
glide mirror set golang.org/x/sys github.com/golang/sys

或者
go get github.com/golang/sys
cp -r src/github.com/golang/sys src/golang.org/x/

用Python来编写脚本简化日常的运维工作是Python的一个重要用途。在Linux下，有许多系统命令可以让我们时刻监控系统运行的状态，如ps，top，free等等。要获取这些系统信息，Python可以通过subprocess模块调用并获取结果。但这样做显得很麻烦，尤其是要写很多解析代码。

在Python中获取系统信息的另一个好办法是使用psutil这个第三方模块。顾名思义，psutil = process and system utilities，它不仅可以通过一两行代码实现系统监控，还可以跨平台使用，支持Linux／UNIX／OSX／Windows等，是系统管理员和运维小伙伴不可或缺的必备模块。

安装psutil
如果安装了Anaconda，psutil就已经可用了。否则，需要在命令行下通过pip安装：

$ pip install psutil



package main

import (
	"fmt"
	"time"

	"github.com/shirou/gopsutil/cpu"
	"github.com/shirou/gopsutil/disk"
	"github.com/shirou/gopsutil/host"
	"github.com/shirou/gopsutil/mem"
	"github.com/shirou/gopsutil/net"
)

func main() {
	collet()
}

func collet() {
	v, _ := mem.VirtualMemory()
	c, _ := cpu.Info()
	cc, _ := cpu.Percent(time.Second, false)
	d, _ := disk.Usage("/")
	n, _ := host.Info()
	nv, _ := net.IOCounters(true)
	boottime, _ := host.BootTime()
	btime := time.Unix(int64(boottime), 0).Format("2006-01-02 15:04:05")

	fmt.Printf("        Mem       : %v MB  Free: %v MB Used:%v Usage:%f%%\n", v.Total/1024/1024, v.Available/1024/1024, v.Used/1024/1024, v.UsedPercent)
	if len(c) > 1 {
		for _, sub_cpu := range c {
			modelname := sub_cpu.ModelName
			cores := sub_cpu.Cores
			fmt.Printf("        CPU       : %v   %v cores \n", modelname, cores)
		}
	} else {
		sub_cpu := c[0]
		modelname := sub_cpu.ModelName
		cores := sub_cpu.Cores
		fmt.Printf("        CPU       : %v   %v cores \n", modelname, cores)

	}
	fmt.Printf("        Network: %v bytes / %v bytes\n", nv[0].BytesRecv, nv[0].BytesSent)
	fmt.Printf("        SystemBoot:%v\n", btime)
	fmt.Printf("        CPU Used    : used %f%% \n", cc[0])
	fmt.Printf("        HD        : %v GB  Free: %v GB Usage:%f%%\n", d.Total/1024/1024/1024, d.Free/1024/1024/1024, d.UsedPercent)
	fmt.Printf("        OS        : %v(%v)   %v  \n", n.Platform, n.PlatformFamily, n.PlatformVersion)
	fmt.Printf("        Hostname  : %v  \n", n.Hostname)
}


Mem       : 8192 MB  Free: 1876 MB Used:6315 Usage:77.099562%
        CPU       : Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz   2 cores 
        Network: 25901166392 bytes / 25901166392 bytes
        SystemBoot:2019-03-30 08:28:55
        CPU Used    : used 48.756219% 
        HD        : 232 GB  Free: 35 GB Usage:84.664966%
        OS        : darwin()   10.11.1  
        Hostname  : didideAir-42  
