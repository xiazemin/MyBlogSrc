---
title: object 传引用
layout: post
category: php
author: 夏泽民
---
PHP 的引用是别名，就是两个不同的变量名字指向相同的内容。在 PHP 5，一个对象变量已经不再保存整个对象的值。只是保存一个标识符来访问真正的对象内容。 当对象作为参数传递，作为结果返回，或者赋值给另外一个变量，另外一个变量跟原来的不是引用的关系，只是他们都保存着同一个标识符的拷贝，这个标识符指向同一个对象的真正内容。

https://www.php.net/manual/zh/language.oop5.references.php

对象在函数中是引用传递
即使赋值给其它变量，也是引用
但是改变了$a的类型，准确的说是zval.value指针都变化了，所以此时产生了分裂。
所以：

尽量避免函数内操作外部对象，否则有可能造成致命性的逻辑错误，特别是改变对象数据的时候。
或者在做对象数据传递的时候要注意数据的严谨性。

除了加上 clone 关键字，否则都是传引用。
<!-- more -->

https://segmentfault.com/a/1190000002928594

1.首先，什么是按值传递和按引用传递？

按值传递就是仅仅把值传递过去，相当于传递的是值的拷贝，而按引用传递传递的是内存的地址。

在 PHP5 中，如果按引用传递，就是将 zval 的地址赋给另一个变量，这时，两个变量都同时指向一个 zval 。而按值传递则是复制一个 zval，两个变量指向两个不同的 zval 。（为了简化，这里忽略 copy on write）



按引用传递的特点：

$a = 2;
 
$b = &$a; //按引用传递
 
$a = 1;
 
echo $b; //1
 
$b = 3;
 
echo $a; //3
 


2.现证明PHP中对象不是按引用传递：

class Test{
 
    public $a ;
 
}
 
$test1 = new Test();
 
$test2 = $test1;  
 
 
$test1 = null;
 
var_dump($test1);   // null
 
var_dump($test2);   //object  如果是按引用传递，那么$test2也应该为空！


3.但是，传递对象的时候，也出现了引用传递的特点：



class Test{
 
    public $a ;
 
}
 
$test1 = new Test();
 
$test1->a = '1';
 
$test2 = $test1;  
 
$test2->a = '2';
 
echo $test1->a;  //2
 
$test1->a = '3';
 
echo $test2->a;  //3
 


出现这种情况的原因，是因为在 PHP5 中，真正保存对象的结构是 zend_object，一个变量（zval）里实际保存的是指向该结构体的指针。传递这个变量时，就是拷贝该指针的副本，而这个指针指向存储堆区的对象。



其实，PHP 中所有的传递默认都是按值传递的，这点与 C、JavaScript 等语言相同。要想按引用传递，则必须使用 & 。

先说一下深拷贝和浅拷贝通俗理解

深拷贝：赋值时值完全复制，完全的copy，对其中一个作出改变，不会影响另一个

浅拷贝：赋值时，引用赋值，相当于取了一个别名。对其中一个修改，会影响另一个

PHP中， = 赋值时，普通对象是深拷贝，但对对象来说，是浅拷贝。也就是说，对象的赋值是引用赋值。（对象作为参数传递时，也是引用传递，无论函数定义时参数前面是否有&符号）

 

php4中，对象的 = 赋值是实现一份副本，这样存在很多问题，在不知不觉中我们可能会拷贝很多份副本。

php5中，对象的 = 赋值和传递都是引用。要想实现拷贝副本，php提供了clone函数实现。

clone完全copy了一份副本。但是clone时，我们可能不希望copy源对象的所有内容，那我们可以利用__clone来操作。

在__clone（）中，我们可以进行一些操作。注意，这些操作，也就是__clone函数是作用于拷贝的副本对象上的

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
<?php
//普通对象赋值，深拷贝，完全值复制
$m = 1;
$n = $m;
$n = 2;
echo $m;//值复制，对新对象的改变不会对m作出改变，输出 1.深拷贝
echo PHP_EOL;
/*==================*/
 
//对象赋值，浅拷贝，引用赋值
class Test{
    public $a=1;
}
$m = new Test();
$n = $m;//引用赋值
$m->a = 2;//修改m，n也随之改变
echo $n->a;//输出2，浅拷贝
echo PHP_EOL;
?>
　　由于对象的赋值时引用，要想实现值复制，php提供了clone函数来实现复制对象。

但是clone函数存在这么一个问题，克隆对象时，原对象的普通属性能值复制，但是源对象的对象属性赋值时还是引用赋值，浅拷贝。

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
<?php
class Test{
    public $a=1;
}
 
class TestOne{
    public $b=1;
    public $obj;
    //包含了一个对象属性，clone时，它会是浅拷贝
    public function __construct(){
        $this->obj = new Test();
    }
}
$m = new TestOne();
$n = $m;//这是完全的浅拷贝，无论普通属性还是对象属性
 
$p = clone $m;
 
//普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响
$p->b = 2;
echo $m->b;//输出原来的1
echo PHP_EOL;
 
//对象属性是浅拷贝，改变对象属性中的a，源对象m中的对象属性中a也改变
 
$p->obj->a = 3;
echo $m->obj->a;//输出3，随新对象改变
?>
　　要想实现对象真正的深拷贝，有下面两种方法：

写clone函数：如下

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
<?php
class Test{
    public $a=1;
}
 
class TestOne{
    public $b=1;
    public $obj;
    //包含了一个对象属性，clone时，它会是浅拷贝
    public function __construct(){
        $this->obj = new Test();
    }
     
    //方法一：重写clone函数
    public function __clone(){
        $this->obj = clone $this->obj;
    }
}
 
$m = new TestOne();
$n = clone $m;
 
$n->b = 2;
echo $m->b;//输出原来的1
echo PHP_EOL;
//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响
 
//由于改写了clone函数，现在对象属性也实现了真正的深拷贝，对新对象的改变，不会影响源对象
$n->obj->a = 3;
echo $m->obj->a;//输出1，不随新对象改变，还是保持了原来的属性
 
?>
　　改写__clone()函数不太方便，而且你得在每个类中把这个类里面的对象属性都在__clone()中 一一 clone

第二种方法，利用序列化反序列化实现,这种方法实现对象的深拷贝简单，不需要修改类

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
<?php
class Test{
    public $a=1;
}
 
class TestOne{
    public $b=1;
    public $obj;
    //包含了一个对象属性，clone时，它会是浅拷贝
    public function __construct(){
        $this->obj = new Test();
    }
     
}
 
$m = new TestOne();
//方法二，序列化反序列化实现对象深拷贝
$n = serialize($m);
$n = unserialize($n);
 
$n->b = 2;
echo $m->b;//输出原来的1
echo PHP_EOL;
//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响
 
 
$n->obj->a = 3;
echo $m->obj->a;//输出1，不随新对象改变，还是保持了原来的属性,可以看到，序列化和反序列化可以实现对象的深拷贝
 
?>
　还有第三种方法，其实和第二种类似，json_encode之后再json_decode,实现赋值
　
　https://www.cnblogs.com/taijun/p/4208008.html
