---
title: Go 泛型使用和实现原理
layout: post
category: golang
author: 夏泽民
---
性能
要了解泛型的性能及其在 Go 中的实现，首先需要了解一般情况下实现泛型的两种最常见方式。

这是对各种性能的深入研究和围绕它们进行的讨论的简要介绍。你大概率不太需要关心 Go 中泛型的性能。
虚拟方法表
在编译器中实现泛型的一种方法是使用 Virtual Method Table。泛型函数被修改成只接受指针作为参数的方式。然后，这些值被分配到堆上，这些值的指针被传递给泛型函数。这样做是因为指针看起来总是一样的，不管它指向的是什么类型。

如果这些值是对象，而泛型函数需要调用这些对象的方法，它就不能再这样做了。该函数只有一个指向对象的指针，不知道它们的方法在哪里。因此，它需要一个可以查询方法的内存地址的表格：Virtual Method Table。这种所谓的动态调度已经被 Go 和 Java 等语言中的接口所使用。

Virtual Method Table 不仅可以用来实现泛型，还可以用来实现其他类型的多态性。然而，推导这些指针和调用虚拟函数要比直接调用函数慢，而且使用 Virtual Method Table 会阻止编译器进行优化。

单态化
一个更简单的方法是单态化（Monomorphization），编译器为每个被调用的数据类型生成一个泛型函数的副本。

func max[T Numeric](a, b T) T {
    // ...
}

larger := max(3, 5)
由于上面显示的max函数是用两个整数调用的，编译器在对代码进行单态化时将为 int 生成一个 max 的副本。

func maxInt(a, b int) int {
    // ...
}

larger := maxInt(3, 5)
最大的优势是，Monomorphization 带来的运行时性能明显好于使用 Virtual Method Table。直接方法调用不仅更有效率，而且还能适用整个编译器的优化链。不过，这样做的代价是编译时长，为所有相关类型生成泛型函数的副本是非常耗时的。

Go 的实现
这两种方法中哪一种最适合 Go？快速编译很重要，但运行时性能也很重要。为了满足这些要求，Go 团队决定在实现泛型时混合两种方法。

Go 使用 Monomorphization，但试图减少需要生成的函数副本的数量。它不是为每个类型创建一个副本，而是为内存中的每个布局生成一个副本：int、float64、Node 和其他所谓的 "值类型" 在内存中看起来都不一样，因此泛型函数将为所有这些类型复制副本。

与值类型相反，指针和接口在内存中总是有相同的布局。编译器将为指针和接口的调用生成一个泛型函数的副本。就像 Virtual Method Table 一样，泛型函数接收指针，因此需要一个表来动态地查找方法地址。在 Go 实现中的字典与虚拟方法表的性能特点相同。

结论
这种混合方法的好处是，你在使用值类型的调用中获得了 Monomorphization 的性能优势，而只在使用指针或接口的调用中付出了 Virtual Method Table 的成本。

在性能讨论中经常被忽略的是，所有这些好处和成本只涉及到函数的调用。通常情况下，大部分的执行时间是在函数内部使用的。调用方法的性能开销可能不会成为性能瓶颈，即使是这样，也要考虑先优化函数实现，再考虑调用开销。
<!-- more -->
https://zhuanlan.zhihu.com/p/509290914