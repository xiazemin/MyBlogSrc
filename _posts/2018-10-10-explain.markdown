---
title: explain mysql  执行计划
layout: post
category: storage
author: 夏泽民
---
explain显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。

使用方法，在select语句前加上explain就可以了：

如：

explain select surname,first_name form a,b where a.id=b.id 
1、EXPLAIN tbl_name

EXPLAIN tbl_name是DESCRIBE tbl_name或SHOW COLUMNS FROM tbl_name的一个同义词。

2、EXPLAIN [EXTENDED] SELECT select_options

如果在SELECT语句前放上关键词EXPLAIN，MySQL将解释它如何处理SELECT，提供有关表如何联接和联接的次序。

借助于EXPLAIN，可以知道什么时候必须为表加入索引以得到一个使用索引来寻找记录的更快的SELECT。

还可以知道优化器是否以一个最佳次序联接表。为了强制优化器让一个SELECT语句按照表命名顺序的联接次序，语句应以STRAIGHT_JOIN而不只是SELECT开头。

EXPLAIN为用于SELECT语句中的每个表返回一行信息。表以它们在处理查询过程中将被MySQL读入的顺序被列出。MySQL用一遍扫描多次联接(single-sweep multi-join)的方式解决所有联接。这意味着MySQL从第一个表中读一行，然后找到在第二个表中的一个匹配行，然后在第3个表中等等。当所有的表处理完后，它输出选中的列并且返回表清单直到找到一个有更多的匹配行的表。从该表读入下一行并继续处理下一个表。

当使用EXTENDED关键字时，EXPLAIN产生附加信息，可以用SHOW WARNINGS浏览。该信息显示优化器限定SELECT语句中的表和列名，重写并且执行优化规则后SELECT语句是什么样子，并且还可能包括优化过程的其它注解。

EXPLAIN的每个输出行提供一个表的相关信息，并且每个行包括下面的列：

id：SELECT识别符。这是SELECT的查询序列号。

select_type：SELECT类型。

SIMPLE： 简单SELECT(不使用UNION或子查询)
PRIMARY： 最外面的SELECT
UNION：UNION中的第二个或后面的SELECT语句
DEPENDENT UNION：UNION中的第二个或后面的SELECT语句，取决于外面的查询
UNION RESULT：UNION的结果
SUBQUERY：子查询中的第一个SELECT
DEPENDENT SUBQUERY：子查询中的第一个SELECT，取决于外面的查询
DERIVED：导出表的SELECT(FROM子句的子查询)
table：表名

type：联接类型

system：表仅有一行(=系统表)。这是const联接类型的一个特例。
const：表最多有一个匹配行，它将在查询开始时被读取。因为仅有一行，在这行的列值可被优化器剩余部分认为是常数。const用于用常数值比较PRIMARY KEY或UNIQUE索引的所有部分时。
eq_ref：对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型。它用在一个索引的所有部分被联接使用并且索引是UNIQUE或PRIMARY KEY。eq_ref可以用于使用= 操作符比较的带索引的列。比较值可以为常量或一个使用在该表前面所读取的表的列的表达式。
ref：对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取。如果联接只使用键的最左边的前缀，或如果键不是UNIQUE或PRIMARY KEY(换句话说，如果联接不能基于关键字选择单个行的话)，则使用ref。如果使用的键仅仅匹配少量行，该联接类型是不错的。ref可以用于使用=或<=>操作符的带索引的列。
ref_or_null：该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用该联接类型的优化。
index_merge：该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，key_len包含了使用的索引的最长的关键元素。
unique_subquery：该类型替换了下面形式的IN子查询的ref：value IN (SELECT primary_key FROMsingle_table WHERE some_expr);unique_subquery是一个索引查找函数，可以完全替换子查询，效率更高。
index_subquery：该联接类型类似于unique_subquery。可以替换IN子查询，但只适合下列形式的子查询中的非唯一索引：value IN (SELECT key_column FROM single_table WHERE some_expr)
range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。key_len包含所使用索引的最长关键元素。在该类型中ref列为NULL。当使用=、<>、>、>=、<、<=、IS NULL、<=>、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range
index：该联接类型与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小。
all：对于每个来自于先前的表的行组合，进行完整的表扫描。如果表是第一个没标记const的表，这通常不好，并且通常在它情况下很差。通常可以增加更多的索引而不要使用ALL，使得行能基于前面的表中的常数值或列值被检索出。
possible_keys：possible_keys列指出MySQL能使用哪个索引在该表中找到行。注意，该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。

key：key列显示MySQL实际决定使用的键(索引)。如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。

key_len：key_len列显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。注意通过key_len值我们可以确定MySQL将实际使用一个多部关键字的几个部分。

ref：ref列显示使用哪个列或常数与key一起从表中选择行。

rows：rows列显示MySQL认为它执行查询时必须检查的行数。

Extra：该列包含MySQL解决查询的详细信息。

Distinct：MySQL发现第1个匹配行后，停止为当前的行组合搜索更多的行。
Not exists：MySQL能够对查询进行LEFT JOIN优化，发现1个匹配LEFT JOIN标准的行后，不再为前面的的行组合在该表内检查更多的行。
range checked for each record (index map: #)：MySQL没有发现好的可以使用的索引，但发现如果来自前面的表的列值已知，可能部分索引可以使用。对前面的表的每个行组合，MySQL检查是否可以使用range或index_merge访问方法来索取行。
Using filesort：MySQL需要额外的一次传递，以找出如何按排序顺序检索行。通过根据联接类型浏览所有行并为所有匹配WHERE子句的行保存排序关键字和行的指针来完成排序。然后关键字被排序，并按排序顺序检索行。
Using index：从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。当查询只使用作为单一索引一部分的列时，可以使用该策略。
Using temporary：为了解决查询，MySQL需要创建一个临时表来容纳结果。典型情况如查询包含可以按不同情况列出列的GROUP BY和ORDER BY子句时。
Using where：WHERE子句用于限制哪一个行匹配下一个表或发送到客户。除非你专门从表中索取或检查所有行，如果Extra值不为Using where并且表联接类型为ALL或index，查询可能会有一些错误。
Using sort_union(...), Using union(...), Using intersect(...)：这些函数说明如何为index_merge联接类型合并索引扫描。
Using index for group-by：类似于访问表的Using index方式，Using index for group-by表示MySQL发现了一个索引，可以用来查询GROUP BY或DISTINCT查询的所有列，而不要额外搜索硬盘访问实际的表。并且，按最有效的方式使用索引，以便对于每个组，只读取少量索引条目。
通过相乘EXPLAIN输出的rows列的所有值，你能得到一个关于一个联接如何的提示。这应该粗略地告诉你MySQL必须检查多少行以执行查询。当你使用max_join_size变量限制查询时，也用这个乘积来确定执行哪个多表SELECT语句
<!-- more -->
分析索引的效率：
> EXPLAIN sql;
EXPLAIN 分析的结果的表头如下：
id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra
具体说明如下：
----------------------------------
id
id列数字越大越先执行；
如果说数字一样大，那么就从上往下依次执行，id列为null的就表是这是一个结果集，不需要使用它来进行查询。
----------------------------------
select_type
查询的序列号
　　A：simple：表示不需要union操作或者不包含子查询的简单select查询。有连接查询时，外层的查询为simple，且只有一个
　　B：primary：一个需要union操作或者含有子查询的select，位于最外层的单位查询的select_type即为primary。且只有一个
　　C：union：union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union
　　D：dependent union：与union一样，出现在union 或union all语句中，但是这个查询要受到外部查询的影响
　　E：union result：包含union的结果集，在union和union all语句中,因为它不需要参与查询，所以id字段为null
　　F：subquery：除了from字句中包含的子查询外，其他地方出现的子查询都可能是subquery
　　G：dependent subquery：与dependent union类似，表示这个subquery的查询要受到外部表查询的影响
　　H：derived：from字句中出现的子查询，也叫做派生表，其他数据库中可能叫做内联视图或嵌套select
----------------------------------
table
　　显示的查询表名，如果查询使用了别名，那么这里显示的是别名；
　　如果不涉及对数据表的操作，那么这显示为null，
　　如果显示为尖括号括起来的<derived N>就表示这个是临时表，后边的N就是执行计划中的id，表示结果来自于这个查询产生。
　　如果是尖括号括起来的<union M,N>，与<derived N>类似，也是一个临时表，表示这个结果来自于union查询的id为M,N的结果集。
----------------------------------
partitions
----------------------------------
type
　　查询所使用的类型
　　依次从好到差：system，const，eq_ref，ref，fulltext，ref_or_null，unique_subquery，index_subquery，range，index_merge，index，ALL，
　　除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引
　　A：system：
　　　　表中只有一行数据或者是空表，且只能用于myisam和memory表。
　　　　如果是Innodb引擎表，type列在这个情况通常都是all或者index
　　B：const：
　　　　使用唯一索引或者主键，返回记录一定是1行记录的等值where条件时，通常type是const。
　　　　其他数据库也叫做唯一索引扫描
　　C：eq_ref：
　　　　出现在要连接过个表的查询计划中，驱动表只返回一行数据，
　　　　且这行数据是第二个表的主键或者唯一索引，且必须为not null；
　　　　唯一索引和主键是多列时，只有所有的列都用作比较时才会出现eq_ref
　　D：ref：
　　　　不像eq_ref那样要求连接顺序，也没有主键和唯一索引的要求、只要使用相等条件检索时就可能出现；
　　　　常见与辅助索引的等值查找。或者多列主键、唯一索引中，使用第一个列之外的列作为等值查找也会出现；
　　　　返回数据不唯一的等值查找就可能出现。
　　E：fulltext：
　　　　全文索引检索，要注意，全文索引的优先级很高；
　　　　若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引
　　F：ref_or_null：
　　　　与ref方法类似，只是增加了null值的比较。实际用的不多。
　　G：unique_subquery：
　　　　用于where中的in形式子查询，子查询返回不重复值唯一值
　　H：index_subquery：
　　　　用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值；
　　　　可以使用索引将子查询去重。
　　I：range：
　　　　索引范围扫描；
　　　　常见于使用>,<,is null,between ,in ,like等运算符的查询中。
　　J：index_merge：
　　　　表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引；
　　　　官方排序这个在ref_or_null之后，但是实际上由于要读取所个索引，性能可能大部分时间都不如range
　　K：index：
　　　　索引全表扫描，把索引从头到尾扫一遍；
　　　　常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询。
　　L：all：
　　　　这个就是全表扫描数据文件；
　　　　然后再在server层进行过滤返回符合要求的记录。
----------------------------------
possible_keys
　　查询可能使用到的索引都会在这里列出来；
　　指出MySQL能使用哪个索引在该表中找到行。如果是空的，没有相关的索引。
　　这时要提高性能，可通过检验WHERE子句，看是否引用某些字段，或者检查字段不是适合索引。
----------------------------------
key
　　查询真正使用到的索引，select_type为index_merge时，这里可能出现两个以上的索引，其他的selec
----------------------------------
key_len
　　用于处理查询的索引长度；越短越好、速度越快；
　　如果是单列索引，那就整个索引长度算进去；
　　如果是多列索引，那么查询不一定都能使用到所有的列，具体使用到了多少个列的索引，这里就会计算进去，没有使用到的列，这里不会计算进去；
　　留意下这个列的值，算一下你的多列索引总长度就知道有没有使用到所有的列了。
　　要注意，mysql的ICP特性使用到的索引不会计入其中。
　　另外，key_len只计算where条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到key_len中。
----------------------------------
ref
　　如果是使用的常数等值查询，这里会显示const；
　　如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段；
　　如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func；
----------------------------------
rows
　　这里是执行计划中估算的扫描行数，不是精确值；
----------------------------------
filtered
　　使用explain extended时会出现这个列；
　　5.7之后的版本默认就有这个字段，不需要使用explain extended了。
　　这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数。
----------------------------------
Extra
　　这个列可以显示的信息非常多，有几十种，常用的有：
　　A：distinct：
　　　　在select部分使用了distinc关键字
　　B：no tables used：
　　　　不带from字句的查询或者From dual查询
　　C：using filesort：
　　　　排序时无法使用到索引时，就会出现这个。常见于order by和group by语句中
　　E：using index：
　　　　查询时不需要回表查询，直接通过索引就可以获取查询的数据。
　　F：using join buffer（block nested loop），using join buffer（batched key accss）：
　　　　5.6.x之后的版本优化关联查询的BNL，BKA特性。主要是减少内表的循环数量以及比较顺序地扫描查询。
　　G：using sort_union，using_union，using intersect，using sort_intersection：
　　　　using intersect：表示使用and的各个索引的条件时，该信息表示是从处理结果获取交集
　　　　using union：表示使用or连接各个使用索引的条件时，该信息表示从处理结果获取并集
　　　　using sort_union和using sort_intersection：与前面两个对应的类似，只是他们是出现在用and和or查询信息量大时，先查询主键，然后进行排序合并后，才能读取记录并返回。
　　H：using temporary：
　　　　表示使用了临时表存储中间结果。临时表可以是内存临时表和磁盘临时表，执行计划中看不出来，需要查看status变量，used_tmp_table，used_tmp_disk_table才能看出来。
　　I：using where：
　　　　表示存储引擎返回的记录并不是所有的都满足查询条件，需要在server层进行过滤。
　　　　查询条件中分为限制条件和检查条件，
　　　　5.6之前，存储引擎只能根据限制条件扫描数据并返回，然后server层根据检查条件进行过滤再返回真正符合查询的数据。
　　　　5.6.x之后支持ICP特性，可以把检查条件也下推到存储引擎层，不符合检查条件和限制条件的数据，直接不读取，这样就大大减少了存储引擎扫描的记录数量。
　　　　extra列显示using index condition
　　J：firstmatch(tb_name)：
　　　　5.6.x开始引入的优化子查询的新特性之一，常见于where字句含有in()类型的子查询。如果内表的数据量比较大，就可能出现这个
　　K：loosescan(m..n)：
　　　　5.6.x之后引入的优化子查询的新特性之一，在in()类型的子查询中，子查询返回的可能有重复记录时，就可能出现这个
　　　　除了这些之外，还有很多查询数据字典库，执行计划过程中就发现不可能存在结果的一些提示信息
