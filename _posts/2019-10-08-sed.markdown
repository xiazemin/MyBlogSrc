---
title: sed
layout: post
category: linux
author: 夏泽民
---
sed [选项] [命令]
1.1 选项
-n，使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed特殊处理的那一行(或者动作)才会被列出来。

-e，直接在命令列模式上进行sed的动作编辑。

-f，直接将sed的动作写在一个文件内。-f filename 则可以运行filename内的sed命令。

-r，sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)

-i，直接修改读取的文件内容，而不是输出到终端。
<!-- more -->
1.2 指定行数
[n1[,n2]]function

n1, n2，不一定存在，一般代表“选择进行动作的行数”，如果我的动作需要在10到20行之间进行，则有’10,20命令’

1.3 常用命令
a，新增，a的后面可以接字符串，而这些字符串会在新的一行出现(目前的下一行)

c，取代，c的后面可以接字符串，这些字符串可以取代n1，n2 之间的行

d，删除，因为是删除，所以d后面通常不接任何东西

i，插入，i的后面可以接字符串，而这些字符串会在新的一行出现(目前的上一行)

p，输出，即将某个选择的文件输出。通常p会与参数sed -n 一起使用

s，取代，直接对某些字符串进行替换

sed '1d' ab.txt         # 输出删除第一行后的文件内容

sed '$d' ab.txt         # 输出删除最后一行后的文件内容

sed '1, 2d' ab.txt      # 输出删除第一行到第二行后的文件内容

sed '2, $d' ab.txt      # 输出删除第2行到最后1行后的文件内容

sed -n '1p' ab.txt           # 只显示文件的第一行 

sed -n '$p' ab.txt           # 只显示文件的最后一行

sed -n '1, 2p' ab.txt        # 只显示文件的第一行到第二行

sed -n '2, $p' ab.txt        # 显示文件的第二行到最后一行

# 输出关键字ruby所在行的内容；其中'/str/p'，str为搜索的文本内容
sed -n '/ruby/p' ab.txt

# 输出关键字$所在行的内容，使用反斜线\屏蔽特殊含义
sed -n '/\$/p' ab.txt


# 在第一行后增加字符串"drink tea"
sed '1a drink tea' ab.txt     

# 在第一行到第三行后增加字符串"drink tea"
sed '1,3a drink tea' ab.txt   

sed '1a drink tea\nor coffee' ab.txt # 在第一行后增加两行，换行使用\n，可多次使用\n添加多行

sed '1c Hi' ab.txt    # 把ab.txt的第一行替换为Hi

sed '1,2c Hi' ab.txt  # 把ab.txt的第一行到第二行替换为Hi

替换一行中的某部分字符串
格式：sed 's/要替换的字符串/新的字符串/g' ab.txt（要替换的字符串可以用正则表达式）

sed 's/ruby/bird/g' ab.txt   # 把全部的ruby替换为bird

sed 's/ruby//g' ab.txt   # 把全部的ruby替换为空，即删除ruby字符串


sed -i直接对文件进行操作
# 对每行匹配到的第一个字符串进行替换
sed -i 's/原字符串/新字符串/' ab.txt 

# 对全局匹配上的所有字符串进行替换
sed -i 's/原字符串/新字符串/g' ab.txt 

# 删除所有匹配到字符串的行
sed -i '/匹配字符串/d'  ab.txt  

# 特定字符串的行后插入新行
sed -i '/特定字符串/a 新行字符串' ab.txt 

# 特定字符串的行前插入新行
sed -i '/特定字符串/i 新行字符串' ab.txt

# 把匹配行中的某个字符串替换为目标字符串
sed -i '/匹配字符串/s/源字符串/目标字符串/g' ab.txt

# 在文件ab.txt中的末行之后，添加bye
sed -i '$a bye' ab.txt   

# 对于文件第3行，把匹配上的所有字符串进行替换
sed -i '3s/原字符串/新字符串/g' ab.txt 

注：若匹配字符串是变量，则需要""，而不是’’。

1、场景：
在mac上，使用sed命令把当前目录的test.sql文件内容中的a替换为b，使用命令：sed -i “s/a/b/g” test.sql

遇到报错：sed: 1: “grep …”: extra characters at the end of g command

2、解决：
在mac中使用sed命令在-i参数后面需要带一对双引号""，正确格式如下：

sed -i “” “s/a/b/g” test.sql

3、原因
sed -i 后面的双引号中可写任意字符串或者为空，含义是用于生成源文件的备份文件的文件名。比如上面的例子：sed -i “_tmp” “s/a/b/g” test.sql，在替换test.sql的同时，还会生成test.sql_tmp的备份文件

使用sed插入tab

这是sed最擅长的替换操作，最先想到的方法是:

$ cat 1.txt | sed -E -e 's/ /\t/3'
1 2 3t4 5 6

很遗憾，\t不能被正确解释。

看回sed的man page，也没有明确的说明如果解决。

但是以前看文档的时候记得有这么一条记录：

Bash will process escapes, such as \t, inside $' ' before passing it as an arg to sed.
试验证明，以下的写法是可以的：

$ cat 1.txt | sed -e $'s/ /\t/3'
1 2 3   4 5 6