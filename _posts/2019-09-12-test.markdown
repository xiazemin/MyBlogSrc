---
title: go test Build 缓存
layout: post
category: golang
author: 夏泽民
---
go 在 1.10 版本中引入了 go tool 的缓存，此功能会缓存 go test执行的结果。 每当执行 go test 时，如果功能代码和测试代码没有变动，则在下一次执行时，会直接读取缓存中的测试结果。 而且 go test -v . 和 go test .是分开缓存的。
<!-- more -->
我们是接受缓存的，只需要测试功能通过就行了。如果想跳过缓存，有什么办法呢？ 大部分人都会想到会有参数控制的，那么这个参数就是 -count=1,把上面的测试命令加上参数， go test -count=1 -v .，执行一下试试，果然可以跳过缓存。


Build Cache
意思就是会把编译过程的中间结果cache下来，从而实现增量编译。原来需要通过go build -i命令来实现，现在go build命令默认启用了cache。启用cache后的效果是很明显的，我司的一个大程序的编译时间如下：

全新编译，耗时107秒。
修改一个文件后，再次编译，耗时22秒


Cache Path and Clean Cache
cache默认的存储路径是操作系统所确定的用户缓存目录，但是可以通过GOCACHE环境变量修改。在Ubuntu下的默认cache路径是 ~/.cache/go-build

如果要清除cache，可以使用如下两个命令:

go clean -cache 清除build cache。
go clean -testcache 清除test cache。
