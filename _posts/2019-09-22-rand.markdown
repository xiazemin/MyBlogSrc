---
title: rand 随机数
layout: post
category: golang
author: 夏泽民
---
package main
 
import (
    "fmt"
    "math/rand"
)
 
func main() {
    fmt.Println("My first lucky number is", rand.Intn(10))
    fmt.Println("My senond lucky number is", rand.Intn(10))
}
不论编译运行多少次，都是这个输出。
此程序的运行环境是固定的，因此 rand.Intn 总是会返回相同的数字。 （要得到不同的数字，需为生成器提供不同的种子数）
<!-- more -->
package main
 
import (
    "fmt"
    "math/rand"
    "time"
)
 
func main() {
    rand.Seed(time.Now().Unix())
    fmt.Println("My first lucky number is", rand.Intn(10))
    fmt.Println("My senond lucky number is", rand.Intn(10))
}

效果：（多次编译运行效果不同）

1.伪随机数并不是假随机数，这里的“伪”是有规律的意思，就是计算机产生的伪随机数既是随机的又是有规律的。

2.随机种子来自系统时钟，确切地说，是来自计算机主板上的定时/计数器在内存中的记数值。

3.随机数是由随机种子根据一定的计算方法计算出来的数值。所以，只要计算方法一定，随机种子一定，那么产生的随机数就不会变。也就是说，伪随机数也是某种对应映射的产物，只不过这个自变量是系统的时间而已

4.如果你每次调用srand()时都提供相同的种子值，那么，你将会得到相同的随机数序列

计算机不会产生绝对随机的随机数，计算机只能产生“伪随机数”。其实绝对随机的随机数只是一种理想的随机数，即使计算机怎样发展，它也不会产生一串绝对随机的随机数。计算机只能生成相对的随机数，即伪随机数。

伪随机数并不是假随机数，这里的“伪”是有规律的意思，就是计算机产生的伪随机数既是随机的又是有规律的。怎样理解呢？产生的伪随机数有时遵守一定的规律，有时不遵守任何规律；伪随机数有一部分遵守一定的规律；另一部分不遵守任何规律。比如“世上没有两片形状完全相同的树叶”，这正是点到了事物的特性，即随机性，但是每种树的叶子都有近似的形状，这正是事物的共性，即规律性。从这个角度讲，你大概就会接受这样的事实了：计算机只能产生伪随机数而不能产生绝对随机的随机数。

那么计算机中随机数是怎样产生的呢？有人可能会说，随机数是由“随机种子”产生的。没错，随机种子是用来产生随机数的一个数，在计算机中，这样的一个“随机种子”是一个无符号整形数。
//rand01.c
#include<dos.h>

static unsigned int RAND_SEED;

unsigned int random(void)
{
RAND_SEED=(RAND_SEED*123+59)%65536;
return(RAND_SEED);
}

void random_start(void)
{
int temp[2];
movedata(0x0040,0x006c,FP_SEG(temp),FP_OFF(temp),4);
RAND_SEED=temp[0];
}

main()
{
unsigned int i,n;
random_start();
for(i=0;i<10;i++)
printf("%u\t",random());
printf("\n");
}

这个程序（rand01.c）完整地阐述了随机数产生的过程：
首先，主程序调用random_start()方法，random_start()方法中的这一句我很感兴趣：

movedata(0x0040,0x006c,FP_SEG(temp),FP_OFF(temp),4);

这个函数用来移动内存数据，其中FP_SEG（far pointer to segment）是取temp数组段地址的函数，FP_OFF（far pointer to offset）是取temp数组相对地址的函数，movedata函数的作用是把位于0040:006CH存储单元中的双字放到数组temp的声明的两个存储单元中。这样可以通过temp数组把0040:006CH处的一个16位的数送给RAND_SEED。

random用来根据随机种子RAND_SEED的值计算得出随机数，其中这一句：

RAND_SEED=(RAND_SEED*123+59)%65536;

是用来计算随机数的方法，随机数的计算方法在不同的计算机中是不同的，即使在相同的计算机中安装的不同的操作系统中也是不同的。我在linux和windows下分别试过，相同的随机种子在这两种操作系统中生成的随机数是不同的，这说明它们的计算方法不同。

现在，我们明白随机种子是从哪儿获得的，而且知道随机数是怎样通过随机种子计算出来的了。那么，随机种子为什么要在内存的0040:006CH处取？0040:006CH处存放的是什么？

学过《计算机组成原理与接口技术》这门课的人可能会记得在编制ROM BIOS时钟中断服务程序时会用到Intel 8253定时/计数器，它与Intel 8259中断芯片的通信使得中断服务程序得以运转，主板每秒产生的18.2次中断正是处理器根据定时/记数器值控制中断芯片产生的。在我们计算机的主机板上都会有这样一个定时/记数器用来计算当前系统时间，每过一个时钟信号周期都会使记数器加一，而这个记数器的值存放在哪儿呢？没错，就在内存的0040:006CH处，其实这一段内存空间是这样定义的：

TIMER_LOW DW ? ；地址为 0040:006CH
TIMER_HIGH DW ? ；地址为 0040:006EH
TIMER_OFT DB ? ；地址为 0040:0070H

时钟中断服务程序中，每当TIMER_LOW转满时，此时，记数器也会转满，记数器的值归零，即TIMER_LOW处的16位二进制归零，而TIMER_HIGH加一。rand01.c中的

movedata(0x0040,0x006c,FP_SEG(temp),FP_OFF(temp),4);

正是把TIMER_LOW和TIMER_HIGH两个16位二进制数放进temp数组，再送往RAND_SEED，从而获得了“随机种子”。

现在，可以确定的一点是，随机种子来自系统时钟，确切地说，是来自计算机主板上的定时/计数器在内存中的记数值。这样，我们总结一下前面的分析，并讨论一下这些结论在程序中的应用：

1.随机数是由随机种子根据一定的计算方法计算出来的数值。所以，只要计算方法一定，随机种子一定，那么产生的随机数就不会变。

看下面这个C++程序：

//rand02.cpp
#include <iostream>
#include <ctime>
using namespace std;

int main()
{
unsigned int seed=5;
srand(seed);
unsigned int r=rand();
cout<<r<<endl;
}

在相同的平台环境下，编译生成exe后，每次运行它，显示的随机数都是一样的。这是因为在相同的编译平台环境下，由随机种子生成随机数的计算方法都是一样的，再加上随机种子一样，所以产生的随机数就是一样的。

2.只要用户或第三方不设置随机种子，那么在默认情况下随机种子来自系统时钟（即定时/计数器的值）

3.建议：如果想在一个程序中生成随机数序列，需要至多在生成随机数之前设置一次随机种子。

1、math/rand 包
1.1、math/rand 包实现了伪随机数生成器

1.2、主要方法

（1）func Seed(seed int64)

设置随机种子，不设置则默认Seed(1)

（2）func Int() int

返回一个非负的伪随机int值

（3）func Int31() int32

返回一个int32类型的非负的31位伪随机数

（4）func Int63() int64

返回一个int64类型的非负的63位伪随机数

（5）func Intn(n int) int

返回一个取值范围在[0,n)的伪随机int值，如果n<=0会panic

（6）func Int31n(n int32) int32

返回一个取值范围在[0,n)的伪随机int32值，如果n<=0会panic

（7）func Int63n(n int64) int64

返回一个取值范围在[0, n)的伪随机int64值，如果n<=0会panic

（8）func Float32() float32

返回一个取值范围在[0.0, 1.0)的伪随机float32值

（9）func Float64() float64

返回一个取值范围在[0.0, 1.0)的伪随机float64值

（10）func Perm(n int) []int

返回一个有n个元素的，[0,n)范围内整数的伪随机排列的切片

1.4、应用场景

（1）验证码

（2）随机密码

（3）抽奖

（4）随机算法　

2、crypto/rand 包　
2.1、crypto/rand 包实现了用于加解密的更安全的随机数生成器

2.2、主要方法

（1）func Int(rand io.Reader, max *big.Int) (n *big.Int, err error)

返回一个在[0, max)区间服从均匀分布的随机值，如果max<=0则会panic

（2）func Prime(rand io.Reader, bits int) (p *big.Int, err error)

返回一个具有指定字位数（二进制的位数）的数字，该数字具有很高可能性是质数。如果从rand读取时出错，或者bits<2会返回错误

（3）func Read(b []byte) (n int, err error)

2.4、应用场景

（1）生成随机加密串
