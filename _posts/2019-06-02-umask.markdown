---
title: umask umask(0)
layout: post
category: linux
author: 夏泽民
---
当我们登录系统之后创建一个文件总是有一个默认权限的，那么这个权限是怎么来的呢？这就是umask干的事情。umask设置了用户创建文件的默认 权限，它与chmod的效果刚好相反，umask设置的是权限“补码”，而chmod设置的是文件权限码。一般在/etc/profile、$ [HOME]/.bash_profile或$[HOME]/.profile中设置umask值。

有时候需要在linux上从其他人的目录里copy文件过来。
copy的时候发现很多文件copy不过来，copy一个文件夹时，当前文件把权限修改了，结果子目录的中的还没有自动继承过来，导致子目录中的文件copy不过来。
原因
umask的默认值改变了
<!-- more -->
umask 简介
umask命令设定创建文件的缺省模式。对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的u m a s k值中的数字。对于文件来说，这一数字的最大值分别是6。系统不允许你在创建一个文本文件时就赋予它执行权限，必须在创建后用c h m o d命令增加这一权限。目录则允许设置执行权限，这样针对目录来说， u m a s k中各个数字最大可以到7。

umask 计算
umask跟chmod命令正好相反，所以我们只要记住u m a s k是从权限中“拿走”相应的位即可。

例如，对于u m a s k值0 0 2，相应的文件和目录缺省创建权限是什么呢？

第一步，我们首先写下具有全部权限的模式，即7 7 7 (所有用户都具有读、写和执行权限)。
第二步，在下面一行按照u m a s k值写下相应的位，在本例中是0 0 2。
第三步，在接下来的一行中记下上面两行中没有匹配的位。这就是目录的缺省创建权限。
稍加练习就能够记住这种方法。
第四步，对于文件来说，在创建时不能具有执行权限，只要拿掉相应的执行权限比特即
可。
这就是上面的例子，其中u m a s k值为0 0 2：
1) 文件的最大权限rwx rwx rwx (777)
2) umask值为0 0 2 - - - - - - -w-
3) 目录权限rwx rwx r-x (775) 这就是目录创建缺省权限
4) 文件权限rw- rw- r-- (664) 这就是文件创建缺省权限

其实就用最大权限减掉umask值即可，如文件的最大权限是666，那么umask 值为002的文件默认权限是666-002 =664。 目录的最大权限是777，那么umask值为002的目录的默认权限是777-002=775

umask 修改
最初登录时，umask确定了用户创建文件的缺省模式。 

登录之后可以使用umask命令查看当前的umask值，也使用umask命令改变文件创建的缺省模式。如

~> umask
0027
~> umask 0022

按照以上方式改变的umask值在shell退出之前或者使用新的umask命令之前一直有效，如果想永久改变umask值，需要修改自己$ H O M E目录下的. p r o f i l e或. b a s h _ p r o f i l e文件中

umask 函数主要用于：在创建新文件或目录时 屏蔽掉新文件或目录不应有的访问允许权限。文件的访问允许权限共有9种，分别是：r w x r w x r w x（它们分别代表：用户读 用户写 用户执行 组读 组写 组执行 其它读 其它写 其它执行）。
其实这个函数的作用，就是设置允许当前进程创建文件或者目录最大可操作的权限，比如这里设置为0，它的意思就是0取反再创建文件时权限相与，也就是：(~0) & mode 等于八进制的值0777 & mode了，这样就是给后面的代码调用函数mkdir给出最大的权限，避免了创建目录或文件的权限不确定性。

你的系统管理员必须要为你设置一个合理的 umask值，以确保你创建的文件具有所希望的缺省权限，防止其他非同组用户对你的文件具有写权限。在已经登录之后，可以按照个人的偏好使用umask命 令来改变文件创建的缺省权限。相应的改变直到退出该shell或使用另外的umask命令之前一直有效。一般来说，umask命令是在/etc /profile文件中设置的，每个用户在登录时都会引用这个文件，所以如果希望改变所有用户的umask，可以在该文件中加入相应的条目。如果希望永久 性地设置自己的umask值，那么就把它放在自己$HOME目录下的.profile或.bash_profile文件中。


