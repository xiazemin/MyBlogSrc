---
title: nginx_ssi
layout: post
category: web
author: 夏泽民
---
<!-- more -->
<div class="container">
什么是SSI
Server Side Include，通常称为服务器端嵌入，是一种类似于ASP的基于服务器的网页制作技术。大多数（尤其是基于Unix平台）的WEB服务器如Netscape Enterprise Server等均支持SSI命令。
为什么要用SSI
用个例子来说明，一个静态化的页面中，需要嵌入一小块实时变化的内容，。例如首页，大部分的页面内容需要缓存但是用户登录后的个人信息是动态信息，不能缓存。那么如何解决这个”页面部分缓存”问题，利用SSI就可以解决，在首页的静态页面中嵌入个人信息的动态页，由于是服务器端的嵌入，所以用户浏览的时候都是一个嵌入后的页面。
用途
主要有以下几种用途：

1．显示服务器端环境变量<#echo>。

2．将文本内容直接插入到文档中<#include>。

3．显示WEB文档相关信息<#flastmod #fsize> (如文件制作日期/大小等)。

4．直接执行服务器上的各种程序<#exec>(如CGI或其他可执行程序)。

5．设置SSI信息显示格式<#config>(如文件制作日期/大小显示方式) 高级SSI<XSSI>可设置变量使用if条件语句。

　　SSI工作原理将内容发送到浏览器之前，可以使用“服务器端包含 (SSI)”指令将文本、图形或应用程序信息包含到网页中。例如，可以使用 SSI 包含时间/日期戳、版权声明或供客户填写并返回的表单。对于在多个文件中重复出现的文本或图形，使用包含文件是一种简便的方法。将内容存入一个包含文件中即可，而不必将内容输入所有文件。通过一个非常简单的语句即可调用包含文件，此语句指示 Web服务器将内容插入适当网页。而且，使用包含文件时，对内容的所有更改只需在一个地方就能完成。

　　因为包含 SSI 指令的文件要求特殊处理，所以必须为所有 SSI 文件赋予 SSI文件扩展名。默认扩展名是 .stm、.shtm 和 .shtml。

　　Web服务器在处理网页的同时处理 SSI 指令。当 Web服务器遇到 SSI 指令时，直接将包含文件的内容插入 HTML网页。如果“包含文件”中包含 SSI 指令，则同时插入此文件。除了用于包含文件的基本指令之外，还可以使用 SSI 指令插入文件的相关信息（如文件的大小）或者运行应用程序或 shell 命令。
　使用
SSI是为WEB服务器提供的一套命令，这些命令只要直接嵌入到HTML文档的注释内容之中即可。如：
　　<!--#include file="info.htm"-->就是一条SSI指令，其作用是将"info.htm"的内容拷贝到当前的页面中，当访问者来浏览时，会看到其它HTML文档一样显示info.htm其中的内容。
　　其它的SSI指令使用形式基本同刚才的举例差不多，可见SSI使用只是插入一点代码而已，使用形式非常简单。
　　当然，如果WEB服务器不支持SSI，它就会只不过将它当作注释信息，直接跳过其中的内容；浏览器也会忽略这些信息。
　　如何在我的WEB服务器上配置SSI功能？
　　在一些WEB服务器上（如IIS 4.0/SAMBAR 4.2），包含 #include 指令的文件必须使用已被映射到 SSI解释程序的扩展名；否则，Web 服务器将不会处理该SSI指令；默认情况下，扩展名 .stm、.shtm 和 .shtml 被映射到解释程序（Ssinc.dll）。
      Apache则是根据你的设置情况而定，修改srm.conf如：AddType text/x-server-parsed-html
　　.shtml 将只对.shtml扩展名的文件解析SSI指令
　　.html将对所有HTML文档解析SSI指令
　　Netscape WEB服务器直接使用Administration Server(管理服务器)可打开SSI功能。
　　Website使用Server Admin程序中的Mapping标签，扩展名添加内容类型为：wwwserver/html-ssi
　　Cern服务器不支持SSI，可用SSI诈骗法，到http://sw.cse.bris. ac .uk/WebTools/fakessi.html;上下载一个PERL脚本，即可使你的CERN服务器使用一些SSI指令。（不支持exec指令。）
格式
SSI指令基本格式：
　　程序代码:
　　<!-– 指令名称="指令参数"-->
　　<!-– 指令名称="指令参数"-->
　　如 程序代码：
　　　　<!--#include file="info.htm"-->
　　　　<!--#include file="info.htm"-->
　　说明：
　　　　1．<!-- -->是HTML语法中表示注释，当WEB服务器不支持SSI时，会忽略这些信息。
　　　　2．#include 为SSI指令之一。
　　　　3．file 为include的参数，info.htm为参数值，在本指令中指将要包含的文档名。
　　注意：
　　　　1．<!--与#号间无空格，只有SSI指令与参数间存在空格。
　　　　2．上面的标点=""，一个也不能少。
　　　　3．SSI指令是大小写敏感的，因此参数必须是小写才会起作用。
详解
#echo 示范
作用：
　　将环境变量插入到页面中。
语法：
　　程序代码：
　　<!--#echo var="变量名称"-->
　　本文档名称：程序代码：
　　<!--#echo var="DOCUMENT_NAME"-->
　　当前时间：程序代码：
　　<!--#echo var="DATE_LOCAL"-->
　　<!--#echo var="DATE_LOCAL"-->
　　你的IP地址是程序代码：
　　<!--#echo var="REMOTE_ADDR"-->
 
#include 示范
作用：
　　将文本文件的内容直接插入到文档页面中。
语法：
　　程序代码：
　　<!--#include file="文件名称"-->
　　<!--#include virtual="文件名称"-->
　　file 文件名是一个相对路径，该路径相对于使用 #include 指令的文档所在的目录。被包含文件可以在同一级目录或其子目录中，但不能在上一级目录中。如表示当前目录下的的nav_head.htm文档，则为　　　file="nav_head.htm"。
　　virtual 文件名是 Web 站点上的虚拟目录的完整路径。如表示相对于服务器文档根目录下hoyi目录下的nav_head.htm文件；则为virtual="/hoyi/nav_head.htm"
　　参数：
　　file 指定包含文件相对于本文档的位置
　　virtual 指定相对于服务器文档根目录的位置
　　注意：
　　　　1．文件名称必须带有扩展名。
　　　　2．被包含的文件可以具有任何文件扩展名，我觉得直接使用htm扩展名最方便，微软公司推荐使用 .inc 扩展名（这就看你的爱好了）。
示例：
　　程序代码：
　　<!--#include file="nav_head.htm"-->将头文件插入到当前页面
　　<!--#include file="nav_foot.htm"-->将尾文件插入到当前页面
　　#flastmod 和#fsize 示范
作用：#flastmod 文件最后一次更新日期
 
#fsize 文件的长度
语法：
　　程序代码：
　　<!--#flastmod file="文件名称"-->
　　<!--#fsize file="文件名称"-->
参数：
　　file 指定包含文件相对于本文档的位置 如 info.txt 表示当前目录下的的info.txt文档
　　virtual 指定相对于服务器文档根目录的位置 如 /hoyi/info.txt 表示
注意：
　　文件名称必须带有扩展名。
示例：
　　程序代码：
　　<!--#flastmod file="news.htm"-->
　　将当前目录下news.htm文件的最后一次更新日期插入到当前页面
　　程序代码：
　　<!--#fsize file="news.htm"-->
　　将当前目录下news.htm的文件大小入到当前页面
 
#exec 示范
作用：
　　将某一外部程序的输出插入到页面中。可插入CGI程序或者是常规应用程序的输入，这取决于使用的参数是cmd还是cgi。
语法：
　　程序代码：
　　<!--#exec cmd="文件名称"-->
　　<!--#exec cgi="文件名称"-->
参数：
　　cmd 常规应用程序
　　cgi CGI脚本程序
示例：
　　程序代码：
　　<!--#exec cmd="cat /etc/passwd"-->将会显示密码文件
　　<!--#exec cmd="dir /b"-->将会显示当前目录下文件列表
　　<!--#exec cgi="/cgi-bin/gb.cgi"-->将会执行CGI程序gb.cgi。
　　<!--#exec cgi="/cgi-bin/access_log.cgi"-->将会执行CGI程序access_log.cgi。
注意：
　　从上面的示例可以看出，这个指令相当方便，但是也存在安全问题。
禁止方法：
　　．Apache，将access.conf中的"Options Includes ExecCGI"这行代码删除；
　　．在IIS中，要禁用 #exec 命令，可修改 SSIExecDisable 元数据库；
 
#config
作用：
　　指定返回给客户端浏览器的错误信息、日期和文件大小的格式。
语法：
　　程序代码：
　　<!--#config errmsg="自定义错误信息"-->
　　<!--#config sizefmt="显示单位"-->
　　<!--#config timefmt="显示格式"-->
参数：
　　errmsg 自定义SSI执行错误信息，可以为任何你喜欢的方式。
　　sizefmt 文件大小显示方式，默认为字节方式("bytes")可以改为千字节方式("abbrev")
　　timefmt 时间显示方式，最灵活的配置属性。
示例：显示一个不存在文件的大小
　　程序代码：
　　<!--#config errmsg="服务器执行错误，谢谢！"-->
　　<!--#fsize file="不存在的文件.htm"-->
　　以千字节方式显示文件大小
　　程序代码：
　　<!--#config sizefmt="abbrev"-->
　　<!--#fsizefile="news.htm"-->
　　以特定的时间格式显示时间
　　程序代码：
　　<!--#config timefmt="%Y年/%m月%d日 星期%W 北京时间%H:%M:%s，%Y年已过去了%j天 今天是%Y年的第%U个星期"-->
　　<!--#echo var="DATE_LOCAL"--> 显示今天是星期几，几月，时区
　　<!--#config timefmt="今天%A,%B,服务器时区是 %z，是"-->
　　<!--#echo var="DATE_LOCAL"-->
XSSI
XSSI（Extended SSI）是一组高级SSI指令，内置于Apache 1.2或更高版本的mod-include模块之中。
其中可利用的的指令有：
#printenv
#set
#if
#printenv
作用：显示当前存在于WEB服务器环境中的所有环境变量。
语法：程序代码：
<!--#printenv-->
#set
作用：可给变量赋值，以用于后面的if语句。
语法：程序代码：
<!--#set var="变量名"value="变量值"-->
参数：无
示例：程序代码：
<!--#set var="color"value="红色"-->
#if
作用：创建可以改变数据的页面，这些数据根据使用if语句时计算的要求予以显示。
语法：程序代码：
<!--#if expr="$变量名=\"变量值A\""-->
显示内容
<!--#elif expr="$变量名=\"变量值B\""-->
显示内容
<!--#else-->
显示内容
<!--#endif"-->
示例：
程序代码：
<!--#if expr="$SERVER_NAME=\"bk.baidu .com\""-->
欢迎光临百度。
<!--#elif expr="$SERVER_NAME=\"bk.baidu .com\"" -->
欢迎光临百度知道。
<!--#else-->
欢迎光临百度百科。
<!--#endif"-->
注意：用于前面指令中的反斜杠，是用来代换内部的引号，以便它们不会被解释为结束表达式。不可省略。
命令
config

Config命令主要用于修改SSI的默认设置。其中：
Errmsg：设置默认错误信息。为了能够正常的返回用户设定的错误信息，在HTML文件中Errmsg参数必须被放置在其它SSI命令的前面，否则客户端只能显示默认的错误信息，而不是由用户设定的自定义信息。
<!--#config errmsg="Error! -->
Timefmt：定义日期和时间的使用格式。Timefmt参数必须在echo命令之前使用。
<!--#config timefmt="%A,%B %d,%Y"-->
<!--#echo var="LAST_MODIFIED" -->
显示结果为：
Wednesday,April 12,2000
也许用户对上例中所使用的%A %B %d感到很陌生，下面我们就以表格的形式总结一下SSI中较为常用的一些日期和时间格式。
Sizefmt：决定文件大小是以字节、千字节还是兆字节为单位表示。如果以字节为单位，参数值为"bytes"；对于千字节和兆字节可以使用缩写形式。同样，sizefmt参数必须放在fsize命令的前面才能使用。
<!--#config sizefmt="bytes" -->
<!--#fsize file="index.html" -->
Include

Include命令可以把其它文档中的文字或图片插入到当前被解析的文档中，这是整个SSI的关键所在。通过Include命令只需要改动一个文件就可以瞬间更新整个站点！
Include命令具有两个不同的参数：
Virtual：给出到服务器端某个文档的虚拟路径。例如：
<!--#include virtual="/includes/header.html" -->
File：给出到当前目录的相对路径，其中不能使用"../"，也不能使用绝对路径。例如：
<!--#include file="header.html" -->
这就要求每一个目录中都包含一个header.html文件。
echo

Echo命令可以显示以下各环境变量：
DOCUMENT_NAME：显示当前文档的名称。
<!--#echo var="DOCUMENT_NAME" -->
显示结果为：
index.html
DOCUMENT_URI：显示当前文档的虚拟路径。例如：
<!--#echo var="DOCUMENT_URI" -->
显示结果为：
/YourDirectory/YourFilename.html
随着网站的不断发展，那些越来越长的URL地址肯定会让人头疼。如果使用SSI，一切就会迎刃而解。因为我们可以把网站的域名和SSI命令结合在一起显示完整的URL，即：
http://YourDomain<!--#echovar="DOCUMENT_URI" -->
QUERY_STRING_UNESCAPED：显示未经转义处理的由客户端发送的查询字串，其中所有的特殊字符前面都有转义符"\"。例如：
<!--#echo var="QUERY_STRING_UNESCAPED" -->
DATE_LOCAL：显示服务器设定时区的日期和时间。用户可以结合config命令的timefmt参数，定制输出信息。例如：
<!--#config timefmt="%A,the %d of %B,in the year %Y" -->
<!--#echo var="DATE_LOCAL" -->
显示结果为：
Saturday,the 15 of April,in the year 2000
DATE_GMT：功能与DATE_LOCAL一样，只不过返回的是以格林尼治标准时间为基准的日期。例如：
<!--#echo var="DATE_GMT" -->
LAST_MODIFIED：显示当前文档的最后更新时间。同样，这是SSI中非常实用的一个功能，只要在HTML文档中加入以下这行简单的文字，就可以在页面上动态的显示更新时间。
<!--#echo var="LAST_MODIFIED" -->
CGI环境变量
除了SSI环境变量之外，echo命令还可以显示以下CGI环境变量：
SERVER_SOFTWARE：显示服务器软件的名称和版本。例如：
<!--#echo var="SERVER_SOFTWARE" -->
SERVER_NAME：显示服务器的主机名称，DNS别名或IP地址。例如：
<!--#echo var="SERVER_NAME" -->
SERVER_PROTOCOL：显示客户端请求所使用的协议名称和版本，如HTTP/1.0。例如：
<!--#echo var="SERVER_PROTOCOL" -->
SERVER_PORT：显示服务器的响应端口。例如：
<!--#echo var="SERVER_PORT" -->
REQUEST_METHOD：显示客户端的文档请求方法，包括GET,HEAD,和POST。例如：
<!--#echo var="REQUEST_METHOD" -->
REMOTE_HOST：显示发出请求信息的客户端主机名称。
<!--#echo var="REMOTE_HOST" -->
REMOTE_ADDR：显示发出请求信息的客户端IP地址。
<!--#echo var="REMOTE_ADDR" -->
AUTH_TYPE：显示用户身份的验证方法。
<!--#echo var="AUTH_TYPE" -->
REMOTE_USER：显示访问受保护页面的用户所使用的帐号名称。
<!--#echo var="REMOTE_USER" -->
fsize

显示指定文件的大小，可以结合config命令的sizefmt参数定制输出格式。
<!--#fsize file="index_working.html" -->
flastmod

显示指定文件的最后修改日期，可以结合config 命令的timefmt参数控制输出格式。
<!--#config timefmt="%A,the %d of %B,in the year %Y" -->
<!--#flastmod file="file.html" -->
这里，我们可以利用flastmod参数显示出一个页面上所有链接页面的更新日期。方法如下：
<!--#config timefmt=" %B %d,%Y" -->
File
<!--#flastmod virtual="/directory/file.html" -->
Another File
<!--#flastmod virtual="/another_directory/another_file.html" -->
显示结果为：
File April 19,2000
Another File January 08,2000
exec

Exec命令可以执行CGI脚本或者shell命令。使用方法如下：
Cmd：使用/bin/sh执行指定的字串。如果SSI使用了IncludesNOEXEC选项，则该命令将被屏蔽。
Cgi：可以用来执行CGI脚本。例如，下面这个例子中使用服务端cgi-bin目录下的counter .pl脚本程序在每个页面放置一个计数器
<!--#exec cgi="/cgi-bin/counter .pl" -->
指令区别
　　SHTML和HTML的区别，如果用一句话来解释就是：SHTML 不是HTML而是一种服务器API,shtml可通过服务器动态产成html. 虽然两者都是超文本格式，但shtml是一种用于SSI技术的文件。也就是Server Side Include--SSI服务器端包含指令。如果Web Server有SSI功能的话(大多数（尤其是基于Unix平台）的WEB服务器如Netscape Enterprise Server等均支持SSI命令)。会对shtml文件特殊招待。先扫一次shtml文件看有没有特殊的SSI指令存在。有就按Web Server设定规则解释SSI指令。解释完后跟一般html一起调去客户端。html或htm与shtml或shtm的关系是什么？html或者htm是一种静态的页面格式，也就是说不需要服务器解析其中的脚本，或者说里面没有服务器端执行的脚本，而shtml或者shtm由于它基于SSI技术，当有服务器端可执行脚本时被当作一种动态编程语言来看待，就如asp、jsp或者php一样。当shtml或者shtm中不包含服务器端可执行脚本时其作用和html或者htm是一样的。

　如下是支持ssi的配置部分：
server {
    listen          80;
    server_name     doc.outofmemory.cn;
    access_log      /www/logs/doc.outofmemory.cn/access.log;

    ssi on;
    ssi_silent_errors on;
    ssi_types text/shtml;

    location / {
        index index.html;
        root  /www/doc.outofmemory.cn/;
    }
}
在上面的server配置中，只要有如下三行，就可以支持ssi（server side include）了

需要的选项主要是以下三个：
ssi: 默认值off，启用ssi时将其设为on
ssi_silent_errors: 默认值off，开启后在处理SSI文件出错时不输出错误提示"[an error occurred while processing the directive]"。
ssi_types: 默认是text/html，所以如果需支持html，则不需要设置这句，如果需要支持shtml则需要设置：ssi_types text/shtml
三个参数可以放在http, server或location作用域下。

 # ./nginx -s reload
nginx: [error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
 解决方法：
[root@localhost nginx]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
</div>
