---
title: libevent
layout: post
category: linux
author: 夏泽民
---
libevent是一个事件通知库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue、IOCP等系统调用管理事件机制。著名分布式缓存软件memcached也是基于libevent，而且libevent在使用上可以做到跨平台，而且根据libevent官方网站上公布的数据统计，似乎也有着非凡的性能。
<!-- more -->
libevent支持用户使用三种类型的事件，分别是网络IO、定时器、信号三种，最新版本在定时器的实现上使用了最小堆的数据结构，以达到高效查找、排序、删除定时器的目的，IO和信号的实现均使用了双向队列（用链表实现）。网络IO上，主要关注了一下linux上的epoll（因为目前的开发主要在linux平台），结果发现libevent的epoll居然用的EPOLLLT，水平触发的方式用起来比较方便，不容易出错，但是在效率上可能比EPOLLET要低一些。
libevent包括事件管理、缓存管理、DNS、HTTP、缓存事件几大部分。事件管理包括各种IO（socket）、定时器、信号等事件；缓存管理是指evbuffer功能；DNS是libevent提供的一个异步DNS查询功能；HTTP是libevent的一个轻量级http实现，包括服务器和客户端。libevent也支持ssl，这对于有安全需求的网络程序非常的重要，但是其支持不是很完善，比如http server的实现就不支持ssl。

Libevent是开源社区一款高性能的I/O框架库，其具有如下特点：

1.跨平台支持。Libevent支持Linux、UNIX和Windows。

2.统一事件源。libevent对i/o事件、信号和定时事件提供统一的处理。

3.线程安全。libevent使用libevent_pthreads库来提供线程安全支持。

4.基于reactor模式的实现。

reactor基本知识

reactor是i/o框架库的核心，它主要提供的几个方法是：

1.handle_events:该方法执行事件循环，重复如下过程：等待事件，然后依次处理所有就绪事件对应的时间处理器。

2.register_handler:该方法调用事件多路分发器的register_event方法来往事件多路分发器中注册一个事件。

3.remove_handler:该方法调用事件多路分发器的remove_event方法来删除事件多路分发器中的一个事件。
reactor具有如下优点：

1.响应快，不必为单个同步事件所阻塞；

2.编程相对简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销；

3.可扩展性，可以方便的通过增加reactor实例个数来充分利用CPU资源；

4.可复用性，reactor框架本身与具体事件处理逻辑无关，具有很高的复用性。

libevent库的主要逻辑：

1.调用event_init函数创建event_base对象。一个event_base相当于一个reactor实例。

2.创建具体的事件处理器，并设置它们所从属的reactor实例。evsignal_new和evtimer_new分别用于创建信号事件处理器和定时事件处理器，它们的统一入口是event_new函数，event_new函数成功时返回一个event类型的对象，也就是libevent的事件处理器
3.调用event_add函数，将事件处理器添加到注册事件队列中，并将该事件处理器对应的事件添加到事件多路分发器中。

4.调用event_base_dispatch函数来执行事件循环。

5.事件循环结束后，使用*_free系列函数来释放系统资源。

源代码组织结构

1）头文主要就是 event.h：事件宏定义、接口函数声明，主要结构体 event 的声明；


2）内部头文件
xxx-internal.h：内部数据结构和函数，对外不可见，以达到信息隐藏的目的；
3） libevent 框架
event.c： event 整体框架的代码实现；
4）对系统 I/O 多路复用机制的封装
epoll.c：对 epoll 的封装；
select.c：对 select 的封装；
devpoll.c：对 dev/poll 的封装;
kqueue.c：对 kqueue 的封装；
5）定时事件管理
min-heap.h：其实就是一个以时间作为 key 的小根堆结构；
6）信号管理
signal.c：对信号事件的处理；
7）辅助功能函数
evutil.h 和 evutil.c：一些辅助功能函数，包括创建 socket pair 和一些时间操作函数：加、减
和比较等。
8）日志
log.h 和 log.c： log 日志函数
9）缓冲区管理
evbuffer.c 和 buffer.c： libevent 对缓冲区的封装；
10）基本数据结构
compat\sys 下的两个源文件： queue.h 是 libevent 基本数据结构的实现，包括链表，双向链表，
队列等； _libevent_time.h：一些用于时间操作的结构体定义、函数和宏定义；
11）实用网络库


http 和 evdns：是基于 libevent 实现的 http 服务器和异步 dns 查询库；

1） 事件源
Linux上是文件描述符，Windows上就是Socket或者Handle了，这里统一称为“句柄集”；程序在指定的句柄上注册关心的事件，比如I/O事件。

2） event demultiplexer——事件多路分发机制
由操作系统提供的I/O多路复用机制，比如select和epoll。
    程序首先将其关心的句柄（事件源）及其事件注册到event demultiplexer上；
当有事件到达时，event demultiplexer会发出通知“在已经注册的句柄集中，一个或多个句柄的事件已经就绪”；
    程序收到通知后，就可以在非阻塞的情况下对事件进行处理了。
对应到libevent中，依然是select、poll、epoll等，但是libevent使用结构体eventop进行了封装，以统一的接口来支持这些I/O多路复用机制，达到了对外隐藏底层系统机制的目的。

3） Reactor——反应器
    Reactor，是事件管理的接口，内部使用event demultiplexer注册、注销事件；并运行事件循环，当有事件进入“就绪”状态时，调用注册事件的回调函数处理事件。
对应到libevent中，就是event_base结构体。
一个典型的Reactor声明方式

4） Event Handler——事件处理程序
    事件处理程序提供了一组接口，每个接口对应了一种类型的事件，供Reactor在相应的事件发生时调用，执行相应的事件处理。通常它会绑定一个有效的句柄。
对应到libevent中，就是event结构体

基本流程。
    1）首先应用程序准备并初始化event，设置好事件类型和回调函数；这对应于前面第步骤2和3；
    2）向libevent添加该事件event。对于定时事件，libevent使用一个小根堆管理，key为超时时间；对于Signal和I/O事件，libevent将其放入到等待链表（wait list）中，这是一个双向链表结构；
    3）程序调用event_base_dispatch()系列函数进入无限循环，等待事件，以select()函数为例；每次循环前libevent会检查定时事件的最小超时时间tv，根据tv设置select()的最大等待时间，以便于后面及时处理超         时事件；
当select()返回后，首先检查超时事件，然后检查I/O事件；
Libevent将所有的就绪事件，放入到激活链表中；
然后对激活链表中的事件，调用事件的回调函数执行事件处理；