---
title: 尾递归优化
layout: post
category: lang
author: 夏泽民
---
<!-- more -->
尾递归和一般的递归不同在对内存的占用，普通递归创建stack累积而后计算收缩，尾递归只会占用恒量的内存（和迭代一样）


因为Python，Java，Pascal等等无法在语言中实现尾递归优化(Tail Call Optimization, TCO)，所以采用了for, while, goto等特殊结构代替recursive的表述。Scheme则不需要这样曲折地表达，一旦写成尾递归形式，就可以进行尾递归优化。

函数调用会在内存形成一个"调用记录"，又称"调用帧"（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，就形成一个"调用栈"（call stack）。

尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。

递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生"栈溢出"错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生"栈溢出"错误。
尾递归的判断标准是函数运行最后一步是否调用自身，而不是是否在函数的最后一行调用自身。
非尾递归：
function f(x) {
   if (x === 1) return 1;
   return 1 + f(x-1);
}
尾递归：
function f(x) {
   if (x === 1) return 1;
   return f(x-1);
}

尾递归优化：尾递归是把变化的参数传递给递归函数的变量了。（就是把所有用到的内部变量改写成函数的参数。）

function factorial(n) {
  if (n === 1) return 1;
  return n * factorial(n - 1);
}
factorial(5)

function factorial(n, total) {
  if (n === 1) return total;
  return factorial(n - 1, n * total);
}
factorial(5, 1)



