---
title: __call call_user_func_array
layout: post
category: lang
author: 夏泽民
---
于是当从db里select出来一堆东西之后，还要逐个循环封装成对象，每一个字段也要实现getField()和getField()方法，写起来还真有点麻烦，感觉就是在做重复性的工作。

那么__get(),__set(),__call(),__callStatic()这几个魔术方法的诞生，就完全解决了这个问题。

__get()和__set()是针对类中属性的而__call()是针对方法的，__callStatic() 是针对静态类的方法。

一、__get()和__set()魔术方法：

当实例化一个对象后，调用类中不存在或者没有权限访问的属性的时候，php会默认调用__get()方法，这样做，不仅可以少些很多代码，让结构更清晰，而且也提供了一条外部访问类的私有成员的一种方法。
<!-- more -->
当对象调用类中一个不存在或者没有权限访问的方法的时候，就会自动调用__call()方法。

PHP 中 call_user_func() 函数 和 call_user_func_array() 函数都是回调函数
它们的第一个参数都是被调用的回调函数，call_user_func() 还可以有多个参数，它们都是回调函数的参数，call_user_func_array() 只有两个参数，第二个参数是要被传入回调函数的数组，这个数组得是索引数组。

所以它们最大的区别就是：

如果传递一个数组给 call_user_func_array()，数组的每个元素的值都会当做一个参数传递给回调函数，数组的 key 回调掉。
如果传递一个数组给 call_user_func()，整个数组会当做一个参数传递给回调函数，数字的 key 还会保留住。
比如有个如下的回调函数：

function test_callback(){
	$args	= func_get_args();
	$num	= func_num_args();
	echo $num."个参数：";
	echo "

<pre>";
	print_r($args);
	echo "</pre>
";
}
然后我们分别使用 call_user_func 函数 和 call_user_func_array 函数进行回调：

$args = array (
	'foo'	=> 'bar',
	'hello'	=> 'world',
	0	=> 123
);

call_user_func('test_callback', $args);
call_user_func_array('test_callback', $args);
最后输出结果：

1 个参数：
Array
(
    [0] => Array
        (
            [foo] => bar
            [hello] => world
            [0] => 123
        )
)

3个参数：
Array
(
    [0] => bar
    [1] => world
    [2] => 123
)


__call()最大的用途就是在类中包含另一个类时
__call()在许多时候只有和call_user_func()或call_user_func_array()搭配使用才能达到最佳效果，即在类中包含另一个对象的实例时，或者需要在一个类中调用另一个类的方法时


 /**
    * 在CALL魔法函数中查找要调用的方法是否存在，如果存在可以直接
    * 调用对应类中的方法，这里用到call_user_func_array()
    */
    function __call($name, $params){
        if(method_exists($this->_image_handle, $name){
            call_user_func_array(array($this->_image_handle, $name), $params);
        } else {
            show_error ('你调用的方法不存在');
        }
 }


 也可以调用类的方法
 call_user_func_array — 调用回调函数，并把一个数组参数作为回调函数的参数
<?php
function foobar($arg, $arg2) {
    echo __FUNCTION__, " got $arg and $arg2\n";
}
class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " got $arg and $arg2\n";
    }
}


// Call the foobar() function with 2 arguments
call_user_func_array("foobar", array("one", "two"));

// Call the $foo->bar() method with 2 arguments
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("three", "four"));
?>
复制代码
以上例程的输出类似于：

foobar got one and two
foo::bar got three and four
