---
title: composer
layout: post
category: php
author: 夏泽民
---
--profile: 显示时间和内存使用信息。

composer 的api
http://getcomposer.org/apidoc/master/Composer/Util/StreamContextFactory.html
http://getcomposer.org/apidoc/master/Composer/Util/RemoteFilesystem.html#method_getRemoteContents
可以用长链接代替file_get_contents 提升速度
http://getcomposer.org/apidoc/master/Composer/Util/Filesystem.html
http://getcomposer.org/apidoc/master/index.html
https://docs.phpcomposer.com/
https://github.com/composer/composer/blob/master/src/Composer/Util/GitHub.php
<!-- more -->
1. 仅更新单个库
只想更新某个特定的库，不想更新它的所有依赖，很简单：

composer update foo/bar
此外，这个技巧还可以用来解决“警告信息问题”。你一定见过这样的警告信息：

Warning: The lock file is not up to date with the latest changes in composer.json, you may be getting outdated dependencies, run update to update them.

擦，哪里出问题了？别惊慌！如果你编辑了composer.json，你应该会看到这样的信息。比如，如果你增加或更新了细节信息，比如库的描述、作者、更多参数，甚至仅仅增加了一个空格，都会改变文件的md5sum。然后Composer就会警告你哈希值和composer.lock中记载的不同。

那么我们该怎么办呢？update命令可以更新lock文件，但是如果仅仅增加了一些描述，应该是不打算更新任何库。这种情况下，只需update nothing：

$ composer update nothing
Loading composer repositories with package information
Updating dependencies
Nothing to install or update
Writing lock file
Generating autoload files
这样一来，Composer不会更新库，但是会更新composer.lock。注意nothing并不是update命令的关键字。只是没有nothing 这个包导致的结果。如果你输入foobar，结果也一样。

如果你用的Composer版本足够新，那么你可以直接使用--lock选项：

composer update --lock
2. 不编辑composer.json的情况下安装库
你可能会觉得每安装一个库都需要修改composer.json太麻烦，那么你可以直接使用require命令。

composer require "foo/bar:1.0.0"
这个方法也可以用来快速地新开一个项目。init命令有--require选项，可以自动编写composer.json：（注意我们使用-n，这样就不用回答问题）

$ composer init --require=foo/bar:1.0.0 -n
$ cat composer.json
{
    "require": {
        "foo/bar": "1.0.0"
    }
}
3. 派生很容易
初始化的时候，你试过create-project命令么？

composer create-project doctrine/orm path 2.2.0
这会自动克隆仓库，并检出指定的版本。克隆库的时候用这个命令很方便，不需要搜寻原始的URI了。

4. 考虑缓存，dist包优先
最近一年以来的Composer会自动存档你下载的dist包。默认设置下，dist包用于加了tag的版本，例如"symfony/symfony": "v2.1.4"，或者是通配符或版本区间，"2.1.*"或">=2.2,<2.3-dev"（如果你使用stable作为你的minimum-stability）。

dist包也可以用于诸如dev-master之类的分支，Github允许你下载某个git引用的压缩包。为了强制使用压缩包，而不是克隆源代码，你可以使用install和update的--prefer-dist选项。

下面是一个例子（我使用了--profile选项来显示执行时间）：

$ composer init --require="twig/twig:1.*" -n --profile
Memory usage: 3.94MB (peak: 4.08MB), time: 0s

$ composer install --profile
Loading composer repositories with package information
Installing dependencies
  - Installing twig/twig (v1.12.2)
    Downloading: 100%

Writing lock file
Generating autoload files
Memory usage: 10.13MB (peak: 12.65MB), time: 4.71s

$ rm -rf vendor

$ composer install --profile
Loading composer repositories with package information
Installing dependencies from lock file
  - Installing twig/twig (v1.12.2)
    Loading from cache

Generating autoload files
Memory usage: 4.96MB (peak: 5.57MB), time: 0.45s

这里，twig/twig:1.12.2的压缩包被保存在~/.composer/cache/files/twig/twig/1.12.2.0-v1.12.2.zip。重新安装包时直接使用。

5. 若要修改，源代码优先
当你需要修改库的时候，克隆源代码就比下载包方便了。你可以使用--prefer-source来强制选择克隆源代码。

composer update symfony/yaml --prefer-source
接下来你可以修改文件：

composer status -v
You have changes in the following dependencies:
/path/to/app/vendor/symfony/yaml/Symfony/Component/Yaml:
    M Dumper.php
当你试图更新一个修改过的库的时候，Composer会提醒你，询问是否放弃修改：

$ composer update
Loading composer repositories with package information
Updating dependencies
  - Updating symfony/symfony v2.2.0 (v2.2.0- => v2.2.0)
    The package has modified files:
    M Dumper.php
    Discard changes [y,n,v,s,?]?
为生产环境作准备
最后提醒一下，在部署代码到生产环境的时候，别忘了优化一下自动加载：

composer dump-autoload --optimize
安装包的时候可以同样使用--optimize-autoloader。不加这一选项，你可能会发现20%到25%的性能损失。
