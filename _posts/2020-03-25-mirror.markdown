---
title: git clone mirror bare
layout: post
category: golang
author: 夏泽民
---
不同之处在于，使用时--mirror，所有引用都按原样复制。这意味着一切：远程跟踪分支，备注，引用/原件/ *（来自filter-branch的备份）。克隆的回购拥有一切。它也设置为远程更新将从原点重新获取所有内容（覆盖复制的引用）。这个想法实际上是为了镜像存储库，以获得一个完整的副本，以便您可以在多个位置托管您的中央存储库，或者备份它。想想只是直接复制回购，除了更优雅的git方式。
<!-- more -->
--mirror

设置源存储库的镜像。这意味着--bare。相比之下--bare，--mirror不仅将源的本地分支映射到目标的本地分支，它还映射所有引用（包括远程分支，注释等）并设置refspec配置，以便所有这些引用都被git remote update目标存储库中的a覆盖。

我的原始答案还注意到裸克隆和普通（非裸）克隆之间的差异 - 非裸克隆设置远程跟踪分支，仅创建本地分支HEAD，而裸克隆直接复制分支。

假设起源有几个分支（master (HEAD)，next，pu和maint），一些标签（v1，v2，v3），一些远程分支机构（devA/master，devB/master），以及其他一些裁判（refs/foo/bar，refs/foo/baz，这可能是笔记，储物箱，其他开发者的命名空间，谁知道）。

git clone origin-url（非裸）：您将得到所有复制的标签，一个本地分支master (HEAD)追踪远程分支origin/master和远程分支origin/next，origin/pu和origin/maint。设置了跟踪分支，这样如果你做了类似的事情git fetch origin，它们就会像你期望的那样被提取。任何远程分支（在克隆的远程中）和其他引用都被完全忽略。

git clone --bare origin-url：您将获得全部复制的标签，地方分支机构master (HEAD)，next，pu，和maint，没有远程跟踪分支。也就是说，所有分支都按原样复制，并且它设置为完全独立，不期望再次获取。任何远程分支（在克隆的远程中）和其他引用都被完全忽略。

git clone --mirror origin-url：这些引用中的每一个都将按原样复制。你会得到所有的标签，地方分支机构master (HEAD)，next，pu，和maint，远程分支机构devA/master和devB/master其他裁判refs/foo/bar和refs/foo/baz。一切都与克隆的遥控器完全一样。设置远程跟踪，以便在运行时，git remote update所有引用都将从原点覆盖，就像您刚删除镜像并重新克隆它一样。正如文档最初所说，它是一面镜子。它应该是功能相同的副本，可与原始版本互换。

方法一、浅拷贝
　　　　不用clone整个记录，只需要clone最近的一次commit，减少下载量，于是有“加速效果”。

 　　　　

　　　　 git clone --depth=1 https://github.com/XXX.git
　　　　 
　　　　 方法二、去除网速限制
　　　　这是大多数人的解法

　　　　步骤1：查ip：

　　　　　　github.global.ssl.fastly.net
　　　　　　github.com
　　　步骤2：改文件：
　　　　Windows上的hosts文件路径在C:\Windows\System32\drivers\etc\hosts

　　　　Linux的hosts文件路径在：sudo vim /etc/hosts

　　　　末尾添加

　　　  　XXX.XXX.XXX.XXX github.global-ssl.fastly.net
　　　  　XXX.XXX.XXX.XXX github.com
　　　　步骤3：刷新DNS
　　　　 Winodws：CMD：ipconfig /flushdns
　　　　 Linux：sudo /etc/init.d/networking restart
 

方式三、借助第三方网站 https://gitee.com


# socks5协议，1080端口修改成自己的本地代理端口
git config --global http.https://github.com.proxy socks5://127.0.0.1:1080
git config --global https.https://github.com.proxy socks5://127.0.0.1:1080
# http协议，1081端口修改成自己的本地代理端口
git config --global http.https://github.com.proxy https://127.0.0.1:1081
git config --global https.https://github.com.proxy https://127.0.0.1:1081


