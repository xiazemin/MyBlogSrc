---
title: kNative
layout: post
category: k8s
author: 夏泽民
---
Tekton组件：提供从源码到镜像的通用构建能力。
Serving组件：管理Serverless工作负载，可以和事件结合并且提供了基于请求驱动的自动扩缩的能力，而且在没有服务需要处理的时候可以缩容到零个实例。
Eventing组件：提供了事件的接入、触发等一整套事件管理的能力。
https://help.aliyun.com/document_detail/121509.html

https://knative.dev/
https://github.com/knative
https://github.com/knative/community
https://github.com/knative/serving
https://github.com/knative/eventing

https://help.aliyun.com/document_detail/86488.html
https://help.aliyun.com/document_detail/89805.html
https://help.aliyun.com/document_detail/121509.html
https://github.com/knative/docs
https://help.aliyun.com/document_detail/86494.html
<!-- more -->
https://www.aliyun.com/product/fc

函数计算（Function Compute）是一个事件驱动的全托管 Serverless 计算服务。您无需管理服务器等基础设施，只需编写代码并上传。函数计算会为您准备好计算资源，并以弹性、可靠的方式运行您的代码。

https://help.aliyun.com/document_detail/52895.html?spm=5176.cnfc.0.0.24c7224en8H4GA

https://help.aliyun.com/learn/learningpath/fc.html?spm=a2c4g.11186623.2.31.4c6229e9nL0h30

https://help.aliyun.com/document_detail/74712.html?spm=a2c4g.11186623.2.16.4c6229e9nL0h30#concept-2259869

https://help.aliyun.com/document_detail/52895.html?spm=5176.228635.1216963.3.3ef55f2cx8fjuG#h2-u65E0u670Du52A1u5668u67B6u67843

https://help.aliyun.com/document_detail/74712.html?spm=5176.228635.1216963.6.3ef55f2cx8fjuG

https://help.aliyun.com/document_detail/52895.html

https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Ffc.console.aliyun.com%2F

https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Ffc.console.aliyun.com%2F

https://github.com/alibaba/serverless-vscode

https://github.com/alibaba/funcraft

Fun 是一个用于支持 Serverless 应用部署的工具，能帮助您便捷地管理函数计算、API 网关、日志服务等资源。它通过一个资源配置文件（template.yml），协助您进行开发、构建、部署操作。

https://github.com/aliyun/fcli

fcli 是阿里云函数计算的命令行工具，可以便捷的管理函数计算中的资源。

https://github.com/aliyun/fc-nodejs-sdk

https://help.aliyun.com/document_detail/52877.html#createservice

https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fide.fc.aliyun.com%2Fcn-hangzhou

https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Ffc.console.aliyun.com%2F

https://github.com/alibaba/serverless-vscode

https://github.com/alibaba/funcraft
https://help.aliyun.com/document_detail/52877.html#createservice

https://github.com/aliyun/fcli

https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fide.fc.aliyun.com%2Fcn-hangzhou

https://help.aliyun.com/document_detail/132044.html
https://help.aliyun.com/document_detail/114020.html
https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Ffnf.console.aliyun.com%2Ffnf%2Fcn-hangzhou%2Fflows

https://help.aliyun.com/document_detail/121509.html
Tekton组件：提供从源码到镜像的通用构建能力。
Serving组件：管理Serverless工作负载，可以和事件结合并且提供了基于请求驱动的自动扩缩的能力，而且在没有服务需要处理的时候可以缩容到零个实例。
Eventing组件：提供了事件的接入、触发等一整套事件管理的能力。

https://knative.dev/
https://github.com/knative
https://help.aliyun.com/document_detail/89805.html
https://help.aliyun.com/document_detail/121509.html
https://github.com/knative/docs

https://github.com/cloudevents/spec
https://www.servicemesher.com/blog/knative-serving/
Knative 是一个基于 Kubernetes 的，用于构建、部署和管理现代 serverless 应用的平台。Getting Started with Knative 是一本由 Pivotal 公司赞助 O’Reilly 出品的电子书，本书中文版由 ServiceMesher 社区自发翻译，这是该系列的第二篇文章。

即便使用无服务器架构，处理和响应 HTTP 请求的能力依然重要。在开始写代码使用事件触发一个函数之前，您需要有地方来运行代码。

本章探讨 Knative Serving 组件，您将了解 Knative Serving 如何管理部署以及为应用和函数提供服务。通过 Serving，您可以轻松地将一个预先构建好的镜像部署到底层 Kubernetes 集群中。（在第三章： Build，您将看到 Knative Build 可以帮助构建镜像以在 Serving 组件中运行）Knative Serving 维护某一时刻的快照，提供自动化伸缩功能 (既支持扩容，也支持缩容直至为零)，以及处理必要的路由和网络编排。

Serving 模块定义一组特定的对象以控制所有功能：Revision（修订版本）、Configuration （配置）、Route（路由）和 Service（服务）。Knative 使用 Kubernetes CRD（自定义资源）的方式实现这些 Kubernetes 对象。

https://www.servicemesher.com/blog/knative-serving/

https://github.com/kubernetes/enhancements/blob/master/keps/sig-apps/sidecarcontainers.md

蚂蚁金服 Service Mesh 大规模落地系列 
https://www.infoq.cn/article/2xj0QNiYurKUKNvpXUPo
https://github.com/mosn/mosn
https://github.com/sofastack/sofa-boot
https://github.com/sofastack/sofa-rpc
https://github.com/cloudevents/spec
使用 Serverless 最直接的因素有以下三点：

首先，“减少运营成本”是大家采用 Serverless 的第一大原因，应用 Serverless 之后，就无需为潜在的流量高峰购买大部分时间处于空闲状态的服务器机架；

第二，“自动按需扩展”，采用 Serverless 之后，可以随时扩展到当前的使用量，消除了意外或者季节性流量高峰的困扰；

第三是“无服务器维护”，由于企业中大部分开发人员都是软件工程师，并不是系统管理员，所以对于软件的修复、保护和管理并不擅长，而使用 Serverless 之后，这些工作都可以交给供应商，他们只需专注于软件开发。

https://mp.weixin.qq.com/s/LuUGZT0m9TsF5xIQUWzrog

https://mp.weixin.qq.com/s/Ex2hky6Lxacjof1xr7FCPw

1. Serverless 将无处不在

任何足够复杂的技术方案都将被实现为全托管、Serverless 化的后端服务。对于任何以 API 作为功能透出方式的平台型产品或组织，例如钉钉、微信、滴滴等，Serverless 都将是其平台战略中最重要的部分。

2. Serverless 将和容器生态有更加紧密的融合

容器在应用的可移植性和交付流程敏捷性上实现了颠覆式创新，它是现代应用构建和交付的一次重要变革。当今，全世界的开发人员都习惯将容器作为应用交付和分发的方式。围绕容器，已经有了完整的应用交付工具链。未来，容器镜像也将成为函数计算等更多 Serverless 应用的分发方式，容器庞大的工具生态和 Serverless 免运维、极致弹性结合在一起，为用户带来全新的体验。

3. Serverless 将通过事件驱动的方式连接云及其生态中的一切

无论是用户自己的应用，还是合作伙伴的服务；无论是 on-premise 环境，还是公有云，所有的事件都能以 Serverless 的方式处理。云服务及其生态将更紧密的连接在一起，成为用户构建弹性高可用应用的基石。

4. Serverless 计算将持续提高计算密度，实现最佳的性能功耗比和性能价格比

Serverless 计算平台一方面要求最高的安全性和最小的资源开销，鱼与熊掌必须兼得；另一方面要保持对原有程序执行方式的兼容，比如支持任意二进制文件，这使得适用于特定语言 VM 的方案不可行。因此 AWS Firecracker，Google gVisor 这样新的轻量虚拟化技术应运而生。以 AWS Firecracker 为例，通过对设备模型的裁剪和 kernel 加载流程的优化，实现了百毫秒的启动速度和极小的内存开销。

实现最佳性能功耗比和性能价格比的另一个重要方向是支持异构硬件。长期以来，X86 处理器的性能越来越难以提升。而在 AI 等对算力要求极高的场景，GPU、FPGA、TPU（Tensor Processing Units） 等架构的处理器的计算效率更具优势。随着异构硬件虚拟化、资源池化、异构资源调度、应用框架支持的成熟，异构硬件的算力也能通过 Serverless 的方式释放，大幅降低用户使用门槛。

https://zhuanlan.zhihu.com/p/147576798
https://github.com/hyj1991/easy-monitor
https://github.com/X-Profiler

云服务器基本指标信息查看及命令
https://mp.weixin.qq.com/s/Bjkda9HWj0bJA2uO6uMCEw

http://nodex.xiaojukeji.com/

