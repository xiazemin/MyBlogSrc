---
title: gomock
layout: post
category: golang
author: 夏泽民
---
1.gomock
https://godoc.org/github.com/golang/mock/gomock

gomock模拟对象的方式是让用户声明一个接口，然后使用gomock提供的mockgen工具生成mock对象代码。要模拟(mock)被测试代码的依赖对象时候，即可使用mock出来的对象来模拟和记录依赖对象的各种行为：比如最常用的返回值，调用次数等等。文字叙述有点抽象，直接上代码：



dick.go中DickFunc依赖外部对象OutterObj，本示例就是说明如何使用gomock框架控制所依赖的对象。

func DickFunc( outterObj MockInterface,para int)(result int){
    fmt.Println("This init DickFunc")
    fmt.Println("call outter.func:")

    return outterObj.OutterFunc(para)
}
mockgen工具命令是：

mockgen -source {source_file}.go -destination {dest_file}.go

比如，本示例即是：

mockgen -source src_mock.go -destination dst_mock.go
<!-- more -->

2.httpexcept
由于go在网络架构上的优秀封装，使得go在很多网络场景被广泛使用，而http协议是其中重要部分，在面对http请求的时候，可以对http的client进行测试，算是mock的特殊应用场景。

看一个简单的示例就轻松的看懂了：

func TestHttp(t *testing.T) {

    handler := FruitServer()

    server := httptest.NewServer(handler)
    defer server.Close()

    e := httpexpect.New(t, server.URL)

    e.GET("/fruits").
        Expect().
        Status(http.StatusOK).JSON().Array().Empty()
}
其中还支持对不同方法(包括Header,Post等)的构造以及返回值Json的自定义，更多细节查看其官网

3.testify
还有一个testify使用起来可以说兼容了《一》中的gocheck和gomock，但是其mock使用稍微有点烦杂，使用继承tetify.Mock(匿名组合)重新实现需要Mock的接口，在这个接口里使用者自己使用Called(反射实现)被Mock的接口。

《单元测试的艺术》中认为stub和mock最大的区别就依赖对象是否和被测对象有交互，而从结果看就是桩对象不会使测试失败，它只是为被测对象提供依赖的对象，并不改变测试结果，而mock则会根据不同的交互测试要求，很可能会更改测试的结果。说了这么多理论，但其实这两种方法都不是割裂的，所以gomock框架除了像其名字一样可以模拟对象以外，还提供了桩对象的功能(stub)。以其实现来说，更像是一个桩对象的注入。但是因为兼容了多个有用的功能，所以其在社区最为火爆。

具体用法可参考其github主页

4.go-sqlmock
还有一种比较常见的场景就是和数据库的交互场景，go-sqlmock是sql模拟（Mock）驱动器，主要用于测试数据库的交互，go-sqlmock提供了完整的事务的执行测试框架，最新的版本(16.11.02)还支持prepare参数化提交和执行的Mock方案。


https://www.cnblogs.com/qcloud1001/p/6645461.html
