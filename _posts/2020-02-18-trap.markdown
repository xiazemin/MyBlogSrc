---
title: ssh +trap 实现跳板机
layout: post
category: linux
author: 夏泽民
---
运行Shell脚本时，如果按下快捷键Ctrl+c或Ctrl+x(x为其他字符)，程序就会终止运行，

在有些情况下，我们并不希望Shell脚本在运行时被信号中断，此时就可以使用屏蔽信号手段，让程序忽略用户输入的信号指令，从而继续运行Shell脚本程序，

简单的说，Linux的信号是由一个整数构成的异步消息，它可以由某个进程发给其他的进程，也可以在用户按下特定键发生某种异常事件时，由系统发给某个进程。

信号列表
在Linux下和洗好相关的常见命令为kill和trap命令，执行kill -l或trap -l命令，可以列出系统支持的各种洗好，多大64个。

[root@www ~]$ 
[root@www ~]$ trap -l
 1) SIGHUP      2) SIGINT       3) SIGQUIT      4) SIGILL      5) SIGTRAP
 6) SIGABRT     7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
1) SIGSTKFLT    17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX    

[root@www ~]$



下列表示Linux系统中重要的信号


信号	说明
HUP(1)	挂起，通常因终端掉线或用户退出而引发
INT(2)	中断，通常因按下 Ctrl+c 组合件而引发
QUIT(3)	退出。通常因按下 Ctrl+ 组合键而引发
ABRT(6)	中止，通常因某些严重的执行错误而引发
ALRM(14)	报警，通常用来处理超时
TERM(15)	终止，通常在系统关机时发送
TSTP(20)	停止进程的运行，但该信号可以被处理和忽略，通常因按下 Ctrl+z 组合键而引发
<!-- more -->
控制信号
trap 命令用于指定在接受到信号后将要采取的行动，信号的相关说明前面已经提到过，trap 命令的一种常见用途是在脚本程序被终端时完成清理工作，或者屏蔽用户非法使用的某些信号，在使用信号名时需要省略 SIG 前缀，可以在命令提示符下输入命令trap -l来查看信号的编号及其关联的名称。

trap 命令的参数分为两部分，前一部分是接收到指定信号时要采取的行动，后一部分是要处理的信号名。

trap命令的使用语法如下:

trap command signal
signal是指接收到的信号，command是指接收到该信号应采取的行动，也就是：

trap '命令;命令' 信号编号
或者

trap '命令;命令' 信号名



Ctrl+c显示指定内容
[root@www ~]$ trap 'echo "<Ctrl+c> Failure."' 2
[root@www ~]$ ^C<Ctrl+c> Failure.

可以使用stty -a列出中断信号与键盘的对应信息，如下：

[root@www ~]$ stty -a
speed 38400 baud; rows 31; columns 95; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>; eol2 = <undef>;
swtch = <undef>; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V;
flush = ^O; min = 1; time = 0;
-parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts -cdtrdsr
-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany
-imaxbel -iutf8
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke
[root@www ~]# 



使Ctrl+c无任何操作
[root@www ~]$ trap "" 2     # 之后使用Ctrl+c快捷键将无任何操作



处理多个信号
[root@www ~]$ trap '' 1 2 3 20 15



处理所有信号
[root@www ~]$ trap ':' `echo {1..64}`



恢复信号
trap ':' 1 2 3 20 15        # 该命令即可恢复指定信号






实现跳板机（实例）
四台机器：

192.168.100.100 - 客户机

192.168.100.101 - 跳板机

192.168.100.102 - Web服务器

192.168.100.151 - Sql服务器



(1) 创建Jump用户(跳板机)

[root@www ~]$ useradd Jump ; echo 123123 | passwd Jump --stdin


(2) Jump发布公钥(跳板机)

[Jump@www ~]$ ssh-keygen        # 回车即可
[Jump@www ~]$ ssh-copy-id 192.168.100.102   # yes后输入密码
[Jump@www ~]$ ssh-copy-id 192.168.100.151   # yes后输入密码


(3) 编写脚本(跳板机)

#! /bin/bash
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   Copyright (C) 2019 All rights reserved.
#
#   FileName      ：jump.sh
#   Author        ：Oliven
#   Email         ：liuhedong135@163.com
#   Date          ：2019-02-12
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


trap 'clear;echo "Not allowed Operation !!!"' 1 2 3 15 20       # "修改信号控制"

function Echo_Choice(){         # 连接后打印的选择条目
    echo "
    >[ Welcome to use the jump mechine ]<

    (1)  Conneciton to the Web Server.
    (2)  Connection to the Sql Server.
    (3)  Conneciton to the Jump Server.
    (4)  Exit.
"
}

function Wait_Info(){           # 连接时打印的显示信息
    clear
    echo -n "Please wait a moment, Connecting ."
    sleep 1
    echo -n "."
    sleep 1
    echo -n "."
    sleep 1
    clear
    echo "The Connection is Successfully."
    sleep 1
}

while true                          # 开始循环
do                          
    clear                           # 首先清个屏
    Echo_Choice                     # 然后选择条目
    read -p ">> " choice            # 获取用户的操作
    case "$choice" in               # case语句进行匹配
    1)
        Wait_Info                   # 连接时打印的显示信息
        ssh root@192.168.100.102    # 连接到Web服务器
    ;;
    2)
        Wait_Info                   # 连接时打印的显示信息
        ssh root@192.168.100.151    # 连接到Sql服务器
    ;;
    3)
        Wait_Info                   # 连接时打印的显示信息
        read -p "Enter The Admin Key: " key     # 等待用户输入跳板机的key
        if [ "$key" = "199907" ]                # 如果key等于199907
        then                                    #         ↓
            clear                               # 首先清个屏，然后直接连接成功
            break                               # 退出该脚本，进入Jump机
        else
            echo "The key is invalid."          # 如果key不对，打印错误信息
            sleep 1                             # 先等待一秒
            continue                            # 然后回到开头的while，重新选择条目
        fi
    ;;
    4)                  
        exit 0                      # 退出该跳板机
    ;;
    *)
        echo "Invalid options."     # 如果选择不为1、2、3、4，即打印的错误信息
    sleep 0.5                       # 然后等待0.5s后，回到开头的while继续循环
    esac
done


(4) 加入配置文件

[root@www ~]$ echo "source /home/Jump/jump.sh" >> /home/Jump/.bash_profile


(5) 测试(客户机)

[root@www ~]$ ssh Jump@192.168.100.101
Jump@192.168.100.101's password: 
# 输入完密码123123之后，出现以下内容即可成功

    >[ Welcome to use the jump mechine ]<

    (1)  Connection to the Web Server.
    (2)  Connection to the Sql Server.
    (3)  Connection to the Jump Server.
    (4)  Exit.

>> 
>> 