---
title: fd_set
layout: post
category: linux
author: 夏泽民
---
（一）fd_set 的实现

       fd_set是一组文件描述字(fd)的集合。 UNIX系统在头文件<sys/select.h>中定义常量FD_FD_SETSIZE，它是数据类型fd_set的描述字数量，其值通常是1024，这样就能表示<1024的fd（fd的最大值必须<FD_SETSIZE），先介绍一下fd_set的实现过程。


define FD_SETSIZE					1024
typedef unsigned long			fd_mask;
#define NBBY    8													/* number of bits in a byte */
#define NFDBITS (sizeof(fd_mask) * NBBY)	/* bits per mask */

#define howmany(x, y)	(((x) + ((y) - 1)) / (y))
typedef struct fd_set
{
	fd_mask fds_bits[howmany(FD_SETSIZE, NFDBITS)];
} fd_set;
#define _fdset_mask(n)  ((fd_mask)1 << ((n) % NFDBITS))
#define FD_SET(n, p)    ((p)->fds_bits[(n)/NFDBITS] |= _fdset_mask(n))
#define FD_CLR(n, p)    ((p)->fds_bits[(n)/NFDBITS] &= ~_fdset_mask(n))
#define FD_ISSET(n, p)  ((p)->fds_bits[(n)/NFDBITS] & _fdset_mask(n))
#define FD_COPY(f, t)   bcopy(f, t, sizeof(*(f)))
#define FD_ZERO(p)      bzero(p, sizeof(*(p)))

（二）fd_set的用法

FD_ZERO(fd_set   *fdset);//将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。   

FD_SET(fd_set   *fdset);用于在文件描述符集合中增加一个新的文件描述符。   

FD_CLR(fd_set   *fdset);用于在文件描述符集合中删除一个文件描述符。   
FD_ISSET(int   fd,fd_set   *fdset);用于测试指定的文件描述符是否在该集合中。

(三)fd_set 应用模型   

static int Func()
{
	int i = 0;
	int rv = -1;
	fd_set readfds;//读集合
	fd_set writefds;//写集合
	struct timeval tv;
	struct timeval *tvp;
	tv.tv_sec = 1;
	tv.tv_usec = 0;
	tvp = &tv;

	while (1) 
	{
		FD_ZERO(&readfds);//清空集合
		FD_ZERO(&writefds);
		FD_SET(tcp_sock, &readfds);//加入服务器集合

		for (i = 0; i < MAX_CLIENTS; i++)
		{
			if (-1 != client_array[i].sock)
			{
				FD_SET(client_array[i].sock, &readfds);//加入客户端集合
			}
		}

		rv = select(FD_SETSIZE, &readfds, &writefds, NULL, tvp);
		if (rv < 0)
		{
			continue;
		}
		
		if (FD_ISSET(tcp_sock, &readfds))
		{
			deal_connect(PORT_NMP);
		}
		
		for (i=0; i<MAX_CLIENTS; i++)
		{
			if (client_array[i].sock != -1 && FD_ISSET(client_array[i].sock, &readfds))
			{
				deal_request(&client_array[i]);
			}
		}
	}
}
<!-- more -->
int   select( 
int   nfds ,
fd_set*   readfds ,
fd_set*   writefds ,
fd_set*   exceptfds ,
const struct timeval*   timeout 
);

nfds：本参数忽略，仅起到兼容作用。
    readfds：（可选）指针，指向一组等待可读性检查的套接口。
    writefds：（可选）指针，指向一组等待可写性检查的套接口。
    exceptfds：（可选）指针，指向一组等待错误检查的套接口。
    timeout：select()最多等待时间，对阻塞操作则为NULL。
    
注释：
    本函数用于确定一个或多个套接口的状态。对每一个套接口，调用者可查询它的可读性、可写性及错误状态信息。用fd_set结构来表示一组等待检查的套接口。在调用返回时，这个结构存有满足一定条件的套接口组的子集，并且select()返回满足条件的套接口的数目。有一组宏可用于对fd_set的操作，这些宏与Berkeley Unix软件中的兼容，但内部的表达是完全不同的。
    readfds参数标识等待可读性检查的套接口。如果该套接口正处于监听listen()状态，则若有连接请求到达，该套接口便被标识为可读，这样一个accept()调用保证可以无阻塞完成。对其他套接口而言，可读性意味着有排队数据供读取。或者对于SOCK_STREAM类型套接口来说，相对于该套接口的虚套接口已关闭，于是recv()或recvfrom()操作均能无阻塞完成。如果虚电路被“优雅地”中止，则recv()不读取数据立即返回；如果虚电路被强制复位，则recv()将以WSAECONNRESET错误立即返回。如果SO_OOBINLINE选项被设置，则将检查带外数据是否存在（参见setsockopt()）。
    writefds参数标识等待可写性检查的套接口。如果一个套接口正在connect()连接（非阻塞），可写性意味着连接顺利建立。如果套接口并未处于connect()调用中，可写性意味着send()和sendto()调用将无阻塞完成。〔但并未指出这个保证在多长时间内有效，特别是在多线程环境中〕。
    exceptfds参数标识等待带外数据存在性或意味错误条件检查的套接口。请注意如果设置了SO_OOBINLINE选项为假FALSE，则只能用这种方法来检查带外数据的存在与否。对于SO_STREAM类型套接口，远端造成的连接中止和KEEPALIVE错误都将被作为意味出错。如果套接口正在进行连接connect()（非阻塞方式），则连接试图的失败将会表现在exceptfds参数中。
    如果对readfds、writefds或exceptfds中任一个组类不感兴趣，可将它置为空NULL。
    在winsock.h头文件中共定义了四个宏来操作描述字集。FD_SETSIZE变量用于确定一个集合中最多有多少描述字（FD_SETSIZE缺省值为64，可在包含winsock.h前用#define FD_SETSIZE来改变该值）。对于内部表示，fd_set被表示成一个套接口的队列，最后一个有效元素的后续元素为INVAL_SOCKET。宏为：
    FD_CLR(s,*set)：从集合set中删除描述字s。
    FD_ISSET(s,*set)：若s为集合中一员，非零；否则为零。
    FD_SET(s,*set)：向集合添加描述字s。
    FD_ZERO(*set)：将set初始化为空集NULL。
    timeout参数控制select()完成的时间。若timeout参数为空指针，则select()将一直阻塞到有一个描述字满足条件。否则的话，timeout指向一个timeval结构，其中指定了select()调用在返回前等待多长时间。如果timeval为{0,0}，则select()立即返回，这可用于探询所选套接口的状态。如果处于这种状态，则select()调用可认为是非阻塞的，且一切适用于非阻塞调用的假设都适用于它。举例来说，阻塞钩子函数不应被调用，且WINDOWS套接口实现不应yield。

返回值：
    select()调用返回处于就绪状态并且已经包含在fd_set结构中的描述字总数；如果超时则返回0；否则的话，返回SOCKET_ERROR错误，应用程序可通过WSAGetLastError()获取相应错误代码。

错误代码：
    WSANOTINITIALISED：在使用此API之前应首先成功地调用WSAStartup()。
    WSAENETDOWN：WINDOWS套接口实现检测到网络子系统失效。
    WSAEINVAL：超时时间值非法。
    WSAEINTR：通过一个WSACancelBlockingCall()来取消一个（阻塞的）调用。
    WSAEINPROGRESS：一个阻塞的WINDOWS套接口调用正在运行中。
    WSAENOTSOCK：描述字集合中包含有非套接口的元素。

范例 :

sock= socket(AF_INET,SOCK_STREAM,0);
 

struct sockaddr_in addr;       //告诉sock 应该再什么地方licence 
memset(&addr,0,sizeof(addr));
addr.sin_family=AF_INET;
addr.sin_port=htons(11111);    //端口啦
addr.sin_addr.s_addr=htonl(INADDR_ANY);        //在本机的所有ip上开始监听

bind (sock,(sockaddr *)&addr,sizeof(addr));//bind....

listen(sock,5);                   //最大5个队列

SOCKET socka;                     //这个用来接受一个连接
fd_set rfd;                      // 描述符集 这个将用来测试有没有一个可用的连接
struct timeval timeout;

FD_ZERO(&rfd);                      //总是这样先清空一个描述符集

timeout.tv_sec=60;                 //等下select用到这个
timeout.tv_usec=0;

u_long ul=1;

ioctlsocket(sock,FIONBIO,&ul);     //用非阻塞的连接

//现在开始用select 
FD_SET(sock,&rfd);     //把sock放入要测试的描述符集 就是说把sock放入了rfd里面 这样下一步调用select对rfd进行测试的时候就会测试sock了(因为我们将sock放入的rdf) 一个描述符集可以包含多个被测试的描述符,
if(select(sock+1,&rfd,0,0, &timeout)==0)  
{   //这个大括号接上面的,返回0那么就超过了timeout预定的时间

//处理....

}

if(FD_ISSET(sock,&rfd))
{       //有一个描述符准备好了

socka=accept(sock,0,0);      //一个用来测试读 一个用来测试写

FD_ZERO(&rfd);

FD_ZERO(&wfd);

FD_SET(socka,&rfd);//把socka放入读描述符集

FD_SET(sockb,&rfd);//把sockb放入读描述符集

FD_SET(socka,&wfd);把socka放入写描述符集

FD_SET(sockb,&wfd);把sockb放入写描述符集

if(SOCKET_ERROR!=select(0,&rfd,&wfd,0,0))       //测试这两个描述符集,永不超时 其中rfd只用来测试读 wfd只用来测试写

{       //没有错误

if(FD_ISSET(socka,&rfd))     //socka可读

{...}

if(FD_ISSET(sockb,&rfd)    //sockb可读

{...}

if(FD_ISSET(socka,&wfd) //socka 可写

{...}

if(FD_ISSET(sockb,&wfd) //sockb可写

{...}

}

 

select()函数主要是建立在fd_set类型的基础上的。fd_set（它比较重要所以先介绍一下）是一组文件描述字(fd)的集合，它用一位来表示一个fd（下面会仔细介绍），对于fd_set类型通过下面四个宏来操作： 

    fd_set set;

    FD_ZERO(&set);       /* 将set清零使集合中不含任何fd*/

    FD_SET(fd, &set);    /* 将fd加入set集合 */

    FD_CLR(fd, &set);    /* 将fd从set集合中清除 */

    FD_ISSET(fd, &set);  /* 测试fd是否在set集合中*/      

过去，一个fd_set通常只能包含<32的fd（文件描述字），因为fd_set其 实只用了一个32位矢量来表示fd；现在,UNIX系统通常会在头文件<sys/select.h>中定义常量FD_SETSIZE，它是数 据类型fd_set的描述字数量，其值通常是1024，这样就能表示<1024的fd。根据fd_set的位矢量实现，我们可以重新理解操作 fd_set的四个宏： 

    fd_set set;

FD_ZERO(&set);      /*将set的所有位置0，如set在内存中占8位则将set置为

00000000*/

FD_SET(0, &set);    /* 将set的第0位置1，如set原来是00000000，则现在变为10000000，这样fd==1的文件描述字就被加进set中了 */

FD_CLR(4, &set);    /*将set的第4位置0，如set原来是10001000，则现在变为10000000，这样fd==4的文件描述字就被从set中清除了 */ 

FD_ISSET(5, &set);  /* 测试set的第5位是否为1，如果set原来是10000100，则返回非零，表明fd==5的文件描述字在set中；否则返回0*/ 

―――――――――――――――――――――――――――――――――――――――

注意fd的最大值必须<FD_SETSIZE。

――――――――――――――――――――――――――――――――――――――― 

select函数的接口比较简单：

    int select(int nfds, fd_set *readset, fd_set *writeset,

fd_set* exceptset, struct timeval *timeout); 

功能：

测试指定的fd可读？可写？有异常条件待处理？     

参数：

nfds    

需要检查的文件描述字个数（即检查到fd_set的第几位），数值应该比三组fd_set中 所含的最大fd值更大，一般设为三组fd_set中所含的最大fd值加1（如在readset,writeset,exceptset中所含最大的fd为 5，则nfds=6，因为fd是从0开始的）。设这个值是为提高效率，使函数不必检查fd_set的所有1024位。

readset   

     用来检查可读性的一组文件描述字。

writeset

     用来检查可写性的一组文件描述字。

exceptset

     用来检查是否有异常条件出现的文件描述字。(注：错误不包括在异常条件之内)

timeout

有三种可能：

1.        timeout=NULL（阻塞：直到有一个fd位被置为1函数才返回）

2.        timeout所指向的结构设为非零时间（等待固定时间：有一个fd位被置为1或者时间耗尽，函数均返回）

3.        timeout所指向的结构，时间设为0（非阻塞：函数检查完每个fd后立即返回） 

返回值：     

返回对应位仍然为1的fd的总数。 

Remarks：

三组fd_set均将某些fd位置0，只有那些可读，可写以及有异常条件待处理的fd位仍然为1。

使用select函数的过程一般是：

先调用宏FD_ZERO将指定的fd_set清零，然后调用宏FD_SET将需要测试的fd加入fd_set，接着调用函数select测试fd_set中的所有fd，最后用宏FD_ISSET检查某个fd在函数select调用后，相应位是否仍然为1。 

      在过去，一个fd_set通常只能包含少于等于32个文件描述符，因为fd_set其实只用了一个int的比特矢量来实现，在大多数情况下，检查 fd_set能包括任意值的文件描述符是系统的责任，但确定你的fd_set到底能放多少有时你应该检查/修改宏FD_SETSIZE的值。*这个值是系 统相关的*，同时检查你的系统中的select() 的man手册。有一些系统对多于1024个文件描述符的支持有问题
      
      
select()调用返回处于就绪状态并且已经包含在fd_set结构中的描述字总数；如果超时则返回0；否则的话，返回SOCKET_ERROR错误，应用程序可通过WSAGetLastError获取相应错误代码。
当返回为-1时，所有描述符集清0。
当返回为0时，表示超时。
当返回为正数时，表示已经准备好的描述符数。
select（）返回后，在3个描述符集里，依旧是1的位就是准备好的描述符。这也就是为什么，每次用select后都要用FD_ISSET的原因。
