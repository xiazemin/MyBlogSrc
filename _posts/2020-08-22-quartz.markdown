---
title: quartz 定时任务
layout: post
category: golang
author: 夏泽民
---
https://github.com/robfig/cron
https://github.com/jakecoffman/cron
saturn

Elastic-Job
https://github.com/apache/shardingsphere-elasticjob
https://blog.csdn.net/fanfan_v5/article/details/61310045
https://www.jianshu.com/p/0dca6ebb9c5a
https://my.oschina.net/u/719192/blog/506062

Quartz是一个完全由Java编写的开源作业调度框架，为在Java应用程序中进行作业调度提供了简单却强大的机制。Quartz允许开发人员根据时间间隔来调度作业。它实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。简单地创建一个org.quarz.Job接口的Java类，Job接口包含唯一的方法：
 
    public void execute(JobExecutionContext context) throws JobExecutionException;
 
在Job接口实现类里面，添加需要的逻辑到execute()方法中。配置好Job实现类并设定好调度时间表，Quartz就会自动在设定的时间调度作业执行execute()。
 
整合了Quartz的应用程序可以重用不同事件的作业，还可以为一个事件组合多个作业。Quartz通过属性文件来配置JDBC事务的数据源、全局作业、触发器侦听器、插件、线程池等等。
 
Quartz是由James House创建并最初于2001年春天被加入sourceforge工程。接下来的几年里，有很多的新特性和版本出现，但是直到项目迁移到新的站点并成为OpenSymphony项目家族的一员，才开始真正启动并受到也有的关注。
 
目前的版本已经是2.0以上，v2.x相对于v1.x有很多新特性出现，并有很多的改动，具体参见Quartz官网上说明。这里介绍的仍然是v1.x（v1.8.6）。

https://blog.csdn.net/w405722907/article/details/72458059
<!-- more -->
https://blog.csdn.net/noaman_wgs/article/details/80984873

https://juejin.im/post/6844904029277913095


1. Quartz 体系结构
Quartz 设计有三个核心类，分别是 Scheduler（调度器）Job（任务）和 Trigger （触发器），它们是我们使用 Quartz 的关键。

1）Job：定义需要执行的任务。该类是一个接口，只定义一个方法 execute(JobExecutionContext context)，在实现类的 execute 方法中编写所需要定时执行的 Job（任务）， JobExecutionContext 类提供了调度应用的一些信息。Job 运行时的信息保存在 JobDataMap 实例中。

2）Trigger：负责设置调度策略。该类是一个接口，描述触发 job 执行的时间触发规则。主要有 SimpleTrigger 和 CronTrigger 这两个子类。当且仅当需调度一次或者以固定时间间隔周期执行调度，SimpleTrigger 是最适合的选择；而 CronTrigger 则可以通过 Cron 表达式定义出各种复杂时间规则的调度方案：如工作日周一到周五的 15：00~16：00 执行调度等。

3）Scheduler：调度器就相当于一个容器，装载着任务和触发器。该类是一个接口，代表一个 Quartz 的独立运行容器， Trigger 和 JobDetail 可以注册到 Scheduler 中， 两者在 Scheduler 中拥有各自的组及名称， 组及名称是 Scheduler 查找定位容器中某一对象的依据， Trigger 的组及名称必须唯一， JobDetail 的组和名称也必须唯一（但可以和 Trigger 的组和名称相同，因为它们是不同类型的）。Scheduler 定义了多个接口方法， 允许外部通过组及名称访问和控制容器中 Trigger 和 JobDetail。

Scheduler 可以将 Trigger 绑定到某一 JobDetail 中， 这样当 Trigger 触发时， 对应的 Job 就被执行。一个 Job 可以对应多个 Trigger， 但一个 Trigger 只能对应一个 Job。可以通过 SchedulerFactory 创建一个 SchedulerFactory 实例。Scheduler 拥有一个 SchedulerContext，它类似于 SchedulerContext，保存着 Scheduler 上下文信息，Job 和 Trigger 都可以访问 SchedulerContext 内的信息。SchedulerContext 内部通过一个 Map，以键值对的方式维护这些上下文数据，SchedulerContext 为保存和获取数据提供了多个 put() 和 getXxx() 的方法。可以通过 Scheduler#getContext() 获取对应的 SchedulerContext 实例。

4）JobDetail：描述 Job 的实现类及其它相关的静态信息，如：Job 名字、描述、关联监听器等信息。Quartz 每次调度 Job 时， 都重新创建一个 Job 实例， 所以它不直接接受一个 Job 的实例，相反它接收一个 Job 实现类，以便运行时通过 newInstance() 的反射机制实例化 Job。

5）ThreadPool：Scheduler 使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提高运行效率。

Job 有一个 StatefulJob 子接口（Quartz 2 后用 @PersistJobDataAfterExecution 注解代替），代表有状态的任务，该接口是一个没有方法的标签接口，其目的是让 Quartz 知道任务的类型，以便采用不同的执行方案。

无状态任务在执行时拥有自己的 JobDataMap 拷贝，对 JobDataMap 的更改不会影响下次的执行。

有状态任务共享同一个 JobDataMap 实例，每次任务执行对 JobDataMap 所做的更改会保存下来，后面的执行可以看到这个更改，也即每次执行任务后都会对后面的执行发生影响。

正因为这个原因，无状态的 Job 能并发执行，而有状态的 StatefulJob 不能并发执行。这意味着如果前次的 StatefulJob 还没有执行完毕，下一次的任务将阻塞等待，直到前次任务执行完毕。有状态任务比无状态任务需要考虑更多的因素，程序往往拥有更高的复杂度，因此除非必要，应该尽量使用无状态的 Job。

6）Listener：Quartz 拥有完善的事件和监听体系，大部分组件都拥有事件，如：JobListener 监听任务执行前事件、任务执行后事件；TriggerListener 监听触发器触发前事件、触发后事件；TriggerListener 监听调度器开始事件、关闭事件等等，可以注册相应的监听器处理感兴趣的事件。

https://segmentfault.com/a/1190000009128277

https://segmentfault.com/a/1190000022552084

https://zhuanlan.zhihu.com/p/46245863
https://zhuanlan.zhihu.com/p/51552691

https://www.cnblogs.com/laoyeye/p/9352002.html
