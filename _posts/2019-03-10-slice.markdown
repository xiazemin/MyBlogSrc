---
title: golang slice append 陷阱
layout: post
category: golang
author: 夏泽民
---
func main() {
    a := make([]int, 2, 2)
    a[0], a[1] = 1, 2

    b := append(a[0:1], 3)
    c := append(a[1:2], 4)

    fmt.Println(b,c)
}

在这个小例子中，原本是希望将a[0:1]作为b的前缀，然后追加上3；将a[1:2]作为c的前缀，然后追加上4。但实际上输出结果并不是原本期望的[1 3] [2 4]，而变成了[1 3] [3 4]。这是为什么呢？
我们知道数据结构中数组是非常高效的，可以直接寻址，但是有个缺陷，难以扩容。所以slice被设计为指向数组的指针，在需要扩容时，会将底层数组上的值复制到一个更大的数组上然后指向这个新数组。
slice有个特性是允许多个slice指向同一个底层数组，这是一个有用的特性，在很多场景下都能通过这个特性实现 no copy 而提高效率。但共享同时意味着不安全。b在追加3时实际上覆盖了a[1]，导致c变成了[3 4]。
怎么解决呢？防止共享数据的出现问题需要注意两条，只读和复制，或者统一归纳为不可变。

	d:=append(a,5) //1,2,5
	e:=append(a,6)//1,2,6
对于len<原始cap的slice的append操作一定要注意，因为即使y：=a也是指向同一个地址，除非改变cap否则不复制
<!-- more -->
写法1，make出一个新slice，然后先copy前缀到新数组上再追加：
func main() {
    a := make([]int, 2, 2)
    a[0], a[1] = 1, 2

    b := make([]int, 1)
    copy(b, a[0:1])
    b = append(b, 3)

    c := make([]int, 1)
    copy(c, a[1:2])
    c = append(c, 4)

    fmt.Println(b, c)
}

写法2，利用go中slice的一个小众语法，a[0:1:1] (源[起始index，终止index，cap终止index])，强迫追加时复制到新数组。
func main() {
    a := make([]int, 2, 2)
    a[0], a[1] = 1, 2

    b := append(a[0:1:1], 3)
    c := append(a[1:2:2], 4)

    fmt.Println(b, c)
}
