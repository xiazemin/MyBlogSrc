---
title: Gradle
layout: post
category: java
author: 夏泽民
---
Gradle的基本组分
1. Project与Task

在Gradle中，每一个待构建的工程是一个Project，构建一个Project需要执行一系列Task，比如编译、打包这些构建过程的子过程都对应着一个Task。具体来说，一个apk文件的构建包含以下Task：Java源码编译、资源文件编译、Lint检查、打包以生成最终的apk文件等等。
2. 插件

插件的核心工作有两个：一是定义Task；而是执行Task。也就是说，我们想让Gradle能正常工作，完成整个构建流程中的一系列Task的执行，必须导入合适的插件，这些插件中定义了构建Project中的一系列Task，并且负责执行相应的Task。

在新建工程的app模块的build.gradle文件的第一行，往往都是如下这句：

apply plugin: 'com.android.application'
这句话的意思就是应用“com.android.application“这个插件来构建app模块，app模块就是Gradle中的一个Project。也就是说，这个插件负责定义并执行Java源码编译、资源文件编译、打包等一系列Task。实际上"com.android.application"整个插件中定义了如下4个顶级任务：

assemble: 构建项目的输出（apk）

check: 进行校验工作

build: 执行assemble任务与check任务

clean: 清除项目的输出

当我们执行一个任务时，会自动执行它所依赖的任务。比如，执行assemble任务会执行assembleDebug任务和assembleRelease任务，这是因为一个Android项目至少要有debug和release这两个版本的输出。
3. Gradle配置文件

存在一个build.gradle文件，代表了app Module的构建脚本，它定义了应用于本模块的构建规则。我们可以看到，工程根目录下也存在一个build.gradle文件，它代表了整个工程的构建，其中定义了适用于这个工程中所有模块的构建规则。

接下来我们介绍一下上图中其他几个Gradle配置文件：

gradle.properties: 从它的名字可以看出，这个文件中定义了一系列“属性”。实际上，这个文件中定义了一系列供build.gradle使用的常量，比如keystore的存储路径、keyalias等等。

gradlew与gradlew.bat: gradlew为Linux下的shell脚本，gradlew.bat是Windows下的批处理文件。gradlew是gradle wrapper的缩写，也就是说它对gradle的命令进行了包装，比如我们进入到指定Module目录并执行“gradlew.bat assemble”即可完成对当前Module的构建（Windows系统下）。

local.properties: 从名字就可以看出来，这个文件中定义了一些本地属性，比如SDK的路径。

settings.gradle: 假如我们的项目包含了不只一个Module时，我们想要一次性构建所有Module以完成整个项目的构建，这时我们需要用到这个文件。比如我们的项目包含了ModuleA和ModuleB这两个模块，则这个文件中会包含这样的语句：include ':ModuleA', ':ModuleB'。
<!-- more -->
Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的领域特定（DSL）语言。Android Studio中新建项目成功后自动下载Gradle。
领域驱动设计（DDD）
Gradle是一个自动化build工具，所以Gradle面对的领域就是自动化构建这一领域。Gradle是按照DDD的思想设计和开发的，所以自动化构建领域里的大部分概念，在Gradle的源代码里都有一个接口或类与之对应。本文介绍对Gradle新手来说最重要的三个领域对象：Project、Task、Action。
Gradle 的编译周期

在解析 Gradle 的编译过程之前我们需要理解在 Gradle 中非常重要的两个对象。Project和Task。

每个项目的编译至少有一个 Project,一个 build.gradle就代表一个project,每个project里面包含了多个task,task 里面又包含很多action，action是一个代码块，里面包含了需要被执行的代码。

在编译过程中， Gradle 会根据 build 相关文件，聚合所有的project和task，执行task 中的 action。因为 build.gradle文件中的task非常多，先执行哪个后执行那个需要一种逻辑来保证。这种逻辑就是依赖逻辑，几乎所有的Task 都需要依赖其他 task 来执行，没有被依赖的task 会首先被执行。所以到最后所有的 Task 会构成一个 有向无环图（DAG Directed Acyclic Graph）的数据结构。

编译过程分为三个阶段：

· 初始化阶段：创建 Project 对象，如果有多个build.gradle，也会创建多个project.

· 配置阶段：在这个阶段，会执行所有的编译脚本，同时还会创建project的所有的task，为后一个阶段做准备。

· 执行阶段：在这个阶段，gradle 会根据传入的参数决定如何执行这些task,真正action的执行代码就在这里.

Project
Project是Gradle最重要的一个领域对象，我们写的build.gradle脚本的全部作用，其实就是配置一个Project实例。在build.gradle脚本里，我们可以隐式的操纵Project实例，比如，apply插件、声明依赖、定义Task等，如下所示：
apply、dependencies、task等实际上是Project的方法，参数是一个代码块。如果需要，也可以显示的操纵Project实例，比如：
1. project.ext.myProp = 'myValue'  

Task
Gradle的Task等同于Ant的Target。在内部，Task被组织成了一个有向无环图（DAG）。Gradle保证Task按照依赖顺序执行，并且每个Task最多只被执行一次。当我们看到下面这段脚本的时候，只要明白两点就可以了：

1. task myTask {  

2.   // ...  

3. }  

1. 给Project添加一个名为“myTask”的任务

2. 用一个闭包来配置这个任务

在闭包中，我们可以充分利用Gradle提供的DSL来配置任务，比如，给任务添加Action。

Action

Task可以包含n个Action，Task提供了doFirst和doLast方法来给自己添加Action，如下所示： 

1. task myTask {  

2.     doFirst {  

3.         println 'hello'  

4.     }  

5.     doLast {  

6.         println 'world'  

7.     }  

8. }  

还提供了<<运算符，如下所示： 

1. task myTask << {  

2.     println 'hello world'  

3. }  
build.gradle脚本的真正作用，就是配置一个Project实例。在执行build脚本之前，Gradle会为我们准备好一个Project实例，执行完脚本之后，Gradle会按照DAG依次执行任务。

Gradle是一个框架，它定义一套自己的游戏规则，必须要遵守它设计的规则。
Gradle中，每一个待编译的工程都叫一个Project。每一个Project在构建的时候都包含一系列的Task。比如一个Android APK的编译可能包含：Java源码编译Task、资源编译Task、JNI编译Task、lint检查Task、打包生成APK的Task、签名Task等。一个具体的编译过程是由一个一个的Task来定义和执行的。

Gradle的生命周期

1. Initialization -初始化阶段

2. Configuration -配置阶段

3. Execution -执行阶段

1.2.1 Initialization - 初始化阶段
初始化阶段会执行项目根目录下的settings.gradle文件，来分析哪些项目参与构建。

所以这个文件里面的内容经常是：
这是告诉Gradle这些项目需要编译，所以我们引入一些开源的项目的时候，需要在这里填上对应的项目名称，来告诉Gradle这些项目需要参与构建。

1.2.2 Configuration - 配置阶段
配置阶段会去加载所有参与构建的项目的build.gradle文件，会将每个build.gradle文件实例化为一个Gradle的project对象。然后分析project之间的依赖关系，下载依赖文件，分析project下的task之间的依赖关系。

他会先执行根目录下的build.gradle文件，一般这个文件的内容如下：

buildscript中的dependencies是说这个项目依赖com.android.tools.build:gradle:2.2.2来构建。
allprojects 后面是一个闭包，相当于我们执行allprojects这个函数，传入了一个闭包作为参数。其实就是对所有的项目进行迭代，指定所有参与构建的项目使用的仓库。

1.2.3 Execution - 执行阶段
执行阶段来执行具体的task。

task是Gradle中的最小执行单元，我们所有的构建，编译，打包，debug，test等都是执行了某一个task，一个project可以有多个task，task之间可以互相依赖。例如我有两个task，taskA和taskB，指定taskA依赖taskB，然后执行taskA，这时会先去执行taskB，taskB执行完毕后在执行taskA。