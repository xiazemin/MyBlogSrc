---
title: autoconf和automake
layout: post
category: linux
author: 夏泽民
---
使用autoconf和automake两个工具来帮助我们自动地生成符合自由软件惯例的Makefile，这样就可以象常见的GNU程序一样，只要使用“./configure”，“make”，“make
 instal”就可以把程序安装到Linux系统中去了。这将特别适合想做开放源代码软件的程序开发人员，又或如果你只是自己写些小的Toy程序，那么这个文章对你也会有很大的帮助。
 
一、Makefile介绍
　　Makefile是用于自动编译和链接的，一个工程有很多文件组成，每一个文件的改变都会导致工程的重新链接，但是不是所有的文件都需要重新编译，Makefile中纪录有文件的信息，在make时会决定在链接的时候需要重新编译哪些文件。
　　Makefile的宗旨就是：让编译器知道要编译一个文件需要依赖其他的哪些文件。当那些依赖文件有了改变，编译器会自动的发现最终的生成文件已经过时，而重新编译相应的模块。
　　Makefile的基本结构不是很复杂，但当一个程序开发人员开始写Makefile时，经常会怀疑自己写的是否符合惯例，而且自己写的Makefile经常和自己的开发环境相关联，当系统环境变量或路径发生了变化后，Makefile可能还要跟着修改。这样就造成了手工书写Makefile的诸多问题，automake恰好能很好地帮助我们解决这些问题。
　　使用automake，程序开发人员只需要写一些简单的含有预定义宏的文件，由autoconf根据一个宏文件生成configure，由automake根据另一个宏文件生成Makefile.in，再使用configure依据Makefile.in来生成一个符合惯例的Makefile。下面我们将详细介绍Makefile的automake生成方法。
 
二、使用的环境
　　本文所提到的程序是基于Linux发行版本：Fedora Core release 1，它包含了我们要用到的autoconf，automake。
 
三、从helloworld入手
　　我们从大家最常使用的例子程序helloworld开始。
　　下面的过程如果简单地说来就是：
　　新建三个文件：　　helloworld.c　　configure.in　　Makefile.am
　　然后执行：autoscan; aclocal; autoconf; automake --add-missing; ./configure; make; ./helloworld;
　　就可以看到Makefile被产生出来，而且可以将helloworld.c编译通过。很简单吧，几条命令就可以做出一个符合惯例的Makefile，感觉如何呀。现在开始介绍详细的过程：
 
1、建目录
　　在你的工作目录下建一个helloworld目录，我们用它来存放helloworld程序及相关文件，如在/home/my/build下：
      $ mkdir helloword      $ cd helloworld

2、 helloworld.c
　　然后用你自己最喜欢的编辑器写一个hellowrold.c文件，如命令：vi helloworld.c。使用下面的代码作为helloworld.c的内容。
　　int main(int argc, char** argv)　　{        　　printf("Hello, Linux World! ");        　　return 0;　　} 　　完成后保存退出。现在在helloworld目录下就应该有一个你自己写的helloworld.c了。
 
3、生成configure
　　我们使用autoscan命令来帮助我们根据目录下的源代码生成一个configure.in的模板文件。
　　命令：
　　$ autoscan 　　$ ls 　　configure.scan helloworld.c 
　　执行后在hellowrold目录下会生成一个文件：configure.scan，我们可以拿它作为configure.in的蓝本。
4，生成configure.in
　  现在将configure.scan改名为configure.in，并且编辑它，按下面的内容修改，去掉无关的语句：
 
 ============================configure.in内容开始========================================= # -*- Autoconf -*- # Process this file with autoconf to produce a configure script.  AC_INIT(helloworld.c) AM_INIT_AUTOMAKE(helloworld, 1.0)  # Checks for programs. AC_PROG_CC  # Checks for libraries.  # Checks for header files.  # Checks for typedefs, structures, and compiler characteristics.  # Checks for library functions. AC_OUTPUT(Makefile) ============================configure.in内容结束=========================================

 
5 执行aclocal和autoconf
　　然后执行命令aclocal和autoconf，分别会产生aclocal.m4及configure两个文件：

$ aclocal 　　$ls 　　aclocal.m4 configure.in helloworld.c 　　$ autoconf 　　$ ls 　　aclocal.m4 autom4te.cache configure configure.in helloworld.c
 
　　大家可以看到configure.in内容是一些宏定义，这些宏经autoconf处理后会变成检查系统特性、环境变量、软件必须的参数的shell脚本。
　　autoconf 是用来生成自动配置软件源代码脚本（configure）的工具。configure脚本能独立于autoconf运行，且在运行的过程中，不需要用户的干预。
　　要生成configure文件，你必须告诉autoconf如何找到你所用的宏。方式是使用aclocal程序来生成你的aclocal.m4。
　　aclocal根据configure.in文件的内容，自动生成aclocal.m4文件。aclocal是一个perl脚本程序，它的定义是：“aclocal - create aclocal.m4 by scanning configure.ac”。
　　autoconf从configure.in这个列举编译软件时所需要各种参数的模板文件中创建configure。
　　autoconf需要GNU m4宏处理器来处理aclocal.m4，生成configure脚本。
　　m4是一个宏处理器。将输入拷贝到输出，同时将宏展开。宏可以是内嵌的，也可以是用户定义的。除了可以展开宏，m4还有一些内建的函数，用来引用文件，执行命令，整数运算，文本操作，循环等。m4既可以作为编译器的前端，也可以单独作为一个宏处理器.
 
6、新建Makefile.am
　　新建Makefile.am文件，命令：$ vi Makefile.am
　　内容如下:

AUTOMAKE_OPTIONS=foreign bin_PROGRAMS=helloworld helloworld_SOURCES=helloworld.c 

　　automake会根据你写的Makefile.am来自动生成Makefile.in。Makefile.am中定义的宏和目标,会指导automake生成指定的代码。例如，宏bin_PROGRAMS将导致编译和连接的目标被生成。
7、运行automake
　　命令：

 $ automake --add-missing configure.in: installing `./install-sh' configure.in: installing `./mkinstalldirs' configure.in: installing `./missing' Makefile.am: installing `./depcomp'

　　automake会根据Makefile.am文件产生一些文件，包含最重要的Makefile.in。
 
8、执行configure生成Makefile

 $ ./configure checking for a BSD-compatible install /usr/bin/install -c checking whether build environment is sane yes checking for gawk gawk checking whether make sets $(MAKE) yes checking for gcc gcc checking for C compiler default output a.out checking whether the C compiler works yes checking whether we are cross compiling no checking for suffix of executables checking for suffix of object files o checking whether we are using the GNU C compiler yes checking whether gcc accepts -g yes checking for gcc option to accept ANSI C none needed checking for style of include used by make GNU checking dependency style of gcc gcc3 configure: creating ./config.status config.status: creating Makefile config.status: executing depfiles commands $ ls -l Makefile -rw-rw-r-- 1 yutao yutao 15035 Oct 15 10:40 Makefile

你可以看到，此时Makefile已经产生出来了。
 
9、使用Makefile编译代码

 $ make if gcc -DPACKAGE_NAME="" -DPACKAGE_TARNAME="" -DPACKAGE_VERSION="" -  DPACKAGE_STRING="" -DPACKAGE_BUGREPORT="" -DPACKAGE="helloworld" -DVERSION="1.0"  -I. -I. -g -O2 -MT helloworld.o -MD -MP -MF ".deps/helloworld.Tpo" -c -o helloworld.o `test -f 'helloworld.c' || echo './'`helloworld.c; then mv -f ".deps/helloworld.Tpo" ".deps/helloworld.Po"; else rm -f ".deps/helloworld.Tpo"; exit 1; fi gcc -g -O2 -o helloworld helloworld.o
10， 运行helloworld

$ ./helloworld Hello, Linux World! 

　　这样helloworld就编译出来了，你如果按上面的步骤来做的话，应该也会很容易地编译出正确的helloworld文件。你还可以试着使用一些其他的make命令，如make clean，make install，make dist，看看它们会给你什么样的效果。感觉如何？自己也能写出这么专业的Makefile，老板一定会对你刮目相看。
 
四、深入浅出
　　针对上面提到的各个命令，我们再做些详细的介绍。
 
1、 autoscan
　　autoscan是用来扫描源代码目录生成configure.scan文件的。autoscan可以用目录名做为参数，但如果你不使用参数的话，那么autoscan将认为使用的是当前目录。autoscan将扫描你所指定目录中的源文件，并创建configure.scan文件。
 
2、 configure.scan
　　configure.scan包含了系统配置的基本选项，里面都是一些宏定义。我们需要将它改名为configure.in

3、 aclocal
　　aclocal是一个perl 脚本程序。aclocal根据configure.in文件的内容，自动生成aclocal.m4文件。aclocal的定义是：“aclocal - create aclocal.m4 by scanning configure.ac”。
 
4、 autoconf
　　使用autoconf，根据configure.in和aclocal.m4来产生configure文件。configure是一个脚本，它能设置源程序来适应各种不同的操作系统平台，并且根据不同的系统来产生合适的Makefile，从而可以使你的源代码能在不同的操作系统平台上被编译出来。
　　configure.in文件的内容是一些宏，这些宏经过autoconf处理后会变成检查系统特性、环境变量、软件必须的参数的shell脚本。configure.in文件中的宏的顺序并没有规定，但是你必须在所有宏的最前面和最后面分别加上AC_INIT宏和AC_OUTPUT宏。
　　在configure.ini中：
　　#号表示注释，这个宏后面的内容将被忽略。
　　AC_INIT(FILE)　这个宏用来检查源代码所在的路径。
　　AM_INIT_AUTOMAKE(PACKAGE, VERSION)　这个宏是必须的，它描述了我们将要生成的软件包的名字及其版本号：PACKAGE是软件包的名字，VERSION是版本号。当你使用make dist命令时，它会给你生成一个类似helloworld-1.0.tar.gz的软件发行包，其中就有对应的软件包的名字和版本号。
　　AC_PROG_CC　　这个宏将检查系统所用的C编译器。
　　AC_OUTPUT(FILE)　　这个宏是我们要输出的Makefile的名字。
　　我们在使用automake时，实际上还需要用到其他的一些宏，但我们可以用aclocal来帮我们自动产生。执行aclocal后我们会得到aclocal.m4文件。
　　产生了configure.in和aclocal.m4 
两个宏文件后，我们就可以使用autoconf来产生configure文件了。
 
5、 Makefile.am
　　Makefile.am是用来生成Makefile.in的，需要你手工书写。Makefile.am中定义了一些内容：
　　AUTOMAKE_OPTIONS　　这个是automake的选项。在执行automake时，它会检查目录下是否存在标准GNU软件包中应具备的各种文件，例如AUTHORS、ChangeLog、NEWS等文件。我们将其设置成foreign时，automake会改用一般软件包的标准来检查。
　　bin_PROGRAMS　　这个是指定我们所要产生的可执行文件的文件名。如果你要产生多个可执行文件，那么在各个名字间用空格隔开。
　　helloworld_SOURCES　　这个是指定产生“helloworld”时所需要的源代码。如果它用到了多个源文件，那么请使用空格符号将它们隔开。比如需要helloworld.h，helloworld.c那么请写成helloworld_SOURCES= helloworld.h helloworld.c。
　　如果你在bin_PROGRAMS定义了多个可执行文件，则对应每个可执行文件都要定义相对的filename_SOURCES。
 
6、 automake
　　我们使用automake，根据configure.in和Makefile.am来产生Makefile.in。
　　选项--add-missing的定义是“add missing standard files to package”，它会让automake加入一个标准的软件包所必须的一些文件。
　　我们用automake产生出来的Makefile.in文件是符合GNU Makefile惯例的，接下来我们只要执行configure这个shell脚本就可以产生合适的Makefile
文件了。
　　
7、 Makefile
　　在符合GNU Makefiel惯例的Makefile中，包含了一些基本的预先定义的操作：
　　make　　根据Makefile编译源代码，连接，生成目标文件，可执行文件。
　　make clean　　清除上次的make命令所产生的object文件（后缀为“.o”的文件）及可执行文件。
　　make install　　将编译成功的可执行文件安装到系统目录中，一般为/usr/local/bin目录。
　　make dist　　产生发布软件包文件（即distribution package）。这个命令将会将可执行文件及相关文件打包成一个tar.gz压缩的文件用来作为发布软件的软件包。它会在当前目录下生成一个名字类似“PACKAGE-VERSION.tar.gz”的文件。PACKAGE和VERSION，是我们在configure.in中定义的AM_INIT_AUTOMAKE(PACKAGE,
 VERSION)。
　　make distcheck　　生成发布软件包并对其进行测试检查，以确定发布包的正确性。这个操作将自动把压缩包文件解开，然后执行configure命令，并且执行make，来确认编译不出现错误，最后提示你软件包已经准备好，可以发布了。　　make distclean　　类似make clean，但同时也将configure生成的文件全部删除掉，包括Makefile。
<!-- more -->
<img src="{{site.url}}{{site.baseurl}}/img/autoconf.png"/>
无论是在Linux还是在Unix环境中，make都是一个非常重要的编译命令。不管是自己进行项目开发还是安装应用软件，我们都经常要用到make或 make install。利用make工具，我们可以将大型的开发项目分解成为多个更易于管理的模块，对于一个包括几百个源文件的应用程序，使用make和 makefile工具就可以轻而易举的理顺各个源文件之间纷繁复杂的相互关系。

但是如果通过查阅make的帮助文档来手工编写Makefile,对任何程序员都是一场挑战。幸而有GNU 提供的Autoconf及Automake这两套工具使得编写makefile不再是一个难题。

本文将介绍如何利用 GNU Autoconf 及 Automake 这两套工具来协助我们自动产生 Makefile文件，并且让开发出来的软件可以像大多数源码包那样，只需"./configure", "make","make install" 就可以把程序安装到系统中。

模拟需求
假设源文件按如下目录存放，如图1所示，运用autoconf和automake生成makefile文件。

图 1文件目录结构
图 1文件目录结构
假设src是我们源文件目录，include目录存放其他库的头文件，lib目录存放用到的库文件，然后开始按模块存放，每个模块都有一个对应的目录，模块下再分子模块，如apple、orange。每个子目录下又分core，include，shell三个目录，其中core和shell目录存放.c文件，include的存放.h文件，其他类似。

样例程序功能：基于多线程的数据读写保护（联系作者获取整个autoconf和automake生成的Makefile工程和源码，E-mail：normalnotebook@126.com）。

工具简介
所必须的软件：autoconf/automake/m4/perl/libtool（其中libtool非必须）。

autoconf是一个用于生成可以自动地配置软件源码包，用以适应多种UNIX类系统的shell脚本工具，其中autoconf需要用到 m4，便于生成脚本。automake是一个从Makefile.am文件自动生成Makefile.in的工具。为了生成Makefile.in，automake还需用到perl，由于automake创建的发布完全遵循GNU标准，所以在创建中不需要perl。libtool是一款方便生成各种程序库的工具。

目前automake支持三种目录层次：flat、shallow和deep。

1)	flat指的是所有文件都位于同一个目录中。

就是所有源文件、头文件以及其他库文件都位于当前目录中，且没有子目录。Termutils就是这一类。

2)	shallow指的是主要的源代码都储存在顶层目录，其他各个部分则储存在子目录中。

就是主要源文件在当前目录中，而其它一些实现各部分功能的源文件位于各自不同的目录。automake本身就是这一类。

3)	deep指的是所有源代码都被储存在子目录中；顶层目录主要包含配置信息。

就是所有源文件及自己写的头文件位于当前目录的一个子目录中，而当前目录里没有任何源文件。 GNU cpio和GNU tar就是这一类。

flat类型是最简单的，deep类型是最复杂的。不难看出，我们的模拟需求正是基于第三类deep型，也就是说我们要做挑战性的事情：)。注：我们的测试程序是基于多线程的简单程序。

生成 Makefile 的来龙去脉
首先进入 project 目录，在该目录下运行一系列命令，创建和修改几个文件，就可以生成符合该平台的Makefile文件，操作过程如下：

1)	运行autoscan命令

2)	将configure.scan 文件重命名为configure.in，并修改configure.in文件

3)	在project目录下新建Makefile.am文件，并在core和shell目录下也新建makefile.am文件

4)	在project目录下新建NEWS、 README、 ChangeLog 、AUTHORS文件

5)	将/usr/share/automake-1.X/目录下的depcomp和complie文件拷贝到本目录下

6)	运行aclocal命令

7)	运行autoconf命令

8)	运行automake -a命令

9)	运行./confiugre脚本

可以通过图2看出产生Makefile的流程，如图所示：

图 2生成Makefile流程图
图 2生成Makefile流程图
Configure.in的八股文
当我们利用autoscan工具生成confiugre.scan文件时，我们需要将confiugre.scan重命名为confiugre.in文件。confiugre.in调用一系列autoconf宏来测试程序需要的或用到的特性是否存在，以及这些特性的功能。

下面我们就来目睹一下confiugre.scan的庐山真面目：
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)
AC_INIT(FULL-PACKAGE-NAME, VERSION, BUG-REPORT-ADDRESS)
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADER([config.h])
# Checks for programs.
AC_PROG_CC
# Checks for libraries.
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [main])
# Checks for header files.
# Checks for typedefs, structures, and compiler characteristics.
# Checks for library functions.
AC_OUTPUT
每个configure.scan文件都是以AC_INIT开头，以AC_OUTPUT结束。我们不难从文件中看出confiugre.in文件的一般布局：
AC_INIT
 测试程序
 测试函数库
 测试头文件
 测试类型定义
 测试结构
 测试编译器特性
 测试库函数
 测试系统调用
AC_OUTPUT
上面的调用次序只是建议性质的，但我们还是强烈建议不要随意改变对宏调用的次序。

现在就开始修改该文件：
$mv configure.scan configure.in
$vim configure.in
修改后的结果如下：

#                                -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
 
AC_PREREQ(2.59)
AC_INIT(test, 1.0, normalnotebook@126.com)
AC_CONFIG_SRCDIR([src/ModuleA/apple/core/test.c])
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(test,1.0)
 
# Checks for programs.
AC_PROG_CC
# Checks for libraries.
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [pthread_rwlock_init])
AC_PROG_RANLIB
# Checks for header files.
# Checks for typedefs, structures, and compiler characteristics.
# Checks for library functions.
AC_OUTPUT([Makefile
        src/lib/Makefile
        src/ModuleA/apple/core/Makefile
        src/ModuleA/apple/shell/Makefile
        ])
其中要将AC_CONFIG_HEADER([config.h])修改为：AM_CONFIG_HEADER(config.h), 并加入AM_INIT_AUTOMAKE(test,1.0)。由于我们的测试程序是基于多线程的程序，所以要加入AC_PROG_RANLIB，不然运行automake命令时会出错。在AC_OUTPUT输入要创建的Makefile文件名。

由于我们在程序中使用了读写锁，所以需要对库文件进行检查，即AC_CHECK_LIB([pthread], [main])，该宏的含义如下：


其中，LIBS是link的一个选项，详细请参看后续的Makefile文件。由于我们在程序中使用了读写锁，所以我们测试pthread库中是否存在pthread_rwlock_init函数。

由于我们是基于deep类型来创建makefile文件，所以我们需要在四处创建Makefile文件。即：project目录下，lib目录下，core和shell目录下。

Autoconf提供了很多内置宏来做相关的检测，限于篇幅关系，我们在这里对其他宏不做详细的解释，具体请参看参考文献1和参考文献2，也可参看autoconf信息页。

实战Makefile.am
Makefile.am是一种比Makefile更高层次的规则。只需指定要生成什么目标，它由什么源文件生成，要安装到什么目录等构成。

表一列出了可执行文件、静态库、头文件和数据文件，四种书写Makefile.am文件个一般格式。

表 1Makefile.am一般格式
表 1Makefile.am一般格式
对于可执行文件和静态库类型，如果只想编译，不想安装到系统中，可以用noinst_PROGRAMS代替bin_PROGRAMS，noinst_LIBRARIES代替lib_LIBRARIES。

Makefile.am还提供了一些全局变量供所有的目标体使用：

表 2 Makefile.am中可用的全局变量
表 2 Makefile.am中可用的全局变量
在Makefile.am中尽量使用相对路径，系统预定义了两个基本路径：

表 3Makefile.am中可用的路径变量
表 3Makefile.am中可用的路径变量
在上文中我们提到过安装路径，automake设置了默认的安装路径：

1)	标准安装路径

默认安装路径为：$(prefix) = /usr/local，可以通过./configure --prefix=<new_path>的方法来覆盖。

其它的预定义目录还包括：bindir = $(prefix)/bin, libdir = $(prefix)/lib, datadir = $(prefix)/share, sysconfdir = $(prefix)/etc等等。

2)	定义一个新的安装路径

比如test, 可定义testdir = $(prefix)/test, 然后test_DATA =test1 test2，则test1，test2会作为数据文件安装到$(prefix)/ /test目录下。

我们首先需要在工程顶层目录下（即project/）创建一个Makefile.am来指明包含的子目录：
SUBDIRS=src/lib src/ModuleA/apple/shell src/ModuleA/apple/core 
CURRENTPATH=$(shell /bin/pwd)
INCLUDES=-I$(CURRENTPATH)/src/include -I$(CURRENTPATH)/src/ModuleA/apple/include 
export INCLUDES
由于每个源文件都会用到相同的头文件，所以我们在最顶层的Makefile.am中包含了编译源文件时所用到的头文件，并导出，见蓝色部分代码。

我们将lib目录下的swap.c文件编译成libswap.a文件，被apple/shell/apple.c文件调用，那么lib目录下的Makefile.am如下所示：
noinst_LIBRARIES=libswap.a
libswap_a_SOURCES=swap.c
INCLUDES=-I$(top_srcdir)/src/includ
细心的读者可能就会问：怎么表1中给出的是bin_LIBRARIES，而这里是noinst_LIBRARIES？这是因为如果只想编译，而不想安装到系统中，就用noinst_LIBRARIES代替bin_LIBRARIES，对于可执行文件就用noinst_PROGRAMS代替bin_PROGRAMS。对于安装的情况，库将会安装到$(prefix)/lib目录下，可执行文件将会安装到${prefix}/bin。如果想安装该库，则Makefile.am示例如下：
bin_LIBRARIES=libswap.a
libswap_a_SOURCES=swap.c
INCLUDES=-I$(top_srcdir)/src/include
swapincludedir=$(includedir)/swap
swapinclude_HEADERS=$(top_srcdir)/src/include/swap.h
最后两行的意思是将swap.h安装到${prefix}/include /swap目录下。

接下来，对于可执行文件类型的情况，我们将讨论如何写Makefile.am？对于编译apple/core目录下的文件，我们写成的Makefile.am如下所示：
noinst_PROGRAMS=test
test_SOURCES=test.c 
test_LDADD=$(top_srcdir)/src/ModuleA/apple/shell/apple.o $(top_srcdir)/src/lib/libswap.a 
test_LDFLAGS=-D_GNU_SOURCE
DEFS+=-D_GNU_SOURCE
#LIBS=-lpthread
由于我们的test.c文件在链接时，需要apple.o和libswap.a文件，所以我们需要在test_LDADD中包含这两个文件。对于Linux下的信号量/读写锁文件进行编译，需要在编译选项中指明-D_GNU_SOURCE。所以在test_LDFLAGS中指明。而test_LDFLAGS只是链接时的选项，编译时同样需要指明该选项，所以需要DEFS来指明编译选项，由于DEFS已经有初始值，所以这里用+=的形式指明。从这里可以看出，Makefile.am中的语法与Makefile的语法一致，也可以采用条件表达式。如果你的程序还包含其他的库，除了用AC_CHECK_LIB宏来指明外，还可以用LIBS来指明。

如果你只想编译某一个文件，那么Makefile.am如何写呢？这个文件也很简单，写法跟可执行文件的差不多，如下例所示：
noinst_PROGRAMS=apple
apple_SOURCES=apple.c
DEFS+=-D_GNU_SOURCE
我们这里只是欺骗automake，假装要生成apple文件，让它为我们生成依赖关系和执行命令。所以当你运行完automake命令后，然后修改apple/shell/下的Makefile.in文件，直接将LINK语句删除，即：
…….
clean-noinstPROGRAMS:
    -test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
apple$(EXEEXT): $(apple_OBJECTS) $(apple_DEPENDENCIES) 
    @rm -f apple$(EXEEXT)
#$(LINK) $(apple_LDFLAGS) $(apple_OBJECTS) $(apple_LDADD) $(LIBS)
…….


在GNU的世界里，存在Automake这样的工具进行自动生成Makefile文件，automake是由Perl语言编写的，必须与GNU autoconf一并使用，具体的生成过程请参看GNU automake的wikipedia中的右下角的图，地址如下：http://en.wikipedia.org/wiki/Automake，由此图可看到使用自动生成Makefile的工具使用的流程，步骤主要如下：

1、autoscan 
2、修改生成的configure.scan为configure.in 
3、aclocal
4、autoheader
5、autoconf
6、创建Makefile.am并进行具体内容的写入
7、automake
8、automake
9、./configure生成Makefile
10、make得到可执行程序
光空说太抽象了，那么来一个简单的例子吧，
0、创建一个printf("Hello world!\n")的小程序，创建目录hello后创建hello.c，
ufo@ufo:~/hello$ ls
hello.c
那么下一步即可开始automake的工作了，
1、使用autoscan生成configure.scan
ufo@ufo:~/hello$ autoscan 
ufo@ufo:~/hello$ ls
autoscan.log  configure.scan  hello.c
ufo@ufo:~/hello$ aclocal
aclocal: `configure.ac' or `configure.in' is required
2、在上一步中直接执行aclocal时出现以上的提示，那么就要将生成的configure.scan修改为configure.ac或configure.in再进行aclocal的执行；
ufo@ufo:~/hello$ mv configure.scan configure.in 
ufo@ufo:~/hello$ ls
autoscan.log  configure.in  hello.c
3、执行aclocal
ufo@ufo:~/hello$ aclocal
ufo@ufo:~/hello$ ls
autom4te.cache  autoscan.log  configure.in  hello.c
4、执行autoheader
ufo@ufo:~/hello$ ls
autom4te.cache  autoscan.log  config.h.in  configure.in  hello.c
5、执行autoconf
ufo@ufo:~/hello$ autoconf 
ufo@ufo:~/hello$ ls
autom4te.cache  autoscan.log  config.h.in  configure  configure.in  hello.c
6、创建Makefile.am
ufo@ufo:~/hello$ vim Makefile.am 
ufo@ufo:~/hello$ cat Makefile.am 
bin_PROGRAMS=hello
hello_SOURCES=hello.c
关于Makefile.am中的具体内容的意思是说生成的可执行文件的名称为hello,对应的源代码为hello.c。
7、执行automake
ufo@ufo:~/hello$ automake
configure.in: no proper invocation of AM_INIT_AUTOMAKE was found.
configure.in: You should verify that configure.in invokes AM_INIT_AUTOMAKE,
configure.in: that aclocal.m4 is present in the top-level directory,
configure.in: and that aclocal.m4 was recently regenerated (using aclocal).
automake: no `Makefile.am' found for any configure output
automake: Did you forget AC_CONFIG_FILES([Makefile]) in configure.in?
这时出错了，是说configure.in文件中的AM_INIT_AUTOMAKE没有找到，只有修改configure.in文件后再从第三步进行重新执行，configure.in中的AC_INIT行下添加AM_INIT_AUTOMAKE(hello,1.0)，格式为AM_INIT_AUTOMAKE(package,version)，再修改AC_OUTPUT为AC_OUTPUT(Makefile)；
修改完configure.in文件后，再次执行2～7;
8、执行automake
ufo@ufo:~/hello$ automake
configure.in:6: required file `./install-sh' not found
configure.in:6:   `automake --add-missing' can install `install-sh'
configure.in:6: required file `./missing' not found
configure.in:6:   `automake --add-missing' can install `missing'
Makefile.am: required file `./INSTALL' not found
Makefile.am:   `automake --add-missing' can install `INSTALL'
Makefile.am: required file `./NEWS' not found
Makefile.am: required file `./README' not found
Makefile.am: required file `./AUTHORS' not found
Makefile.am: required file `./ChangeLog' not found
Makefile.am: required file `./COPYING' not found
Makefile.am:   `automake --add-missing' can install `COPYING'
Makefile.am: required file `./depcomp' not found
Makefile.am:   `automake --add-missing' can install `depcomp'
按照提示创建缺少的文件,
ufo@ufo:~/hello$ touch NEWS README AUTHORS ChangeLog
再执行: ufo@ufo:~/hello$ automake --add-missing
没有出错的情况下再次执行automake;
ufo@ufo:~/hello$ ls
aclocal.m4      ChangeLog     configure.in  INSTALL      missing
AUTHORS         config.h.in   COPYING       install-sh   NEWS
autom4te.cache  config.h.in~  depcomp       Makefile.am  README
autoscan.log    configure     hello.c       Makefile.in
此时已经生成了生成Makefile文件的cinfigure脚本；
9、./configure生成Makefile
ufo@ufo:~/hello$ ls Makefile
Makefile
10、make得到可执行程序
ufo@ufo:~/hello$ make
make  all-am
make[1]: 正在进入目录 `/home/ufo/hello'
gcc -DHAVE_CONFIG_H -I.     -g -O2 -MT hello.o -MD -MP -MF .deps/hello.Tpo -c -o hello.o hello.c
mv -f .deps/hello.Tpo .deps/hello.Po
gcc  -g -O2   -o hello hello.o  
make[1]:正在离开目录 `/home/ufo/hello'
ufo@ufo:~/hello$ ls
aclocal.m4      config.h       configure     hello.c     Makefile.am  stamp-h1
AUTHORS         config.h.in    configure.in  hello.o     Makefile.in
autom4te.cache  config.h.in~   COPYING       INSTALL     missing
autoscan.log    config.log     depcomp       install-sh  NEWS
ChangeLog       config.status  hello         Makefile    README
ufo@ufo:~/hello$ ./hello 
Hello World!