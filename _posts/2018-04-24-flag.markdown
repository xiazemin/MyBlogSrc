---
title: flag
layout: post
category: golang
author: 夏泽民
---
<!-- more -->
 一、命令行语法
命令行语法主要有以下几种形式：

cmd -flag       // 只支持bool类型
cmd -flag=xxx
cmd -flag xxx   // 只支持非bool类型

以上语法对于一个或两个‘－’号是一样的，即

cmd -flag xxx （使用空格，一个 - 符号）
cmd --flag xxx （使用空格，两个 - 符号）
cmd -flag=xxx （使用等号，一个 - 符号）
cmd --flag=xxx （使用等号，两个 - 符号） 

对于整形 flag，合法的值可以为 1234，0664，0x1234 或 负数 等。对于布尔型 flag，可以为 1，0，t，f，T，F，true，false，TRUE，FALSE，True，False 等

其中，布尔类型的参数比较特殊，为了防止解析时的二义性，应该使用 等号 的方式指定

二、命令行参数方法
1. 定义flag参数
参数有三个：第一个为 参数名称，第二个为 默认值，第三个是 使用说明
1> 通过 flag.String()，Bool()，Int() 等 flag.Xxx() 方法，该种方式返回一个相应的指针
var ip = flag.Int("flagname", 1234, "help message for flagname")
2> 通过 flag.XxxVar() 方法将 flag 绑定到一个变量，该种方式返回 值类型，如
var flagvar int
flag.IntVar(&flagvar, "flagname", 1234, "help message for flagname")
3> 通过 flag.Var() 绑定自定义类型，自定义类型需要实现 Value 接口 (Receiver 必须为指针)，如
flag.Var(&flagVal, "name", "help message for flagname")
2. 调用 flag.Parse() 解析命令行参数到定义的 flag
flag.Parse()
解析函数将会在碰到第一个 非flag 命令行参数时停止，非flag 命令行参数是指不满足命令行语法的参数，如命令行参数为 cmd --flag=true abc 则第一个 非flag 命令行参数为“abc”

3. 调用 Parse 解析后，就可以直接使用 flag 本身（指针类型）或者绑定的变量了（值类型）
fmt.Println("flagvar has value ", flagvar)
还可通过 flag.Args(), flag.Arg(i) 来获取 非flag 命令行参数！

三、实例
package main
import (
  "flag"
  "fmt"
)
func main() {
  username := flag.String("name", "", "Input your username")
  flag.Parse()
  fmt.Println("Hello, ", *username)
}
