---
title: extract eval
layout: post
category: php
author: 夏泽民
---

@extract($a); //extract() 函数从数组中把变量导入到当前的符号表中

extract

非常好用的函数：extract()，它的主要作用是将数组展开，键名作为变量名，元素值为变量值，可以说为数组的操作提供了另外一个方便的工具，比方说，可以很方便的提取$_POST或者$_GET的元素，对表单提交上来的内容不能不用一一赋值，直接使用下面代码：

form.html

<form action="action.php" method="post">
<input type="text" name="username">
<input type="password" name="password">
<input type="submit">

在action.php中只要使用extract()函数将$_POST全局数据解开：
action.php

<?php
   extract($_POST);
   //相当于$username = $_POST['username'];
   //$password = $_POST['password'];
?>

是不是很方便呢？呵呵，下面是PHP手册里的详细解释：

extract
(PHP 4, PHP 5)
extract — 从数组中将变量导入到当前的符号表
说明
int extract ( array $var_array [, int $extract_type [, string $prefix ]] )

本函数用来将变量从数组中导入到当前的符号表中。接受结合数组 var_array 作为参数并将键名当作变量名，值作为变量的值。对每个键／值对都会在当前的符号表中建立变量，并受到 extract_type 和 prefix 参数的影响。
Note: 自版本 4.0.5 起本函数返回被提取的变量数目。

Note: EXTR_IF_EXISTS 和 EXTR_PREFIX_IF_EXISTS 是版本 4.2.0 中引进的。

Note: EXTR_REFS 是版本 4.3.0 中引进的。

extract() 检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。对待非法／数字和冲突的键名的方法将根据 extract_type 参数决定。可以是以下值之一：

EXTR_OVERWRITE
如果有冲突，覆盖已有的变量。
EXTR_SKIP
如果有冲突，不覆盖已有的变量。
EXTR_PREFIX_SAME
如果有冲突，在变量名前加上前缀 prefix 。
EXTR_PREFIX_ALL
给所有变量名加上前缀 prefix 。自 PHP 4.0.5 起这也包括了对数字索引的处理。
EXTR_PREFIX_INVALID
仅在非法／数字的变量名前加上前缀 prefix 。本标记是 PHP 4.0.5 新加的。
EXTR_IF_EXISTS
仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。可以用在已经定义了一组合法的变量，然后要从一个数组例如 $_REQUEST 中提取值覆盖这些变量的场合。本标记是 PHP 4.2.0 新加的。
EXTR_PREFIX_IF_EXISTS
仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。本标记是 PHP 4.2.0 新加的。
EXTR_REFS
将变量作为引用提取。这有力地表明了导入的变量仍然引用了 var_array 参数的值。可以单独使用这个标志或者在 extract_type 中用 OR 与其它任何标志结合使用。本标记是 PHP 4.3.0 新加的。
如果没有指定 extract_type ，则被假定为 EXTR_OVERWRITE。

注意 prefix 仅在 extract_type 的值是 EXTR_PREFIX_SAME，EXTR_PREFIX_ALL，EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS 时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。前缀和数组键名之间会自动加上一个下划线。

extract() 返回成功导入到符号表中的变量数目。

Warning

不要对不能信任的数据使用 extract()，例如用户的输入（$_GET，…）。如果这样做，举例说，要临时运行依赖于 register_globals 的老代码，要确保使用不会覆盖的 extract_type 值，例如 EXTR_SKIP，并且要留意应该按照 php.ini 中由 variables_order 定义的顺序来提取。

extract() 的一种可能用法是将 wddx_deserialize() 返回的结合数组中的内容导入到符号表变量中去。

Example#1 extract() 例子

<?php
$size = “large”;
$var_array = array(”color” => “blue”,
“size”  => “medium”,
“shape” => “sphere”);
extract($var_array, EXTR_PREFIX_SAME, “wddx”);
echo “$color, $size, $shape, $wddx_size\n”;
?>

上例将输出：

blue, large, sphere, medium

$size 没有被覆盖，因为指定了 EXTR_PREFIX_SAME，这使得 $wddx_size 被建立。如果指定了 EXTR_SKIP，则 $wddx_size 也不会被建立。EXTR_OVERWRITE 将使 $size 的值为“medium”，EXTR_PREFIX_ALL 将建立新变量 $wddx_color，$wddx_size 和 $wddx_shape。

必须使用关联数组，数字索引的数组将不会产生结果，除非用了 EXTR_PREFIX_ALL 或者 EXTR_PREFIX_INVALID。

eval

eval_r("?>".'< ?php echo "吃饱了撑的！"; ?>'."< ?php");

上面这行代码确实是吃饱了撑的，把原来echo输出的信息交给eval处理再输出。 但仔细一看就会发现其中的蹊跷: 我们交给eval函数的是整句php代码(包括 <?php ?>)。

eval就如其名，让人望而生畏，同时他的强大又不可否认。 使用好eval可以使原本复杂的问题简单化，反之难上加难！ 不多唠叨，看代码：

第一个测试

$str = "< ?php echo '我是\$str'; ?>\t加点调料？！@~";
echo $str;

eval_r(" ?>".$str."< ?php ");

其中有两处输出，echo部分直接解析 $str 字符串， 而eval则再次解析echo输出的内容中的php代码。 所以可以写一个网页加上 eval_r($_POST[cmd]); 那么你不就可以执行输入的php代码了吗？

下面来看看两个手册上的例子：

第二个测试

$string = 'cup';
$name = 'coffee';
$str = 'This is a $string with my $name in it.';

echo $str."";
eval_r("\$str = \"$str\";"); // 解释$str中的PHP代码
echo $str.""; // $str = “This is a $string with my $name in it.”;

eval函数对 $str 字符串加上了双引号，然后使用echo解释输出。关于双引号和单引号的区别请查看手册。

第三个测试: hello

$hello[2][4][6][8][10] = 'this is a test'; // 5维数组
$w = "[2]";
$o = "[4]";
$r = "[6]";
$l = "[8]";
$d = "[10]";
echo 'hello, '.eval_r("return \$hello$w$o$r$l$d;");
// eval负责解释: return $hello[2][4][6][8][10];

双引号先把hello前的 '\' 和 $w~d 部分解释掉， 然后eval解释PHP代码;

PHP手册上关于eval函数的解释: http://cn.php.net/eval

eval 函数: 将值代入字符串之中。

语法: void eval_r(string code_str);
传回值: 无
函式种类: 数据处理

内容说明:
本函式可将字符串之中的变量值代入，通常用在处理数据库的数据上。参数 code_str 为欲处理的字符串。值得注意的是待处理的字符串要符合 PHP 的字符串格式，同时在结尾处要有分号。使用本函式处理后的字符串会沿续到 PHP 程序结束。
<!-- more -->
{% raw %}
mixed eval ( string $code_str ),

复制代码
1 <?php
2 $string = 'cup';
3 $name = 'coffee';
4 $str = 'This is a $string with my $name in it.';
5 echo $str. "\n";
6 eval("\$str = \"$str\";");
7 echo $str. "\n";
8 ?>
复制代码
eval 可以把变量值带到语句中输出，如果这个变量在应用之前没有赋予值，那么在eval后，该变量位置会为空，直接跳过该变量

int extract ( array $var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix ]] )

1 $array=array('a'=>'5','b'=>'1','c'=>'2');
2 extract($array);
3 echo $a;
4 echo '<br/>'.$b;
5 echo '<br/>'.$c;
extract这个函数可以把数组的键名当作变量名，键值当作变量值，这个数组不能使索引数组，（php的变量命名规则），$extract_type的变量值时见下：

复制代码
 1 EXTR_OVERWRITE
 2 If there is a collision, overwrite the existing variable.
 3 EXTR_SKIP
 4 If there is a collision, don't overwrite the existing variable.
 5 EXTR_PREFIX_SAME
 6 If there is a collision, prefix the variable name with prefix.
 7 EXTR_PREFIX_ALL
 8 Prefix all variable names with prefix.
 9 EXTR_PREFIX_INVALID
10 Only prefix invalid/numeric variable names with prefix.
11 EXTR_IF_EXISTS
12 Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing. This is useful for defining a list of valid variables and then extracting only those variables you have defined out of $_REQUEST, for example.
13 EXTR_PREFIX_IF_EXISTS
14 Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table.
15 EXTR_REFS
16 Extracts variables as references. This effectively means that the values of the imported variables are still referencing the values of the var_array parameter. You can use this flag on its own or combine it with any other flag by OR'ing the extract_type.
{% endraw %}

https://gonzalo123.com/2012/03/12/how-to-use-eval-without-using-eval-in-php/


https://www.jianshu.com/p/0510ce81566d

https://shockerli.net/post/php-expression-string/

https://blog.sucuri.net/2014/02/php-backdoors-hidden-with-clever-use-of-extract-function.html
