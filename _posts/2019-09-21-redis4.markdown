---
title: redis 4 特性
layout: post
category: storage
author: 夏泽民
---
redis 4.0 新特性
Redis 4.0在2017年7月发布为GA。包含几个重大改进：更好的复制（PSYNC2），线程DEL / FLUSH，混合RDB + AOF格式，活动内存碎片整理，内存使用和性能改进。目前小版本更新到4.0.6
一、主从数据同步机制
PSYNC2: 新的一种主从复制同步机制。
PSYNC1:2.8~4.0之前版本的同步为PSYNC1
1、psync1因为网络中断或者阻塞导致主从中断，恢复后必须重新到主节点dump一份全量数据同步到从节点。psync2再中断恢复后只需要同步复制延迟的那部分数据。
2、psync1在重启从节点需要重新全量同步数据。psync2只部分同步增量数据。
3、在PSYNC1 当复制为链式复制的时候，如 A>B>C 主节点为A。当A出现问题，C节点不能正常复制B节点的数据。当提升B为主节点，C需要全量同步B的数据。在PSYNC2：PSYNC2解决了链式复制之间的关联性。A出现问题不影响C节点，B提升为主C不需要全量同步。
4、在使用星形复制。如一主两从。A>B , A>C  主节点为A。当A出现问题，B提升为主节点，C 重新指向主节点B。使用同步机制PSYNC2，C节点只做增量同步即可。在使用sentinel故障转移可以较少数据重新同步的延迟时间，避免大redis同步出现的网络带宽占满。
二、命令优化
线程DEL / FLUSH 优化
Redis现在可以在不同的线程中删除后台的key而不会阻塞服务器。 新的`UNLINK`命令与`DEL`相同，但是以非阻塞的方式工作。但是在key过期的内部依然使用了DEL。 类似地，为了让整个数据集或单个数据库异步释放，在“FLUSHALL”和“FLUSHDB”中添加了“ASYNC”选项。(手动清除大的key 可以使用unlink，不阻塞)
三、慢日志记录客户端来源IP地址，这个小功能对于故障排查很有用处。
四、混合RDB + AOF格式
混合RDB + AOF格式: 混合的RDB-AOF格式。 如果启用，则在重写AOF文件时使用新格式：重写使用更紧凑和更快的方式来生成RDB格式，并将AOF流附加到文件。 这允许在使用AOF持久性时更快地重写和重新加载。(目前相对于2.8没啥用)
五、新的管理命令
1、MEMORY 能够执行不同类型的内存分析：内存问题的故障排除（使用MEMORY DOCTOR，类似于LATENCY DOCTOR）,报告单个键使用的内存量，更深入地报告Redis内存使用情况 。
查看键值 使用 memory MEMORY USAGE key
memory统计分析 MEMORY STATS
MEMORY MALLOC-STATS
MEMORY PURGE
2、SWAPDB 能够完全立即（无延迟）替换同实例下的两个Redis数据库(目前我们业务没啥用)
六、
内存使用和性能改进:
1、Redis现在使用更少的内存来存储相同数量的数据。
2、Redis现在可以对使用的内存进行碎片整理，并逐渐回收空间(这个功能依然是试用阶段，可以通过参数不开启即可)
 
以上列举功能为4.0的重要更新，也是对我们目前redis大有改善，所列举的功能已经和亚运测试过。业务上还没有预发测试。
更多4.0版本信息 https://raw.githubusercontent.com/antirez/redis/4.0/00-RELEASENOTES
 
建议：新的边缘业务redis上线使用redis4.0 。先进行预发功能连通测试。一段时间后，根据实际使用情况推进redis4.0更新。
<!-- more -->
一，Memory
Redis4.0新增的内存管理分析工具 memory command
二，Lazy Free
解决单key大value 删除时导致的短暂阻塞问题 删除大key时，使用unlink进行快速删除 解除关联 后台fork子进程删除   
三，Psync2
升级psync1 解决副本集重启 全量同步问题 减少同步数据和时间

四，Redis Modules System
redis4.0开放对外部模块的引用，使得可以通过外部模块对Redis进行功能性扩展，对redis更加强大的添加了无限可能。

单线程程序绝对可以通过使用 i/o 复用机制和事件循环 (Redis用的是事件循环), 在 i/o 级别上提供并发性。

并行性具有成本: 在现代硬件上可以找到多个套接字/多个内核, 线程之间的同步非常昂贵。另一方面, 像 Redis 这样的高效存储引擎的瓶颈往往是网络--CPU前面的陷阱。因此, 孤立的事件循环 (不需要同步) 被视为构建高效、可伸缩的服务器的良好设计。

Redis 操作是原子的事实仅仅是单线程事件循环的结果。有趣的一点是, 原子性是以不额外的成本提供的 (它不需要同步)。用户可以利用它来实现乐观锁定和其他模式, 而无需支付同步开销。

redis中也是有事务的，不过这个事务没有mysql中的完善，只保证了一致性和隔离性，不满足原子性和持久性。
redis事务使用multi、exec命令

原子性，redis会将事务中的所有命令执行一遍，哪怕是中间有执行失败也不会回滚。kill信号、宿主机宕机等导致事务执行失败，redis也不会进行重试或者回滚。

持久性，redis事务的持久性依赖于redis所使用的持久化模式，遗憾的是各种持久化模式也都不是持久化的。

隔离性，redis是单进程，开启事务之后，会执行完当前连接的所有命令直到遇到exec命令，才处理其他连接的命令。
一致性，看了文档，觉得挺扯的，但是貌似说的没有问题。

redis中的事务不支持原子性

redis性能

redis读写性能测试redis官网测试读写能到10万左右
redis缓存雪崩

在我们设置缓存时采用了相同的过期时间或者缓存服务器因某些原因无法使用时，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。
解决办法过期时间上增加一个范围的随机值，使用Redis Sentinel 和 Redis Cluster 实现高可用，另增设一个寿命更短的本机缓存来解决redis分布缓存抢修时的问题。

　在发生无论是缓存穿透还是缓存雪崩，都建议使用队列来排队、拒绝大量请求涌入和分布式互斥锁来避免后端数据服务被冲击，防止已有的数据出现问题。
　
　官方的bench-mark数据：

测试完成了50个并发执行100000个请求。

设置和获取的值是一个256字节字符串。

Linux box 是运行 Linux 2.6 , 这是 X3320 Xeon 2.5 ghz 。

文本执行使用 loopback 接口(127.0.0.1)。

结果: 读的速度是 110000次/s（11 W次/s）,写的速度是81000次/s（8.1W 次/s）。