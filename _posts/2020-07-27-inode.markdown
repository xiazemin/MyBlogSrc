---
title: inode
layout: post
category: linux
author: 夏泽民
---
$ls -i a b
523669 a 523669 b
$rm -f a
$ls -i b
523669 b
因为它会在访问控制规则中打开一个漏洞。能否打开一个文件不仅取决于它自己的访问权限位，还取决于每个包含目录的权限位。（例如，在您的示例中，如果test.txt是模式644，但包含目录test是模式700，则只有root和test的所有者可以打开test.txt）inode编号仅标识文件，而不标识包含目录（文件可能位于多个目录中；请阅读“硬链接”），因此内核无法仅使用inode号执行完整的访问控制检查集。

https://www.coder.work/article/169510
<!-- more -->
一、inode是什么？

理解inode，要从文件储存说起。

文件储存在硬盘上，硬盘的最小存储单位叫做"扇区"（Sector）。每个扇区储存512字节（相当于0.5KB）。

操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个"块"（block）。这种由多个扇区组成的"块"，是文件存取的最小单位。"块"的大小，最常见的是4KB，即连续八个 sector组成一个 block。

文件数据都储存在"块"中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为"索引节点"。

每一个文件都有对应的inode，里面包含了与该文件有关的一些信息。

二、inode的内容

inode包含文件的元信息，具体来说有以下内容：

　　* 文件的字节数

　　* 文件拥有者的User ID

　　* 文件的Group ID

　　* 文件的读、写、执行权限

　　* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。

　　* 链接数，即有多少文件名指向这个inode

　　* 文件数据block的位置

可以用stat命令，查看某个文件的inode信息：

　　stat example.txt



总之，除了文件名以外的所有文件信息，都存在inode之中。至于为什么没有文件名，下文会有详细解释。

三、inode的大小

inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。

每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。

查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。

　　df -i



查看每个inode节点的大小，可以用如下命令：

　　sudo dumpe2fs -h /dev/hda | grep "Inode size"



由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。

四、inode号码

每个inode都有一个号码，操作系统用inode号码来识别不同的文件。

这里值得重复一遍，Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。

表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。

使用ls -i命令，可以看到文件名对应的inode号码：

　　ls -i example.txt



五、目录文件

Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。

目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。

ls命令只列出目录文件中的所有文件名：

　　ls /etc



ls -i命令列出整个目录文件，即文件名和inode号码：

　　ls -i /etc



如果要查看文件的详细信息，就必须根据inode号码，访问inode节点，读取信息。ls -l命令列出文件的详细信息。

　　ls -l /etc



理解了上面这些知识，就能理解目录的权限。目录文件的读权限（r）和写权限（w），都是针对目录文件本身。由于目录文件内只有文件名和inode号码，所以如果只有读权限，只能获取文件名，无法获取其他信息，因为其他信息都储存在inode节点中，而读取inode节点内的信息需要目录文件的执行权限（x）。

六、硬链接

一般情况下，文件名和inode号码是"一一对应"关系，每个inode号码对应一个文件名。但是，Unix/Linux系统允许，多个文件名指向同一个inode号码。

这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为"硬链接"（hard link）。

ln命令可以创建硬链接：

　　ln 源文件 目标文件



运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做"链接数"，记录指向该inode的文件名总数，这时就会增加1。

反过来，删除一个文件名，就会使得inode节点中的"链接数"减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。

这里顺便说一下目录文件的"链接数"。创建目录时，默认会生成两个目录项："."和".."。前者的inode号码就是当前目录的inode号码，等同于当前目录的"硬链接"；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的"硬链接"。所以，任何一个目录的"硬链接"总数，总是等于2加上它的子目录总数（含隐藏目录）。

七、软链接

除了硬链接以外，还有一种特殊情况。

文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的"软链接"（soft link）或者"符号链接（symbolic link）。

这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错："No such file or directory"。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode"链接数"不会因此发生变化。

ln -s命令可以创建软链接。

　　ln -s 源文文件或目录 目标文件或目录



八、inode的特殊作用

由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。

　　1. 有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。

　　2. 移动文件或重命名文件，只是改变文件名，不影响inode号码。

　　3. 打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。

第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。

https://www.ruanyifeng.com/blog/2011/12/inode.html


inode用完的解决办法

，我们会碰到inode耗尽的情况。症状就是用df查看明明还有硬盘空闲空间，但系统却提示磁盘空间不足。

故障重现
为了直观的看到效果，这里拿虚拟机添加一块1G的磁盘来实验，格式化后，共有256个inode
图中能看到只剩下245个inode了，此时我执行如下命令串

for i in {1..246};do touch $i;done
生成246个文件

故障原因
故障原因很明显，inode号被用完了，为什么被用完了，因为文件数量过多。在生产环境有的业务类型本来就有很多小文件，这是不可避免的。但还有一个会生成很多小文件情况——cron
由于Linux在执行cron时，会将cron执行脚本中的output和warning信息，都会以邮件的形式发送Cron所有者， 而由于服务器上的sendmail或postfix没有正常运行， 导致邮件发送不成功，全部小文件堆积在了/var/spool/postfix/maildrop目录下面，而且没有自动清理转换的机制，经历较长时间后，此目录已堆积了大量的文件。

故障解决
对于业务需要本来就有很多小文件而耗尽inode(/data/jpg/下全是小图片)，这种情况，有一个变通的方法解决，不格盘获取大量inodes
先dd出一个img文件 dd if=/dev/zero of=/root/disk.img count=256 bs=1024KB （因为是实验，所以count设的很小）
然后格式化这个文件 mkfs.ext2 -b 1024 -I 128 /root/disk.img
其中“-b”和“-I”块大小和inode大小设为系统能接受的最小值以获取更多的inodes数量。
此时先把/data/jpg目录下的全部文件转移到同分区的另外一个目录
mv /data/jpg/* /data/pic/
然后把刚刚dd出来的img文件挂载到/data/jpg目录
mount -o loop /root/disk.img /data/jpg
最后把/data/pic目录里的所有文件移动到/data/jpg目录下。

面对这种问题，更好的办法是提前规划，针对业务需求在上线前就准备好使用reriserfs等会自动动态调整inodes的文件系统来面对inodes的骤增。
https://hqidi.com/50.html
https://blog.csdn.net/subfate/article/details/19993991

需要在格式化SD卡(或U盘)分区时，将inode数调大一些(不指定inode数，inode为默认值，具体多少自行查看)，或者在写文件时注意不要频繁写大量的小文件。

Linux索引节点(inode)用完了怎么破？
分类：学习笔记 发表：2017-04-24 围观(1677) 评论(1)
inode节点中，记录了文件的类型、大小、权限、所有者、文件连接的数目、创建时间与更新时间等重要的信息，还有一个比较重要的内容就是指向数据块的指针。

一般情况不需要特殊配置，如果存放文件很多，需要配置。有时磁盘空间有剩余但是不能存放文件，可能是由于inode节点数量不做了。现在我们就来实战，Linux索引节点(inode)用完了怎么破？

1、登录到服务器上df -i 查看每块磁盘的inode使用情况

2、查找根目录下每个文件夹使用的inode数量

for i in /*; do echo $i; find $i |wc -l|sort -nr; done
3、发现/data/占用最大，继续使用命令查询data文件下哪个占用最大。

for i in /data/*; do echo $i; find $i |wc -l|sort -nr; done
4、重复上述步骤找到根源目录，执行如下操作删除即可。

find . -name "*" | xargs rm -rf
5、如果数据不能删除，我继续换另外一种方法

注意！！！！！！！！！！该操作将删除整个分区数据，在进行此操作之前，请再次确认你已经对该分区的信息做好了备份。
请再次确认你的数据已经全部备份完毕。
1、卸载文件系统
umount /data0
2、建立文件系统，指定inode节点数
mkfs.ext4 /dev/sdb1 -N 18276352
3、修改fstab文件vi /etc/fstab
/dev/sdb1 /data ext4 defaults 0 0
4、挂载文件系统
mount -a
5、查看修改后的inode参数
dumpe2fs -h /dev/sdb1 | grep node

https://www.xubaojin.com/post/127.html