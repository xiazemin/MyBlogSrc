---
title: go:linkname go:nosplit
layout: post
category: golang
author: 夏泽民
---
go:linkname
指令的格式如下：
//go:linkname hello github.com/lastsweetop/testlinkname/hello.hellofunc
go:linkname引导编译器将当前(私有)方法或者变量在编译时链接到指定的位置的方法或者变量，第一个参数表示当前方法或变量，第二个参数表示目标方法或变量，因为这关指令会破坏系统和包的模块化，因此在使用时必须导入unsafe
代码详见：https://github.com/xiazemin/golink
<!-- more -->
这个指令不经常用，最好也不要用，但理解这个指令可以帮助你理解核心包的很多代码。在标准库中是为了可以使用另一个包的unexported的方法或者变量，在敲代码的时候是不可包外访问的，但是运行时用这个命令hack了一下，就变得可以访问。
比如runtime 包 sema.go文件
//go:linkname notifyListWait sync.runtime_notifyListWait

package exported
// Provided by package unexported.
import _ "unsafe"
import _ "github.com/xiazemin/golink/unexported"

func hellofunc() string

方法体没有实现编译器一般会报错
package unexported
import _ "unsafe"
//go:linkname hello github.com/xiazemin/golink/exported.hellofunc
func hello() string {
	return "private.hello()"
}


go:linkname可以跨包使用
跨包使用时，目标方法或者变量必须导入有方法体的包，这个编译器才可以识别到链接 
import _ "github.com/lastsweetop/testlinkname/private"
go build无法编译go:linkname,必须用单独的compile命令进行编译，因为go build会加上-complete参数，这个参数会检查到没有方法体的方法，并且不通过。

//go:nosplit 在源码中也是经常出现的，其实就是告诉编译器，下面的函数不会产生堆栈溢出，不需要插入堆栈溢出检查。

