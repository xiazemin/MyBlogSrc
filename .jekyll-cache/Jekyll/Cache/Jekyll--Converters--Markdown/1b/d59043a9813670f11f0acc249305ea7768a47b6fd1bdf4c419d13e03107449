I"<p>在net/http里打印http.Request的context会出现panic。具体的错误error， fatal error: concurrent map read and map write 。
我们知道golang的map不是线程安全的，多个协程不加锁对map并发读写会触发data race，然后panic异常退出。
<!-- more -->
下面是出现net/http context panic的问题代码，代码的逻辑很简单，就是定义一个api，然后打印context而已。把服务运行起来后，我们可以用ab, wrk来进行压测，来制造data race竞争的场景。</p>
:ET