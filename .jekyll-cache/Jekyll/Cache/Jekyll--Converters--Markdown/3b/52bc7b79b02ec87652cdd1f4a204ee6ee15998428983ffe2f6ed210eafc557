I"7<!-- more -->
<p>一、常用操作符（操作符其实也是函数）</p>

<p>++ ++<a href="that: GenTraversableOnce[B]">B</a>: List[B] 从列表的尾部添加另外一个列表</p>

<p>++: ++:<a href="that: collection.Traversable[B]">B &gt;: A, That</a>(implicit bf: CanBuildFrom[List[A], B, That]): That 在列表的头部添加一个列表</p>

<p>+: +:(elem: A): List[A] 在列表的头部添加一个元素</p>

<p>:+ :+(elem: A): List[A] 在列表的尾部添加一个元素</p>

<p>:: ::(x: A): List[A] 在列表的头部添加一个元素</p>

<p>::: :::(prefix: List[A]): List[A] 在列表的头部添加另外一个列表</p>

<p>:\ :<a href="z: B">B</a>(op: (A, B) ⇒ B): B 与foldRight等价</p>

<p>val left = List(1,2,3)
val right = List(4,5,6)</p>

<p>//以下操作等价
left ++ right   // List(1,2,3,4,5,6)
left ++: right  // List(1,2,3,4,5,6)
right.++:(left)    // List(1,2,3,4,5,6)
right.:::(left)  // List(1,2,3,4,5,6)</p>

<p>//以下操作等价
0 +: left    //List(0,1,2,3)
left.+:(0)   //List(0,1,2,3)</p>

<p>//以下操作等价
left :+ 4    //List(1,2,3,4)
left.:+(4)   //List(1,2,3,4)</p>

<p>//以下操作等价
0 :: left      //List(0,1,2,3)
left.::(0)     //List(0,1,2,3)
看到这里大家应该跟我一样有一点晕吧，怎么这么多奇怪的操作符，这里给大家一个提示，任何以冒号结果的操作符，都是右绑定的，即 0 :: List(1,2,3) = List(1,2,3).::(0) = List(0,1,2,3) 从这里可以看出操作::其实是右边List的操作符，而非左边Int类型的操作符</p>

<p>二、常用变换操作</p>

<p>1.map</p>

<p>map<a href="f: (A) ⇒ B">B</a>: List[B]</p>

<p>定义一个变换,把该变换应用到列表的每个元素中,原列表不变，返回一个新的列表数据</p>

<p>Example1 平方变换</p>

<p>val nums = List(1,2,3)
val square = (x: Int) =&gt; x<em>x <br />
val squareNums1 = nums.map(num =&gt; num</em>num)    //List(1,4,9)
val squareNums2 = nums.map(math.pow(_,2))    //List(1,4,9)
val squareNums3 = nums.map(square)            //List(1,4,9)</p>

<p>Example2 保存文本数据中的某几列</p>

<p>val text = List(“Homeway,25,Male”,”XSDYM,23,Female”)
val usersList = text.map(_.split(“,”)(0))  <br />
val usersWithAgeList = text.map(line =&gt; {
    val fields = line.split(“,”)
    val user = fields(0)
    val age = fields(1).toInt
    (user,age)
})
2.flatMap, flatten</p>

<p>flatten: flatten[B]: List[B] 对列表的列表进行平坦化操作 flatMap: flatMap<a href="f: (A) ⇒ GenTraversableOnce[B]">B</a>: List[B] map之后对结果进行flatten</p>

<p>定义一个变换f, 把f应用列表的每个元素中，每个f返回一个列表，最终把所有列表连结起来。</p>

<p>val text = List(“A,B,C”,”D,E,F”)
val textMapped = text.map(<em>.split(“,”).toList) // List(List(“A”,”B”,”C”),List(“D”,”E”,”F”))
val textFlattened = textMapped.flatten          // List(“A”,”B”,”C”,”D”,”E”,”F”)
val textFlatMapped = text.flatMap(</em>.split(“,”).toList) // List(“A”,”B”,”C”,”D”,”E”,”F”)</p>

<p>3.reduce</p>

<p>reduce<a href="op: (A1, A1) ⇒ A1">A1 &gt;: A</a>: A1</p>

<p>定义一个变换f, f把两个列表的元素合成一个，遍历列表，最终把列表合并成单一元素</p>

<p>Example 列表求和</p>

<p>val nums = List(1,2,3)
val sum1 = nums.reduce((a,b) =&gt; a+b)   //6
val sum2 = nums.reduce(<em>+</em>)            //6
val sum3 = nums.sum                 //6</p>

<p>4.reduceLeft,reduceRight</p>

<p>reduceLeft: reduceLeft<a href="f: (B, A) ⇒ B">B &gt;: A</a>: B</p>

<p>reduceRight: reduceRight<a href="op: (A, B) ⇒ B">B &gt;: A</a>: B</p>

<p>reduceLeft从列表的左边往右边应用reduce函数，reduceRight从列表的右边往左边应用reduce函数</p>

<p>Example</p>

<p>val nums = List(2.0,2.0,3.0)
val resultLeftReduce = nums.reduceLeft(math.pow)  // = pow( pow(2.0,2.0) , 3.0) = 64.0
val resultRightReduce = nums.reduceRight(math.pow) // = pow(2.0, pow(2.0,3.0)) = 256.0</p>

<p>5.fold,foldLeft,foldRight</p>

<p>fold: fold<a href="z: A1">A1 &gt;: A</a>(op: (A1, A1) ⇒ A1): A1 带有初始值的reduce,从一个初始值开始，从左向右将两个元素合并成一个，最终把列表合并成单一元素。</p>

<p>foldLeft: foldLeft<a href="z: B">B</a>(f: (B, A) ⇒ B): B 带有初始值的reduceLeft</p>

<p>foldRight: foldRight<a href="z: B">B</a>(op: (A, B) ⇒ B): B 带有初始值的reduceRight</p>

<p>val nums = List(2,3,4)
val sum = nums.fold(1)(<em>+</em>)  // = 1+2+3+4 = 9</p>

<p>val nums = List(2.0,3.0)
val result1 = nums.foldLeft(4.0)(math.pow) // = pow(pow(4.0,2.0),3.0) = 4096
val result2 = nums.foldRight(1.0)(math.pow) // = pow(1.0,pow(2.0,3.0)) = 8.0</p>

<p>6.sortBy,sortWith,sorted</p>

<p>sortBy: sortBy<a href="f: (A) ⇒ B">B</a>(implicit ord: math.Ordering[B]): List[A] 按照应用函数f之后产生的元素进行排序</p>

<p>sorted： sorted<a href="implicit ord: math.Ordering[B]">B &gt;: A</a>: List[A] 按照元素自身进行排序</p>

<p>sortWith： sortWith(lt: (A, A) ⇒ Boolean): List[A] 使用自定义的比较函数进行排序</p>

<p>val nums = List(1,3,2,4)
val sorted = nums.sorted  //List(1,2,3,4)</p>

<p>val users = List((“HomeWay”,25),(“XSDYM”,23))
val sortedByAge = users.sortBy{case(user,age) =&gt; age}  //List((“XSDYM”,23),(“HomeWay”,25))
val sortedWith = users.sortWith{case(user1,user2) =&gt; user1._2 &lt; user2._2} //List((“XSDYM”,23),(“HomeWay”,25))</p>

<p>7.filter, filterNot</p>

<p>filter: filter(p: (A) ⇒ Boolean): List[A]</p>

<p>filterNot: filterNot(p: (A) ⇒ Boolean): List[A]</p>

<p>filter 保留列表中符合条件p的列表元素 ， filterNot，保留列表中不符合条件p的列表元素</p>

<p>val nums = List(1,2,3,4)
val odd = nums.filter( _ % 2 != 0) // List(1,3)
val even = nums.filterNot( _ % 2 != 0) // List(2,4)</p>

<p>8.count</p>

<p>count(p: (A) ⇒ Boolean): Int</p>

<p>计算列表中所有满足条件p的元素的个数，等价于 filter(p).length</p>

<p>val nums = List(-1,-2,0,1,2) val plusCnt1 = nums.count( &gt; 0) val plusCnt2 = nums.filter( &gt; 0).length</p>
<ol>
  <li>diff, union, intersect</li>
</ol>

<p>diff:diff(that: collection.Seq[A]): List[A] 保存列表中那些不在另外一个列表中的元素，即从集合中减去与另外一个集合的交集</p>

<p>union : union(that: collection.Seq[A]): List[A] 与另外一个列表进行连结</p>

<p>intersect: intersect(that: collection.Seq[A]): List[A] 与另外一个集合的交集</p>

<p>val nums1 = List(1,2,3)
val nums2 = List(2,3,4)
val diff1 = nums1 diff nums2   // List(1)
val diff2 = nums2.diff(num1)   // List(4)
val union1 = nums1 union nums2  // List(1,2,3,2,3,4)
val union2 = nums2 ++ nums1        // List(2,3,4,1,2,3)
val intersection = nums1 intersect nums2  //List(2,3)</p>

<p>10.distinct</p>

<p>distinct: List[A] 保留列表中非重复的元素，相同的元素只会被保留一次</p>

<p>val list = List(“A”,”B”,”C”,”A”,”B”) val distincted = list.distinct // List(“A”,”B”,”C”)
1
11.groupBy, grouped</p>

<p>groupBy : groupBy<a href="f: (A) ⇒ K">K</a>: Map[K, List[A]] 将列表进行分组，分组的依据是应用f在元素上后产生的新元素 
grouped: grouped(size: Int): Iterator[List[A]] 按列表按照固定的大小进行分组</p>

<p>val data = List((“HomeWay”,”Male”),(“XSDYM”,”Femail”),(“Mr.Wang”,”Male”))
val group1 = data.groupBy(_._2) // = Map(“Male” -&gt; List((“HomeWay”,”Male”),(“Mr.Wang”,”Male”)),”Female” -&gt; List((“XSDYM”,”Femail”)))
val group2 = data.groupBy{case (name,sex) =&gt; sex} // = Map(“Male” -&gt; List((“HomeWay”,”Male”),(“Mr.Wang”,”Male”)),”Female” -&gt; List((“XSDYM”,”Femail”)))
val fixSizeGroup = data.grouped(2).toList // = Map(“Male” -&gt; List((“HomeWay”,”Male”),(“XSDYM”,”Femail”)),”Female” -&gt; List((“Mr.Wang”,”Male”)))</p>

<p>12.scan</p>

<p>scan<a href="z: B">B &gt;: A, That</a>(op: (B, B) ⇒ B)(implicit cbf: CanBuildFrom[List[A], B, That]): That</p>

<p>由一个初始值开始，从左向右，进行积累的op操作，这个比较难解释，具体的看例子吧。</p>

<p>val nums = List(1,2,3)
val result = nums.scan(10)(<em>+</em>)   // List(10,10+1,10+1+2,10+1+2+3) = List(10,11,12,13)</p>

<p>13.scanLeft,scanRight</p>

<p>scanLeft: scanLeft<a href="z: B">B, That</a>(op: (B, A) ⇒ B)(implicit bf: CanBuildFrom[List[A], B, That]): That</p>

<p>scanRight: scanRight<a href="z: B">B, That</a>(op: (A, B) ⇒ B)(implicit bf: CanBuildFrom[List[A], B, That]): That</p>

<p>scanLeft: 从左向右进行scan函数的操作，scanRight：从右向左进行scan函数的操作</p>

<p>val nums = List(1.0,2.0,3.0)
val result = nums.scanLeft(2.0)(math.pow)   // List(2.0,pow(2.0,1.0), pow(pow(2.0,1.0),2.0),pow(pow(pow(2.0,1.0),2.0),3.0) = List(2.0,2.0,4.0,64.0)
val result = nums.scanRight(2.0)(math.pow)  // List(2.0,pow(3.0,2.0), pow(2.0,pow(3.0,2.0)), pow(1.0,pow(2.0,pow(3.0,2.0))) = List(1.0,512.0,9.0,2.0)</p>

<p>14.take,takeRight,takeWhile</p>

<p>take : takeRight(n: Int): List[A] 提取列表的前n个元素 takeRight: takeRight(n: Int): List[A] 提取列表的最后n个元素 takeWhile: takeWhile(p: (A) ⇒ Boolean): List[A] 从左向右提取列表的元素，直到条件p不成立</p>

<p>val nums = List(1,1,1,1,4,4,4,4)
val left = nums.take(4)   // List(1,1,1,1)
val right = nums.takeRight(4) // List(4,4,4,4)
val headNums = nums.takeWhile( _ == nums.head)  // List(1,1,1,1)</p>

<p>15.drop,dropRight,dropWhile</p>

<p>drop: drop(n: Int): List[A] 丢弃前n个元素，返回剩下的元素 dropRight: dropRight(n: Int): List[A] 丢弃最后n个元素，返回剩下的元素 dropWhile: dropWhile(p: (A) ⇒ Boolean): List[A] 从左向右丢弃元素，直到条件p不成立</p>

<p>val nums = List(1,1,1,1,4,4,4,4)
val left = nums.drop(4)   // List(4,4,4,4)
val right = nums.dropRight(4) // List(1,1,1,1)
val tailNums = nums.dropWhile( _ == nums.head)  // List(4,4,4,4)</p>

<p>16.span, splitAt, partition</p>

<p>span : span(p: (A) ⇒ Boolean): (List[A], List[A]) 从左向右应用条件p进行判断，直到条件p不成立，此时将列表分为两个列表</p>

<p>splitAt: splitAt(n: Int): (List[A], List[A]) 将列表分为前n个，与，剩下的部分</p>

<p>partition: partition(p: (A) ⇒ Boolean): (List[A], List[A]) 将列表分为两部分，第一部分为满足条件p的元素，第二部分为不满足条件p的元素</p>

<p>val nums = List(1,1,1,2,3,2,1)
val (prefix,suffix) = nums.span( _ == 1) // prefix = List(1,1,1), suffix = List(2,3,2,1)
val (prefix,suffix) = nums.splitAt(3)  // prefix = List(1,1,1), suffix = List(2,3,2,1)
val (prefix,suffix) = nums.partition( _ == 1) // prefix = List(1,1,1,1), suffix = List(2,3,2)</p>

<p>17.padTo</p>

<p>padTo(len: Int, elem: A): List[A]</p>

<p>将列表扩展到指定长度，长度不够的时候，使用elem进行填充，否则不做任何操作。</p>

<p>val nums = List(1,1,1)
 val padded = nums.padTo(6,2)   // List(1,1,1,2,2,2)</p>

<p>18.combinations,permutations</p>

<p>combinations: combinations(n: Int): Iterator[List[A]] 取列表中的n个元素进行组合，返回不重复的组合列表，结果一个迭代器</p>

<p>permutations: permutations: Iterator[List[A]] 对列表中的元素进行排列，返回不重得的排列列表，结果是一个迭代器</p>

<p>val nums = List(1,1,3)
val combinations = nums.combinations(2).toList //List(List(1,1),List(1,3))
val permutations = nums.permutations.toList        // List(List(1,1,3),List(1,3,1),List(3,1,1))</p>

<p>19.zip, zipAll, zipWithIndex, unzip,unzip3</p>

<p>zip: zip<a href="that: GenIterable[B]">B</a>: List[(A, B)] 与另外一个列表进行拉链操作，将对应位置的元素组成一个pair，返回的列表长度为两个列表中短的那个</p>

<p>zipAll: zipAll<a href="that: collection.Iterable[B], thisElem: A, thatElem: B">B</a>: List[(A, B)] 与另外一个列表进行拉链操作，将对应位置的元素组成一个pair，若列表长度不一致，自身列表比较短的话使用thisElem进行填充，对方列表较短的话使用thatElem进行填充</p>

<p>zipWithIndex：zipWithIndex: List[(A, Int)] 将列表元素与其索引进行拉链操作，组成一个pair</p>

<p>unzip: unzip<a href="implicit asPair: (A) ⇒ (A1, A2)">A1, A2</a>: (List[A1], List[A2]) 解开拉链操作</p>

<p>unzip3: unzip3<a href="implicit asTriple: (A) ⇒ (A1, A2, A3)">A1, A2, A3</a>: (List[A1], List[A2], List[A3]) 3个元素的解拉链操作</p>

<p>val alphabet = List(“A”,B”,”C”)
val nums = List(1,2)
val zipped = alphabet zip nums   // List((“A”,1),(“B”,2))
val zippedAll = alphabet.zipAll(nums,”*”,-1)   // List((“A”,1),(“B”,2),(“C”,-1))
val zippedIndex = alphabet.zipWithIndex  // List((“A”,0),(“B”,1),(“C”,3))
val (list1,list2) = zipped.unzip        // list1 = List(“A”,”B”), list2 = List(1,2)
val (l1,l2,l3) = List((1, “one”, ‘1’),(2, “two”, ‘2’),(3, “three”, ‘3’)).unzip3   // l1=List(1,2,3),l2=List(“one”,”two”,”three”),l3=List(‘1’,’2’,’3’)</p>

<p>20.slice</p>

<p>slice(from: Int, until: Int): List[A] 提取列表中从位置from到位置until(不含该位置)的元素列表</p>

<p>val nums = List(1,2,3,4,5)
val sliced = nums.slice(2,4)  //List(3,4)</p>

<p>21.sliding</p>

<p>sliding(size: Int, step: Int): Iterator[List[A]] 将列表按照固定大小size进行分组，步进为step，step默认为1,返回结果为迭代器</p>

<p>val nums = List(1,1,2,2,3,3,4,4)
val groupStep2 = nums.sliding(2,2).toList  //List(List(1,1),List(2,2),List(3,3),List(4,4))
val groupStep1 = nums.sliding(2).toList //List(List(1,1),List(1,2),List(2,2),List(2,3),List(3,3),List(3,4),List(4,4))</p>

<p>22.updated</p>

<p>updated(index: Int, elem: A): List[A] 对列表中的某个元素进行更新操作</p>

<p>val nums = List(1,2,3,3)
val fixed = nums.updated(3,4)  // List(1,2,3,4)</p>
:ET