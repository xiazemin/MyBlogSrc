I"^<p>C/C++中，__FUNCTION__常量记录当前函数的名称。有时候，在日志输出的时候包含这些信息是非常有用的。而在Bash中，同样有这样一个常量FUNCNAME，但是有一点区别是，它是一个数组而非字符串，其中数组的第一个元素为当前函数的名称。</p>

<p>可能初看有点难以理解，为什么FUNCNAME要是一个数组呢？看看下面的例子，你就明白了。</p>

<p>#!/bin/bashfunction test_func(){
    echo “Current $FUNCNAME, $FUNCNAME =&gt; (${FUNCNAME[@]})”
    another_func
    echo “Current $FUNCNAME, $FUNCNAME =&gt; (${FUNCNAME[@]})”}function another_func(){
    echo “Current $FUNCNAME, $FUNCNAME =&gt; (${FUNCNAME[@]})”}</p>

<p>echo “Out of function, $FUNCNAME =&gt; (${FUNCNAME[@]})”
test_func
echo “Out of function, $FUNCNAME =&gt; (${FUNCNAME[@]})”
执行后的结果为：</p>

<p>Out of function, $FUNCNAME =&gt; ()
Current test_func, $FUNCNAME =&gt; (test_func main)
Current another_func, $FUNCNAME =&gt; (another_func test_func main)
Current test_func, $FUNCNAME =&gt; (test_func main)
Out of function, $FUNCNAME =&gt; ()
所以，更加准确地说，FUNCNAME是一个数组，但是bash中会将它维护成类似一个堆栈的形式。</p>

<p>与FUNCNAME相似的另外一个比较有用的常量是BASH_SOURCE，同样是一个数组，不过它的第一个元素是当前脚本的名称。
这在source的时候非常有用，因为在被source的脚本中，$0是父脚本的名称，而不是被source的脚本名称。而BASH_SOURCE
就可以派上用场了。</p>

<h1 id="if-the-script-is-sourced-by-another-scriptif---n-bash_source--a-bash_source--0-then">If the script is sourced by another scriptif [ -n “$BASH_SOURCE” -a “$BASH_SOURCE” != “$0” ]then</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>do_something else # Otherwise, run directly in the shell
do_other fi
</code></pre></div></div>

<!-- more -->
<p>唯一遗憾的是，这种做法会让脚本失去一些可移植性，因为不是所有的shell都支持这些常量。</p>
:ET