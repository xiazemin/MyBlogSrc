I"8<!-- more -->
<p>Xdebug是一个开源的PHP程序调试工具，可以使用它来调试、跟踪及分析程序运行状态。当然，Xdebug需要结合PHP的编辑工具来打断点、跟踪、调试及分析，比较常用的PHP的Xdebug调试环境：Vim +Xdebug。
Xdebug是一个开源的PHP程序调试工具，可以使用它来调试、跟踪及分析程序运行状态。当然，Xdebug需要结合PHP的编辑工具来打断点、跟踪、调试及分析，比较常用的PHP的Xdebug调试环境：Vim +Xdebug。</p>

<p>·     安装配置</p>

<p>·     调试环境</p>

<p>·     跟踪分析</p>

<p>·     注意事项</p>

<p>·     遇到问题</p>

<p>一、安装配置</p>

<p>1、安装</p>

<p>Xdebug的安装是作为PHP的拓展而存在的，所以可参考PHP拓展文章：</p>

<p>http://blog.csdn.net/why_2012_gogo/article/details/51120645</p>

<p>2、配置</p>

<p>php.ini:</p>

<p>[xdebug]</p>

<p>;基本调试配置</p>

<p>xdebug.auto_trace = on</p>

<p>xdebug.collect_params = on</p>

<p>xdebug.collect_return = on</p>

<p>xdebug.profiler_enable = on</p>

<p>xdebug.profiler_output_dir =”/php/ext/xdebug_profilers”</p>

<p>xdebug.trace_output_dir = “/tmp/ext/xdebug_traces”</p>

<p>;远程调试设置</p>

<p>xdebug.remote_enable = on</p>

<p>xdebug.remote_host = localhost</p>

<p>xdebug.remote_port = 9010</p>

<p>xdebug.remote_autostart = on
zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so</p>

<p>用xdebug_debug_zval 和debug_backtrace,可以打印出引用计数</p>

<p>所有的php变量都放在了zval的容器中，一个zval变量容器，除了包含变量的类型和值，也包括了另外两个字段，一个是is_ref（bool），标识此变量是否属于引用集合，</p>

<p>（reference set）。另外的就是引用计数机制，用来优化内存试用。refcount用以标识指向这个zval变量容器的变量个数。</p>

<p>变量容器在”refcount“变成0时就被销毁。</p>

<p>[php] view plain copy
$a = “dog”;<br />
$c = $b = $a;<br />
xdebug_debug_zval( ‘a’ );<br />
unset( $b, $c );<br />
xdebug_debug_zval( ‘a’ );<br />
[php] view plain copy
结果：<br />
a: (refcount=2, is_ref=1)=’dog’
a: (refcount=1, is_ref=0)=’dog’</p>

<p>但是如果是数组或者对象</p>

<p>[php] view plain copy
$a=array(‘a’=&gt;’avalue’,’b’=&gt;’bvalue’);</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xdebug_debug_zval('a');  
</code></pre></div></div>

<p>结果：
a: (refcount=1, is_ref=0)=array (‘a’ =&gt; (refcount=1, is_ref=0)=’avalue’, ‘b’ =&gt; (refcount=1, is_ref=0)=’bvalue’)
[Finished in 0.2s]</p>

<p>所以它们的成员或属性存在自己的符号表中，所以上面一共有三个zval变量容器。a （array），a，b</p>

<p>当有变量引用时，用xdebug_debug_zval的到的结果为：is_ref=1;refcount=变量被引用的数量（算上变量本身）
当变量没有发生引用时，用xdebug_debug_zval的到的结果为：is_ref=0;refcount=变量被复制的数量（算上变量本身）</p>

<p>当有变量引用时，用debug_zval_dump的到的结果为：refcount=1（始终=1）
当变量没有发生引用时，用debug_zval_dump的到的结果为：refcount=变量被复制的数量（算上变量本身）+1</p>

:ET