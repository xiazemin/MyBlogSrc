I"G<p>https://blog.csdn.net/qq_15964039/article/details/105578965</p>

<p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件。分片上传不仅可以避免因网络环境不好导致的一直需要从文件起始位置还是上传的问题，还能使用多线程对不同分块数据进行并发发送，提高发送效率，降低发送时间。</p>

<p>分片上传主要适用于以下几种场景：</p>

<p>网络环境不好：当出现上传失败的时候，可以对失败的Part进行独立的重试，而不需要重新上传其他的Part。
断点续传：中途暂停之后，可以从上次上传完成的Part的位置继续上传。
加速上传：要上传到OSS的本地文件很大的时候，可以并行上传多个Part以加快上传。
流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见。
文件较大：一般文件比较大时，默认情况下一般都会采用分片上传。
分片上传的整个流程大致如下：</p>

<p>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；
初始化一个分片上传任务，返回本次分片上传唯一标识；
按照一定的策略（串行或并行）发送各个分片数据块；
发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件。</p>

<p>http://blog.csdn.net/majinggogogo/article/details/87890142
<!-- more -->
https://juejin.cn/post/6850037258863673357
https://github.com/debug-null/vue-simple-upload/blob/master/src/utils/sendRequest-domo.js</p>

<p>https://segmentfault.com/a/1190000038408148
https://segmentfault.com/a/1190000009448892</p>

<p>秒传</p>

<p>1、什么是秒传</p>

<p>通俗的说，你把要上传的东西上传，服务器会先做MD5校验，如果服务器上有一样的东西，它就直接给你个新地址，其实你下载的都是服务器上的同一个文件，想要不秒传，其实只要让MD5改变，就是对文件本身做一下修改（改名字不行），例如一个文本文件，你多加几个字，MD5就变了，就不会秒传了.</p>

<p>2、本文实现的秒传核心逻辑</p>

<p>a、利用redis的set方法存放文件上传状态，其中key为文件上传的md5，value为是否上传完成的标志位，</p>

<p>b、当标志位true为上传已经完成，此时如果有相同文件上传，则进入秒传逻辑。如果标志位为false，则说明还没上传完成，此时需要在调用set的方法，保存块号文件记录的路径，其中key为上传文件md5加一个固定前缀，value为块号文件记录路径</p>

<p>分片上传</p>

<p>1.什么是分片上传</p>

<p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件。</p>

<p>2.分片上传的场景</p>

<p>1.大文件上传</p>

<p>2.网络环境环境不好，存在需要重传风险的场景</p>

<p>断点续传</p>

<p>1、什么是断点续传</p>

<p>断点续传是在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传或者下载未完成的部分，而没有必要从头开始上传或者下载。本文的断点续传主要是针对断点上传场景。</p>

<p>2、应用场景</p>

<p>断点续传可以看成是分片上传的一个衍生，因此可以使用分片上传的场景，都可以使用断点续传。</p>

<p>3、实现断点续传的核心逻辑</p>

<p>在分片上传的过程中，如果因为系统崩溃或者网络中断等异常因素导致上传中断，这时候客户端需要记录上传的进度。在之后支持再次上传时，可以继续从上次上传中断的地方进行继续上传。</p>

<p>为了避免客户端在上传之后的进度数据被删除而导致重新开始从头上传的问题，服务端也可以提供相应的接口便于客户端对已经上传的分片数据进行查询，从而使客户端知道已经上传的分片数据，从而从下一个分片数据开始继续上传。</p>

<p>4、实现流程步骤</p>

<p>a、方案一，常规步骤</p>

<p>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；
 初始化一个分片上传任务，返回本次分片上传唯一标识；
 按照一定的策略（串行或并行）发送各个分片数据块；
 发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件。
b、方案二、本文实现的步骤</p>

<p>前端（客户端）需要根据固定大小对文件进行分片，请求后端（服务端）时要带上分片序号和大小
 服务端创建conf文件用来记录分块位置，conf文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认的0,已上传的就是Byte.MAX_VALUE 127（这步是实现断点续传和秒传的核心步骤）
服务器按照请求数据中给的分片序号和每片分块大小（分片大小是固定且一样的）算出开始位置，与读取到的文件片段数据，写入文件。
5、分片上传/断点上传代码实现</p>

<p>a、前端采用百度提供的webuploader的插件，进行分片。因本文主要介绍服务端代码实现，webuploader如何进行分片，具体实现可以查看如下链接:</p>

<p>http://fex.baidu.com/webuploader/getting-started.html</p>

<p>b、后端用两种方式实现文件写入，一种是用RandomAccessFile，如果对RandomAccessFile不熟悉的朋友，可以查看如下链接:</p>

<p>https://blog.csdn.net/dimudan2015/article/details/81910690</p>

<p>另一种是使用MappedByteBuffer，对MappedByteBuffer不熟悉的朋友，可以查看如下链接进行了解:</p>

<p>https://www.jianshu.com/p/f90866dcbffc</p>

<p>https://developer.51cto.com/art/202101/641082.htm</p>

<p>https://www.alibabacloud.com/help/zh/doc-detail/31850.htm</p>

<p>流程说明如下：</p>

<p>将待上传文件按照一定大小进行分片。
使用InitiateMultipartUpload接口初始化一个分片上传任务。
使用UploadPart接口上传分片。
文件切分成Part之后，文件顺序是通过上传过程中指定的partNumber来确定，所以您可以并发上传这些碎片。并发数并非越多越快，请结合自身网络状况和设备负载综合考虑。</p>

<p>若您希望终止上传任务，可调用AbortMultipartUpload接口，成功上传的Part会一并删除。</p>

<p>使用CompleteMultipartUpload接口将Part组合成一个Object。</p>

<p>断点续传操作方式
在使用分片上传的过程中，如果因意外导致上传失败，可以在重启的时候通过ListMultipartUploads和ListParts两个接口来获取某个Object上的所有的分片上传任务和每个分片上传任务中上传成功的Part列表。然后从最后一块成功上传的Part开始继续上传，从而达到断点续传的效果。</p>
:ET