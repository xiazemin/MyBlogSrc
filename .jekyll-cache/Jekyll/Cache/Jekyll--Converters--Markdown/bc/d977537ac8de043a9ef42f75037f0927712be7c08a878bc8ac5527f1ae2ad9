I"q<p>mapper.php
reducer.php
<!-- more --></p>

<p>#!/usr/local/bin/php<br />
&lt;?php<br />
$word2count = array();<br />
// input comes from STDIN (standard input)<br />
// You can this code :$stdin = fopen(“php://stdin”, “r”);<br />
while (($line = fgets(STDIN)) !== false) {<br />
    // remove leading and trailing whitespace and lowercase<br />
    $line = strtolower(trim($line));<br />
    // split the line into words while removing any empty string<br />
    $words = preg_split(‘/\W/’, $line, 0, PREG_SPLIT_NO_EMPTY);<br />
    // increase counters<br />
    foreach ($words as $word) {<br />
        $word2count[$word] += 1;<br />
    }<br />
}<br />
// write the results to STDOUT (standard output)<br />
// what we output here will be the input for the<br />
// Reduce step, i.e. the input for reducer.py<br />
foreach ($word2count as $word =&gt; $count) {<br />
    // tab-delimited<br />
    echo $word, chr(9), $count, PHP_EOL;<br />
}<br />
?&gt;</p>

<p>#!/usr/local/bin/php<br />
&lt;?php<br />
$word2count = array();<br />
// input comes from STDIN<br />
while (($line = fgets(STDIN)) !== false) {<br />
    // remove leading and trailing whitespace<br />
    $line = trim($line);<br />
    // parse the input we got from mapper.php<br />
    list($word, $count) = explode(chr(9), $line);<br />
    // convert count (currently a string) to int<br />
    $count = intval($count);<br />
    // sum counts<br />
    if ($count &gt; 0) $word2count[$word] += $count;<br />
}<br />
// sort the words lexigraphically<br />
//<br />
// this set is NOT required, we just do it so that our<br />
// final output will look more like the official Hadoop<br />
// word count examples<br />
ksort($word2count);<br />
// write the results to STDOUT (standard output)<br />
foreach ($word2count as $word =&gt; $count) {<br />
    echo $word, chr(9), $count, PHP_EOL;<br />
}<br />
?&gt;</p>

:ET