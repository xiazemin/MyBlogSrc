I"K	<p>go vet是一个用于检查Go语言源码中静态错误的简单工具，消灭go vet扫描出的静态错误，有利于提高代码质量和养成良好的编码习惯，常见go vet错误总结如下：</p>

<p>passes lock by value …</p>

<p>不能值传递锁，否则可能导致死锁，如下
func createTest(message chan []byte, lock sync.Mutex){
    …
}</p>

<p>应将sync.Mutex改为指针* sync.Mutex</p>

<p>… not compatible with reflect.StructTag.Get</p>

<p>omitempty表示在打印时若该项为empty则不打印，应将其放在双引号内，如下</p>

<p>type Parameters struct {
    Unit        int <code class="language-plaintext highlighter-rouge">json:"test_unit"</code>
    MaxInstance int <code class="language-plaintext highlighter-rouge">json:"max_instance",omitempty</code>
    MinInstance int <code class="language-plaintext highlighter-rouge">json:"min_instance",omitempty</code>
}</p>

<p>应改为json:”max_instance,omitempty”</p>

<p>tag尽量要成pair出现，如下会被扫描</p>

<p>type LoggerConfig struct {
    Level string “level”
    File  string “file”
}</p>

<p>在不影响功能的前提下建议将tag改为pair形式,如：
Level string <code class="language-plaintext highlighter-rouge">json:"level"</code></p>

<p>tag中不要出现不必要的其他字符，比如空格，如下会报错</p>

<p>关于print</p>

<p>fmt.Println() 这种会自动格式化的函数不要指定输出格式，如 %s，如下，会报错：
fmt.Println(“write failed! %v”, err)</p>

<p>fmt.Errorf() 这种fmt.xxxf型需要指定输出格式的，请手动指定，如%v，如下，会报错
return fmt.Errorf(“write failed! “, err)</p>

<p>result of fmt.Errorf call not used
fmt.Errorf()不会打印信息，只是格式化构造出一个error，如果想打印日志，请使用logger</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fmt.Errorf("write failed: %v ", err)
return 
</code></pre></div></div>

<p>panic会显示抛出异常（相当于java中的throw），panic后的代码为dead code</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if err != nil {
    panic("xxx failed")
    return
}
</code></pre></div></div>

<p>如上所示，panic后一行return为dead code
<!-- more --></p>
:ET