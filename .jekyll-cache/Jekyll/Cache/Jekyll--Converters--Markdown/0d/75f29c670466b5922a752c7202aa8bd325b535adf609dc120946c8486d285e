I"‘<p>he status variables have the following meanings.</p>

<p>Aborted_clients</p>

<p>The number of connections that were aborted because the client died without closing the connection properly. See Section B.3.2.10, ‚ÄúCommunication Errors and Aborted Connections‚Äù.</p>

<p>Aborted_connects</p>

<p>The number of failed attempts to connect to the MySQL server. See Section B.3.2.10, ‚ÄúCommunication Errors and Aborted Connections‚Äù.</p>

<p>For additional connection-related information, check the Connection_errors_xxx status variables and the host_cache table.</p>

<p>Binlog_cache_disk_use</p>

<p>The number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size and used a temporary file to store statements from the transaction.</p>

<p>The number of nontransactional statements that caused the binary log transaction cache to be written to disk is tracked separately in the Binlog_stmt_cache_disk_use status variable.</p>

<p>Binlog_cache_use</p>

<p>The number of transactions that used the binary log cache.</p>

<p>Binlog_stmt_cache_disk_use</p>

<p>The number of nontransaction statements that used the binary log statement cache but that exceeded the value of binlog_stmt_cache_size and used a temporary file to store those statements.</p>

<p>Binlog_stmt_cache_use</p>

<p>The number of nontransactional statements that used the binary log statement cache.</p>

<p>Bytes_received</p>

<p>The number of bytes received from all clients.</p>

<p>Bytes_sent</p>

<p>The number of bytes sent to all clients.</p>

<p>Com_xxx</p>

<p>The Com_xxx statement counter variables indicate the number of times each xxx statement has been executed. There is one status variable for each type of statement. For example, Com_delete and Com_update count DELETE and UPDATE statements, respectively. Com_delete_multi and Com_update_multi are similar but apply to DELETE and UPDATE statements that use multiple-table syntax.</p>

<p>If a query result is returned from query cache, the server increments the Qcache_hits status variable, not Com_select. See Section 8.10.3.4, ‚ÄúQuery Cache Status and Maintenance‚Äù.</p>

<p>All Com_stmt_xxx variables are increased even if a prepared statement argument is unknown or an error occurred during execution. In other words, their values correspond to the number of requests issued, not to the number of requests successfully completed.</p>

<p>The Com_stmt_xxx status variables are as follows:</p>

<p>Com_stmt_prepare</p>

<p>Com_stmt_execute</p>

<p>Com_stmt_fetch</p>

<p>Com_stmt_send_long_data</p>

<p>Com_stmt_reset</p>

<p>Com_stmt_close</p>

<p>Those variables stand for prepared statement commands. Their names refer to the COM_xxx command set used in the network layer. In other words, their values increase whenever prepared statement API calls such as mysql_stmt_prepare(), mysql_stmt_execute(), and so forth are executed. However, Com_stmt_prepare, Com_stmt_execute and Com_stmt_close also increase for PREPARE, EXECUTE, or DEALLOCATE PREPARE, respectively. Additionally, the values of the older statement counter variables Com_prepare_sql, Com_execute_sql, and Com_dealloc_sql increase for the PREPARE, EXECUTE, and DEALLOCATE PREPARE statements. Com_stmt_fetch stands for the total number of network round-trips issued when fetching from cursors.</p>

<p>Com_stmt_reprepare indicates the number of times statements were automatically reprepared by the server after metadata changes to tables or views referred to by the statement. A reprepare operation increments Com_stmt_reprepare, and also Com_stmt_prepare.</p>

<p>Compression</p>

<p>Whether the client connection uses compression in the client/server protocol.</p>

<p>Connection_errors_xxx</p>

<p>These variables provide information about errors that occur during the client connection process. They are global only and represent error counts aggregated across connections from all hosts. These variables track errors not accounted for by the host cache (see Section 5.1.11.2, ‚ÄúDNS Lookups and the Host Cache‚Äù), such as errors that are not associated with TCP connections, occur very early in the connection process (even before an IP address is known), or are not specific to any particular IP address (such as out-of-memory conditions).</p>

<p>Connection_errors_accept</p>

<p>The number of errors that occurred during calls to accept() on the listening port.</p>

<p>Connection_errors_internal</p>

<p>The number of connections refused due to internal errors in the server, such as failure to start a new thread or an out-of-memory condition.</p>

<p>Connection_errors_max_connections</p>

<p>The number of connections refused because the server max_connections limit was reached.</p>

<p>Connection_errors_peer_address</p>

<p>The number of errors that occurred while searching for connecting client IP addresses.</p>

<p>Connection_errors_select</p>

<p>The number of errors that occurred during calls to select() or poll() on the listening port. (Failure of this operation does not necessarily means a client connection was rejected.)</p>

<p>Connection_errors_tcpwrap</p>

<p>The number of connections refused by the libwrap library.</p>

<p>Connections</p>

<p>The number of connection attempts (successful or not) to the MySQL server.</p>

<p>Created_tmp_disk_tables</p>

<p>The number of internal on-disk temporary tables created by the server while executing statements.</p>

<p>You can compare the number of internal on-disk temporary tables created to the total number of internal temporary tables created by comparing Created_tmp_disk_tables and Created_tmp_tables values.</p>

<p>See also Section 8.4.4, ‚ÄúInternal Temporary Table Use in MySQL‚Äù.</p>

<p>Created_tmp_files</p>

<p>How many temporary files mysqld has created.</p>

<p>Created_tmp_tables</p>

<p>The number of internal temporary tables created by the server while executing statements.</p>

<p>You can compare the number of internal on-disk temporary tables created to the total number of internal temporary tables created by comparing Created_tmp_disk_tables and Created_tmp_tables values.</p>

<p>See also Section 8.4.4, ‚ÄúInternal Temporary Table Use in MySQL‚Äù.</p>

<p>Each invocation of the SHOW STATUS statement uses an internal temporary table and increments the global Created_tmp_tables value.</p>

<p>Delayed_errors</p>

<p>The number of rows written with INSERT DELAYED for which some error occurred (probably duplicate key).</p>

<p>This status variable is deprecated (because DELAYED inserts are deprecated); expect it to be removed in a future release.</p>

<p>Delayed_insert_threads</p>

<p>The number of INSERT DELAYED handler threads in use for nontransactional tables.</p>

<p>This status variable is deprecated (because DELAYED inserts are deprecated); expect it to be removed in a future release.</p>

<p>Delayed_writes</p>

<p>The number of INSERT DELAYED rows written to nontransactional tables.</p>

<p>This status variable is deprecated (because DELAYED inserts are deprecated); expect it to be removed in a future release.</p>

<p>Flush_commands</p>

<p>The number of times the server flushes tables, whether because a user executed a FLUSH TABLES statement or due to internal server operation. It is also incremented by receipt of a COM_REFRESH packet. This is in contrast to Com_flush, which indicates how many FLUSH statements have been executed, whether FLUSH TABLES, FLUSH LOGS, and so forth.</p>

<p>Handler_commit</p>

<p>The number of internal COMMIT statements.</p>

<p>Handler_delete</p>

<p>The number of times that rows have been deleted from tables.</p>

<p>Handler_external_lock</p>

<p>The server increments this variable for each call to its external_lock() function, which generally occurs at the beginning and end of access to a table instance. There might be differences among storage engines. This variable can be used, for example, to discover for a statement that accesses a partitioned table how many partitions were pruned before locking occurred: Check how much the counter increased for the statement, subtract 2 (2 calls for the table itself), then divide by 2 to get the number of partitions locked.</p>

<p>Handler_mrr_init</p>

<p>The number of times the server uses a storage engine‚Äôs own Multi-Range Read implementation for table access.</p>

<p>Handler_prepare</p>

<p>A counter for the prepare phase of two-phase commit operations.</p>

<p>Handler_read_first</p>

<p>The number of times the first entry in an index was read. If this value is high, it suggests that the server is doing a lot of full index scans (for example, SELECT col1 FROM foo, assuming that col1 is indexed).</p>

<p>Handler_read_key</p>

<p>The number of requests to read a row based on a key. If this value is high, it is a good indication that your tables are properly indexed for your queries.</p>

<p>Handler_read_last</p>

<p>The number of requests to read the last key in an index. With ORDER BY, the server issues a first-key request followed by several next-key requests, whereas with ORDER BY DESC, the server issues a last-key request followed by several previous-key requests.</p>

<p>Handler_read_next</p>

<p>The number of requests to read the next row in key order. This value is incremented if you are querying an index column with a range constraint or if you are doing an index scan.</p>

<p>Handler_read_prev</p>

<p>The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ‚Ä¶ DESC.</p>

<p>Handler_read_rnd</p>

<p>The number of requests to read a row based on a fixed position. This value is high if you are doing a lot of queries that require sorting of the result. You probably have a lot of queries that require MySQL to scan entire tables or you have joins that do not use keys properly.</p>

<p>Handler_read_rnd_next</p>

<p>The number of requests to read the next row in the data file. This value is high if you are doing a lot of table scans. Generally this suggests that your tables are not properly indexed or that your queries are not written to take advantage of the indexes you have.</p>

<p>Handler_rollback</p>

<p>The number of requests for a storage engine to perform a rollback operation.</p>

<p>Handler_savepoint</p>

<p>The number of requests for a storage engine to place a savepoint.</p>

<p>Handler_savepoint_rollback</p>

<p>The number of requests for a storage engine to roll back to a savepoint.</p>

<p>Handler_update</p>

<p>The number of requests to update a row in a table.</p>

<p>Handler_write</p>

<p>The number of requests to insert a row in a table.</p>

<p>Innodb_available_undo_logs</p>

<p>The total number of available InnoDB rollback segments. Supplements the innodb_rollback_segments system variable, which defines the number of active rollback segments.</p>

<p>Innodb_buffer_pool_dump_status</p>

<p>The progress of an operation to record the pages held in the InnoDB buffer pool, triggered by the setting of innodb_buffer_pool_dump_at_shutdown or innodb_buffer_pool_dump_now.</p>

<p>For related information and examples, see Section 14.8.3.5, ‚ÄúSaving and Restoring the Buffer Pool State‚Äù.</p>

<p>Innodb_buffer_pool_load_status</p>

<p>The progress of an operation to warm up the InnoDB buffer pool by reading in a set of pages corresponding to an earlier point in time, triggered by the setting of innodb_buffer_pool_load_at_startup or innodb_buffer_pool_load_now. If the operation introduces too much overhead, you can cancel it by setting innodb_buffer_pool_load_abort.</p>

<p>For related information and examples, see Section 14.8.3.5, ‚ÄúSaving and Restoring the Buffer Pool State‚Äù.</p>

<p>Innodb_buffer_pool_bytes_data</p>

<p>The total number of bytes in the InnoDB buffer pool containing data. The number includes both dirty and clean pages. For more accurate memory usage calculations than with Innodb_buffer_pool_pages_data, when compressed tables cause the buffer pool to hold pages of different sizes.</p>

<p>Innodb_buffer_pool_pages_data</p>

<p>The number of pages in the InnoDB buffer pool containing data. The number includes both dirty and clean pages. When using compressed tables, the reported Innodb_buffer_pool_pages_data value may be larger than Innodb_buffer_pool_pages_total (Bug #59550).</p>

<p>Innodb_buffer_pool_bytes_dirty</p>

<p>The total current number of bytes held in dirty pages in the InnoDB buffer pool. For more accurate memory usage calculations than with Innodb_buffer_pool_pages_dirty, when compressed tables cause the buffer pool to hold pages of different sizes.</p>

<p>Innodb_buffer_pool_pages_dirty</p>

<p>The current number of dirty pages in the InnoDB buffer pool.</p>

<p>Innodb_buffer_pool_pages_flushed</p>

<p>The number of requests to flush pages from the InnoDB buffer pool.</p>

<p>Innodb_buffer_pool_pages_free</p>

<p>The number of free pages in the InnoDB buffer pool.</p>

<p>Innodb_buffer_pool_pages_latched</p>

<p>The number of latched pages in the InnoDB buffer pool. These are pages currently being read or written, or that cannot be flushed or removed for some other reason. Calculation of this variable is expensive, so it is available only when the UNIV_DEBUG system is defined at server build time.</p>

<p>Innodb_buffer_pool_pages_misc</p>

<p>The number of pages in the InnoDB buffer pool that are busy because they have been allocated for administrative overhead, such as row locks or the adaptive hash index. This value can also be calculated as Innodb_buffer_pool_pages_total ‚àí Innodb_buffer_pool_pages_free ‚àí Innodb_buffer_pool_pages_data. When using compressed tables, Innodb_buffer_pool_pages_misc may report an out-of-bounds value (Bug #59550).</p>

<p>Innodb_buffer_pool_pages_total</p>

<p>The total size of the InnoDB buffer pool, in pages. When using compressed tables, the reported Innodb_buffer_pool_pages_data value may be larger than Innodb_buffer_pool_pages_total (Bug #59550)</p>

<p>Innodb_buffer_pool_read_ahead</p>

<p>The number of pages read into the InnoDB buffer pool by the read-ahead background thread.</p>

<p>Innodb_buffer_pool_read_ahead_evicted</p>

<p>The number of pages read into the InnoDB buffer pool by the read-ahead background thread that were subsequently evicted without having been accessed by queries.</p>

<p>Innodb_buffer_pool_read_ahead_rnd</p>

<p>The number of ‚Äúrandom‚Äù read-aheads initiated by InnoDB. This happens when a query scans a large portion of a table but in random order.</p>

<p>Innodb_buffer_pool_read_requests</p>

<p>The number of logical read requests.</p>

<p>Innodb_buffer_pool_reads</p>

<p>The number of logical reads that InnoDB could not satisfy from the buffer pool, and had to read directly from disk.</p>

<p>Innodb_buffer_pool_wait_free</p>

<p>Normally, writes to the InnoDB buffer pool happen in the background. When InnoDB needs to read or create a page and no clean pages are available, InnoDB flushes some dirty pages first and waits for that operation to finish. This counter counts instances of these waits. If innodb_buffer_pool_size has been set properly, this value should be small.</p>

<p>Innodb_buffer_pool_write_requests</p>

<p>The number of writes done to the InnoDB buffer pool.</p>

<p>Innodb_data_fsyncs</p>

<p>The number of fsync() operations so far. The frequency of fsync() calls is influenced by the setting of the innodb_flush_method configuration option.</p>

<p>Innodb_data_pending_fsyncs</p>

<p>The current number of pending fsync() operations. The frequency of fsync() calls is influenced by the setting of the innodb_flush_method configuration option.</p>

<p>Innodb_data_pending_reads</p>

<p>The current number of pending reads.</p>

<p>Innodb_data_pending_writes</p>

<p>The current number of pending writes.</p>

<p>Innodb_data_read</p>

<p>The amount of data read since the server was started (in bytes).</p>

<p>Innodb_data_reads</p>

<p>The total number of data reads (OS file reads).</p>

<p>Innodb_data_writes</p>

<p>The total number of data writes.</p>

<p>Innodb_data_written</p>

<p>The amount of data written so far, in bytes.</p>

<p>Innodb_dblwr_pages_written</p>

<p>The number of pages that have been written to the doublewrite buffer. See Section 14.12.1, ‚ÄúInnoDB Disk I/O‚Äù.</p>

<p>Innodb_dblwr_writes</p>

<p>The number of doublewrite operations that have been performed. See Section 14.12.1, ‚ÄúInnoDB Disk I/O‚Äù.</p>

<p>Innodb_have_atomic_builtins</p>

<p>Indicates whether the server was built with atomic instructions.</p>

<p>Innodb_log_waits</p>

<p>The number of times that the log buffer was too small and a wait was required for it to be flushed before continuing.</p>

<p>Innodb_log_write_requests</p>

<p>The number of write requests for the InnoDB redo log.</p>

<p>Innodb_log_writes</p>

<p>The number of physical writes to the InnoDB redo log file.</p>

<p>Innodb_num_open_files</p>

<p>The number of files InnoDB currently holds open.</p>

<p>Innodb_os_log_fsyncs</p>

<p>The number of fsync() writes done to the InnoDB redo log files.</p>

<p>Innodb_os_log_pending_fsyncs</p>

<p>The number of pending fsync() operations for the InnoDB redo log files.</p>

<p>Innodb_os_log_pending_writes</p>

<p>The number of pending writes to the InnoDB redo log files.</p>

<p>Innodb_os_log_written</p>

<p>The number of bytes written to the InnoDB redo log files.</p>

<p>Innodb_page_size</p>

<p>InnoDB page size (default 16KB). Many values are counted in pages; the page size enables them to be easily converted to bytes.</p>

<p>Innodb_pages_created</p>

<p>The number of pages created by operations on InnoDB tables.</p>

<p>Innodb_pages_read</p>

<p>The number of pages read from the InnoDB buffer pool by operations on InnoDB tables.</p>

<p>Innodb_pages_written</p>

<p>The number of pages written by operations on InnoDB tables.</p>

<p>Innodb_row_lock_current_waits</p>

<p>The number of row locks currently being waited for by operations on InnoDB tables.</p>

<p>Innodb_row_lock_time</p>

<p>The total time spent in acquiring row locks for InnoDB tables, in milliseconds.</p>

<p>Innodb_row_lock_time_avg</p>

<p>The average time to acquire a row lock for InnoDB tables, in milliseconds.</p>

<p>Innodb_row_lock_time_max</p>

<p>The maximum time to acquire a row lock for InnoDB tables, in milliseconds.</p>

<p>Innodb_row_lock_waits</p>

<p>The number of times operations on InnoDB tables had to wait for a row lock.</p>

<p>Innodb_rows_deleted</p>

<p>The number of rows deleted from InnoDB tables.</p>

<p>Innodb_rows_inserted</p>

<p>The number of rows inserted into InnoDB tables.</p>

<p>Innodb_rows_read</p>

<p>The number of rows read from InnoDB tables.</p>

<p>Innodb_rows_updated</p>

<p>The number of rows updated in InnoDB tables.</p>

<p>Innodb_truncated_status_writes</p>

<p>The number of times output from the SHOW ENGINE INNODB STATUS statement has been truncated.</p>

<p>Key_blocks_not_flushed</p>

<p>The number of key blocks in the MyISAM key cache that have changed but have not yet been flushed to disk.</p>

<p>Key_blocks_unused</p>

<p>The number of unused blocks in the MyISAM key cache. You can use this value to determine how much of the key cache is in use; see the discussion of key_buffer_size in Section 5.1.7, ‚ÄúServer System Variables‚Äù.</p>

<p>Key_blocks_used</p>

<p>The number of used blocks in the MyISAM key cache. This value is a high-water mark that indicates the maximum number of blocks that have ever been in use at one time.</p>

<p>Key_read_requests</p>

<p>The number of requests to read a key block from the MyISAM key cache.</p>

<p>Key_reads</p>

<p>The number of physical reads of a key block from disk into the MyISAM key cache. If Key_reads is large, then your key_buffer_size value is probably too small. The cache miss rate can be calculated as Key_reads/Key_read_requests.</p>

<p>Key_write_requests</p>

<p>The number of requests to write a key block to the MyISAM key cache.</p>

<p>Key_writes</p>

<p>The number of physical writes of a key block from the MyISAM key cache to disk.</p>

<p>Last_query_cost</p>

<p>The total cost of the last compiled query as computed by the query optimizer. This is useful for comparing the cost of different query plans for the same query. The default value of 0 means that no query has been compiled yet. The default value is 0. Last_query_cost has session scope.</p>

<p>Last_query_cost can be computed accurately only for simple, ‚Äúflat‚Äù queries, but not for complex queries such as those containing subqueries or UNION. For the latter, the value is set to 0.</p>

<p>Last_query_partial_plans</p>

<p>The number of iterations the query optimizer made in execution plan construction for the previous query. Last_query_cost has session scope.</p>

<p>Max_used_connections</p>

<p>The maximum number of connections that have been in use simultaneously since the server started.</p>

<p>Not_flushed_delayed_rows</p>

<p>The number of rows waiting to be written to nontransactional tables in INSERT DELAYED queues.</p>

<p>This status variable is deprecated (because DELAYED inserts are deprecated); expect it to be removed in a future release.</p>

<p>Open_files</p>

<p>The number of files that are open. This count includes regular files opened by the server. It does not include other types of files such as sockets or pipes. Also, the count does not include files that storage engines open using their own internal functions rather than asking the server level to do so.</p>

<p>Open_streams</p>

<p>The number of streams that are open (used mainly for logging).</p>

<p>Open_table_definitions</p>

<p>The number of cached .frm files.</p>

<p>Open_tables</p>

<p>The number of tables that are open.</p>

<p>Opened_files</p>

<p>The number of files that have been opened with my_open() (a mysys library function). Parts of the server that open files without using this function do not increment the count.</p>

<p>Opened_table_definitions</p>

<p>The number of .frm files that have been cached.</p>

<p>Opened_tables</p>

<p>The number of tables that have been opened. If Opened_tables is big, your table_open_cache value is probably too small.</p>

<p>Performance_schema_xxx</p>

<p>Performance Schema status variables are listed in Section 22.16, ‚ÄúPerformance Schema Status Variables‚Äù. These variables provide information about instrumentation that could not be loaded or created due to memory constraints.</p>

<p>Prepared_stmt_count</p>

<p>The current number of prepared statements. (The maximum number of statements is given by the max_prepared_stmt_count system variable.)</p>

<p>Qcache_free_blocks</p>

<p>The number of free memory blocks in the query cache.</p>

<p>Qcache_free_memory</p>

<p>The amount of free memory for the query cache.</p>

<p>Qcache_hits</p>

<p>The number of query cache hits.</p>

<p>The discussion at the beginning of this section indicates how to relate this statement-counting status variable to other such variables.</p>

<p>Qcache_inserts</p>

<p>The number of queries added to the query cache.</p>

<p>Qcache_lowmem_prunes</p>

<p>The number of queries that were deleted from the query cache because of low memory.</p>

<p>Qcache_not_cached</p>

<p>The number of noncached queries (not cacheable, or not cached due to the query_cache_type setting).</p>

<p>Qcache_queries_in_cache</p>

<p>The number of queries registered in the query cache.</p>

<p>Qcache_total_blocks</p>

<p>The total number of blocks in the query cache.</p>

<p>Queries</p>

<p>The number of statements executed by the server. This variable includes statements executed within stored programs, unlike the Questions variable. It does not count COM_PING or COM_STATISTICS commands.</p>

<p>The discussion at the beginning of this section indicates how to relate this statement-counting status variable to other such variables.</p>

<p>Questions</p>

<p>The number of statements executed by the server. This includes only statements sent to the server by clients and not statements executed within stored programs, unlike the Queries variable. This variable does not count COM_PING, COM_STATISTICS, COM_STMT_PREPARE, COM_STMT_CLOSE, or COM_STMT_RESET commands.</p>

<p>The discussion at the beginning of this section indicates how to relate this statement-counting status variable to other such variables.</p>

<p>Rpl_semi_sync_master_clients</p>

<p>The number of semisynchronous replicas.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_net_avg_wait_time</p>

<p>The average time in microseconds the source waited for a replica reply.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_net_wait_time</p>

<p>The total time in microseconds the source waited for replica replies.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_net_waits</p>

<p>The total number of times the source waited for replica replies.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_no_times</p>

<p>The number of times the source turned off semisynchronous replication.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_no_tx</p>

<p>The number of commits that were not acknowledged successfully by a replica.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_status</p>

<p>Whether semisynchronous replication currently is operational on the source. The value is ON if the plugin has been enabled and a commit acknowledgment has occurred. It is OFF if the plugin is not enabled or the source has fallen back to asynchronous replication due to commit acknowledgment timeout.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_timefunc_failures</p>

<p>The number of times the source failed when calling time functions such as gettimeofday().</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_tx_avg_wait_time</p>

<p>The average time in microseconds the source waited for each transaction.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_tx_wait_time</p>

<p>The total time in microseconds the source waited for transactions.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_tx_waits</p>

<p>The total number of times the source waited for transactions.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_wait_pos_backtraverse</p>

<p>The total number of times the source waited for an event with binary coordinates lower than events waited for previously. This can occur when the order in which transactions start waiting for a reply is different from the order in which their binary log events are written.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_wait_sessions</p>

<p>The number of sessions currently waiting for replica replies.</p>

<p>This variable is available only if the source-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_master_yes_tx</p>

<p>The number of commits that were acknowledged successfully by a replica.</p>

<p>This variable is available only if the master-side semisynchronous replication plugin is installed.</p>

<p>Rpl_semi_sync_slave_status</p>

<p>Whether semisynchronous replication currently is operational on the replica. This is ON if the plugin has been enabled and the replica I/O thread is running, OFF otherwise.</p>

<p>This variable is available only if the replica-side semisynchronous replication plugin is installed.</p>

<p>Rsa_public_key</p>

<p>This variable is available if MySQL was compiled using OpenSSL (see Section 6.3.4, ‚ÄúSSL Library-Dependent Capabilities‚Äù). Its value is the public key used by the sha256_password authentication plugin for RSA key pair-based password exchange. The value is nonempty only if the server successfully initializes the private and public keys in the files named by the sha256_password_private_key_path and sha256_password_public_key_path system variables. The value of Rsa_public_key comes from the latter file.</p>

<p>For information about sha256_password, see Section 6.4.1.4, ‚ÄúSHA-256 Pluggable Authentication‚Äù.</p>

<p>Select_full_join</p>

<p>The number of joins that perform table scans because they do not use indexes. If this value is not 0, you should carefully check the indexes of your tables.</p>

<p>Select_full_range_join</p>

<p>The number of joins that used a range search on a reference table.</p>

<p>Select_range</p>

<p>The number of joins that used ranges on the first table. This is normally not a critical issue even if the value is quite large.</p>

<p>Select_range_check</p>

<p>The number of joins without keys that check for key usage after each row. If this is not 0, you should carefully check the indexes of your tables.</p>

<p>Select_scan</p>

<p>The number of joins that did a full scan of the first table.</p>

<p>Slave_heartbeat_period</p>

<p>Shows the replication heartbeat interval (in seconds) on a replica.</p>

<p>Slave_last_heartbeat</p>

<p>Shows when the most recent heartbeat signal was received by a replica, as a TIMESTAMP value.</p>

<p>Slave_open_temp_tables</p>

<p>The number of temporary tables that the replica SQL thread currently has open. If the value is greater than zero, it is not safe to shut down the replica; see Section 17.4.1.29, ‚ÄúReplication and Temporary Tables‚Äù.</p>

<p>Slave_received_heartbeats</p>

<p>This counter increments with each replication heartbeat received by a replica since the last time that the replica was restarted or reset, or a CHANGE MASTER TO statement was issued.</p>

<p>Slave_retried_transactions</p>

<p>The total number of times since startup that the replica SQL thread has retried transactions.</p>

<p>Slave_rows_last_search_algorithm_used</p>

<p>The search algorithm that was most recently used by this replica to locate rows for row-based replication. The result shows whether the replica used indexes, a table scan, or hashing as the search algorithm for the last transaction executed on any channel.</p>

<p>The method used depends on the setting for the slave_rows_search_algorithms system variable, and the keys that are available on the relevant table.</p>

<p>This variable is available only for debug builds of MySQL.</p>

<p>Slave_running</p>

<p>This is ON if this server is a replica that is connected to a replication source, and both the I/O and SQL threads are running; otherwise, it is OFF.</p>

<p>Slow_launch_threads</p>

<p>The number of threads that have taken more than slow_launch_time seconds to create.</p>

<p>Slow_queries</p>

<p>The number of queries that have taken more than long_query_time seconds. This counter increments regardless of whether the slow query log is enabled. For information about that log, see Section 5.4.5, ‚ÄúThe Slow Query Log‚Äù.</p>

<p>Sort_merge_passes</p>

<p>The number of merge passes that the sort algorithm has had to do. If this value is large, you should consider increasing the value of the sort_buffer_size system variable.</p>

<p>Sort_range</p>

<p>The number of sorts that were done using ranges.</p>

<p>Sort_rows</p>

<p>The number of sorted rows.</p>

<p>Sort_scan</p>

<p>The number of sorts that were done by scanning the table.</p>

<p>Ssl_accept_renegotiates</p>

<p>The number of negotiates needed to establish the connection.</p>

<p>Ssl_accepts</p>

<p>The number of accepted SSL connections.</p>

<p>Ssl_callback_cache_hits</p>

<p>The number of callback cache hits.</p>

<p>Ssl_cipher</p>

<p>The current encryption cipher (empty for unencrypted connections).</p>

<p>Ssl_cipher_list</p>

<p>The list of possible SSL ciphers (empty for non-SSL connections).</p>

<p>Ssl_client_connects</p>

<p>The number of SSL connection attempts to an SSL-enabled source.</p>

<p>Ssl_connect_renegotiates</p>

<p>The number of negotiates needed to establish the connection to an SSL-enabled source.</p>

<p>Ssl_ctx_verify_depth</p>

<p>The SSL context verification depth (how many certificates in the chain are tested).</p>

<p>Ssl_ctx_verify_mode</p>

<p>The SSL context verification mode.</p>

<p>Ssl_default_timeout</p>

<p>The default SSL timeout.</p>

<p>Ssl_finished_accepts</p>

<p>The number of successful SSL connections to the server.</p>

<p>Ssl_finished_connects</p>

<p>The number of successful replica connections to an SSL-enabled source.</p>

<p>Ssl_server_not_after</p>

<p>The last date for which the SSL certificate is valid. To check SSL certificate expiration information, use this statement:</p>

<p>mysql&gt; SHOW STATUS LIKE ‚ÄòSsl_server_not%‚Äô;
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+
| Variable_name         | Value                    |
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+
| Ssl_server_not_after  | Apr 28 14:16:39 2025 GMT |
| Ssl_server_not_before | May  1 14:16:39 2015 GMT |
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+
In MySQL 5.6, the value is empty unless the connection uses SSL.</p>

<p>Ssl_server_not_before</p>

<p>The first date for which the SSL certificate is valid.</p>

<p>In MySQL 5.6, the value is empty unless the connection uses SSL.</p>

<p>Ssl_session_cache_hits</p>

<p>The number of SSL session cache hits.</p>

<p>Ssl_session_cache_misses</p>

<p>The number of SSL session cache misses.</p>

<p>Ssl_session_cache_mode</p>

<p>The SSL session cache mode.</p>

<p>Ssl_session_cache_overflows</p>

<p>The number of SSL session cache overflows.</p>

<p>Ssl_session_cache_size</p>

<p>The SSL session cache size.</p>

<p>Ssl_session_cache_timeouts</p>

<p>The number of SSL session cache timeouts.</p>

<p>Ssl_sessions_reused</p>

<p>How many SSL connections were reused from the cache.</p>

<p>Ssl_used_session_cache_entries</p>

<p>How many SSL session cache entries were used.</p>

<p>Ssl_verify_depth</p>

<p>The verification depth for replication SSL connections.</p>

<p>Ssl_verify_mode</p>

<p>The verification mode used by the server for a connection that uses SSL. The value is a bitmask; bits are defined in the openssl/ssl.h header file:</p>

<h1 id="define-ssl_verify_none-----------------0x00">define SSL_VERIFY_NONE                 0x00</h1>
<h1 id="define-ssl_verify_peer-----------------0x01">define SSL_VERIFY_PEER                 0x01</h1>
<h1 id="define-ssl_verify_fail_if_no_peer_cert-0x02">define SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02</h1>
<h1 id="define-ssl_verify_client_once----------0x04">define SSL_VERIFY_CLIENT_ONCE          0x04</h1>
<p>SSL_VERIFY_PEER indicates that the server asks for a client certificate. If the client supplies one, the server performs verification and proceeds only if verification is successful. SSL_VERIFY_CLIENT_ONCE indicates that a request for the client certificate is done only in the initial handshake.</p>

<p>Ssl_version</p>

<p>The SSL protocol version of the connection (for example, TLSv1). If the connection is not encrypted, the value is empty.</p>

<p>Table_locks_immediate</p>

<p>The number of times that a request for a table lock could be granted immediately.</p>

<p>Table_locks_waited</p>

<p>The number of times that a request for a table lock could not be granted immediately and a wait was needed. If this is high and you have performance problems, you should first optimize your queries, and then either split your table or tables or use replication.</p>

<p>Table_open_cache_hits</p>

<p>The number of hits for open tables cache lookups.</p>

<p>Table_open_cache_misses</p>

<p>The number of misses for open tables cache lookups.</p>

<p>Table_open_cache_overflows</p>

<p>The number of overflows for the open tables cache. This is the number of times, after a table is opened or closed, a cache instance has an unused entry and the size of the instance is larger than table_open_cache / table_open_cache_instances.</p>

<p>Tc_log_max_pages_used</p>

<p>For the memory-mapped implementation of the log that is used by mysqld when it acts as the transaction coordinator for recovery of internal XA transactions, this variable indicates the largest number of pages used for the log since the server started. If the product of Tc_log_max_pages_used and Tc_log_page_size is always significantly less than the log size, the size is larger than necessary and can be reduced. (The size is set by the ‚Äìlog-tc-size option. This variable is unused: It is unneeded for binary log-based recovery, and the memory-mapped recovery log method is not used unless the number of storage engines that are capable of two-phase commit and that support XA transactions is greater than one. (InnoDB is the only applicable engine.)</p>

<p>Tc_log_page_size</p>

<p>The page size used for the memory-mapped implementation of the XA recovery log. The default value is determined using getpagesize(). This variable is unused for the same reasons as described for Tc_log_max_pages_used.</p>

<p>Tc_log_page_waits</p>

<p>For the memory-mapped implementation of the recovery log, this variable increments each time the server was not able to commit a transaction and had to wait for a free page in the log. If this value is large, you might want to increase the log size (with the ‚Äìlog-tc-size option). For binary log-based recovery, this variable increments each time the binary log cannot be closed because there are two-phase commits in progress. (The close operation waits until all such transactions are finished.)</p>

<p>Threads_cached</p>

<p>The number of threads in the thread cache.</p>

<p>Threads_connected</p>

<p>The number of currently open connections.</p>

<p>Threads_created</p>

<p>The number of threads created to handle connections. If Threads_created is big, you may want to increase the thread_cache_size value. The cache miss rate can be calculated as Threads_created/Connections.</p>

<p>Threads_running</p>

<p>The number of threads that are not sleeping.</p>

<p>Uptime</p>

<p>The number of seconds that the server has been up.</p>

<p>Uptime_since_flush_status</p>

<p>The number of seconds since the most recent FLUSH STATUS statement.</p>

<p>https://dev.mysql.com/doc/refman/5.6/en/server-status-variables.html
<!-- more -->
mysql ÊîØÊåÅ‰∏âÁßçËøûÊé•ÊñπÂºè</p>

<p>socket
named pipe
shared memory
named pipe Âíå shared memory Âè™ËÉΩÂú®Êú¨Âú∞ËøûÊé•Êï∞ÊçÆÂ∫ìÔºåÈÄÇÁî®Âú∫ÊôØËæÉÂ∞ë</p>

<p>thread_cache
ÂèÇÊï∞ thread_cache_size ÊéßÂà∂‰∫Ü thread_cache ÁöÑÂ§ßÂ∞èÔºå ËÆæ‰∏∫0Êó∂ÂÖ≥Èó≠ thread_cacheÔºå‰∏çÁºìÂ≠òÁ©∫Èó≤thread</p>

<p>mysql&gt; show status like ‚ÄòThreads%‚Äô;
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-+‚Äî‚Äî-+
| Variable_name     | Value |
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-+‚Äî‚Äî-+
| Threads_cached    | 1     |
| Threads_connected | 1     |
| Threads_created   | 2     |
| Threads_running   | 1     |
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-+‚Äî‚Äî-+
4 rows in set (0.02 sec)</p>

<p>Threads_cachedÔºöÁºìÂ≠òÁöÑ threadÔºåÊñ∞ËøûÊé•Âª∫Á´ãÊó∂Ôºå‰ºòÂÖà‰ΩøÁî®cache‰∏≠ÁöÑthread</p>

<p>Threads_connectedÔºöÂ∑≤ËøûÊé•ÁöÑ thread</p>

<p>Threads_createdÔºöÂª∫Á´ãÁöÑ thread Êï∞Èáè</p>

<p>Threads_runningÔºörunningÁä∂ÊÄÅÁöÑ thread Êï∞Èáè</p>

<p>Threads_created = Threads_cached + Threads_connected</p>

<p>Threads_running &lt;= Threads_connected</p>

<p>MySQL Âª∫Á´ãÊñ∞ËøûÊé•ÈùûÂ∏∏Ê∂àËÄóËµÑÊ∫êÔºåÈ¢ëÁπÅ‰ΩøÁî®Áü≠ËøûÊé•ÔºåÂèàÊ≤°ÊúâÂÖ∂‰ªñÁªÑ‰ª∂ÂÆûÁé∞ËøûÊé•Ê±†Êó∂ÔºåÂèØ‰ª•ÈÄÇÂΩìÊèêÈ´ò thread_cache_sizeÔºåÈôç‰ΩéÊñ∞Âª∫ËøûÊé•ÁöÑÂºÄÈîÄ</p>

<p>.ÊØè‰∏™ËøûÊé•ÁöÑÈôêÂà∂
Èô§‰∫ÜÂèÇÊï∞ max_user_connections ÈôêÂà∂ÊØè‰∏™Áî®Êà∑ÁöÑÊúÄÂ§ßËøûÊé•Êï∞ÔºåËøòÂèØ‰ª•ÂØπÊØè‰∏™Áî®Êà∑Âà∂ÂÆöÊõ¥ÁªÜËá¥ÁöÑÈôêÂà∂</p>

<p>‰ª•‰∏ãÂõõ‰∏™ÈôêÂà∂‰øùÂ≠òÂú®mysql.userË°®‰∏≠</p>

<p>MAX_QUERIES_PER_HOUR ÊØèÂ∞èÊó∂ÊúÄÂ§ßËØ∑Ê±ÇÊï∞ÔºàËØ≠Âè•Êï∞ÈáèÔºâ
MAX_UPDATES_PER_HOUR ÊØèÂ∞èÊó∂ÊúÄÂ§ßÊõ¥Êñ∞Êï∞ÔºàÊõ¥Êñ∞ËØ≠Âè•ÁöÑÊï∞ÈáèÔºâ
MAX_CONNECTIONS_PER_HOUR ÊØèÂ∞èÊó∂ÊúÄÂ§ßËøûÊé•Êï∞
MAX_USER_CONNECTIONS Ëøô‰∏™Áî®Êà∑ÁöÑÊúÄÂ§ßËøûÊé•Êï∞</p>

<p>http://mysql.taobao.org/monthly/2018/02/07/</p>

<p>ÂÆ¢Êà∑Ë¥≠‰π∞ÁöÑDBËøûÊé•Êï∞ÊòØËøô‰∏™„ÄÇmax_connectionsÔºåÂÖÅËÆ∏ÂêåÊó∂ËøûÊé•DBÁöÑÂÆ¢Êà∑Á´ØÁöÑÊúÄÂ§ßÁ∫øÁ®ãÊï∞„ÄÇÂ¶ÇÊûúÂÆ¢Êà∑Á´ØÁöÑËøûÊé•Êï∞Ë∂ÖËøá‰∫Ümax_connections,Â∫îÁî®Â∞±‰ºöÊî∂Âà∞‚Äútoo many connections‚ÄùÁöÑÈîôËØØ„ÄÇ</p>

<p>Â∑≤ÁªèÂàõÂª∫ÁöÑËøûÊé•Êï∞
Threads_createdÊòØ‰∏∫Â§ÑÁêÜËøûÊé•ËÄåÂàõÂª∫ÁöÑÁ∫øÁ®ãÊï∞„ÄÇÂÜçÊòéÁ°Æ‰∏ÄÁÇπÊù•ËØ¥ÊòØËøûÊé•Âà∞DBÁöÑÔºåÂÆ¢Êà∑Á´ØÁöÑÁ∫øÁ®ãÊï∞„ÄÇÂÆÉÂåÖÂê´Threads_running„ÄÇ Â¶ÇÊûúThreads_createdÂæàÂ§ßÔºåÂèØËÉΩÈúÄË¶ÅË∞ÉÊï¥thread_cache_size„ÄÇ
Á∫øÁ®ãcacheÂëΩ‰∏≠Áéá=Threads_created/ConnectionsÔºåcacheÂëΩ‰∏≠ÁéáÂΩìÁÑ∂Ë∂äÂ§ßË∂äÂ•ΩÔºåÂ¶ÇÊûúÂëΩ‰∏≠ÁéáËæÉ‰ΩéÔºåÂèØ‰ª•ËÄÉËôëÂ¢ûÂä†thread_cache_size„ÄÇ</p>

<p>https://developer.aliyun.com/article/683460</p>

<p>Á∫øÁ®ãÁöÑÁä∂ÊÄÅ‰ø°ÊÅØÔºö</p>

<p>Â∑≤ÁªèÂàõÂª∫ÁöÑËøûÊé•Êï∞
Threads_createdÊòØ‰∏∫Â§ÑÁêÜËøûÊé•ËÄåÂàõÂª∫ÁöÑÁ∫øÁ®ãÊï∞„ÄÇÂÜçÊòéÁ°Æ‰∏ÄÁÇπÊù•ËØ¥ÊòØËøûÊé•Âà∞DBÁöÑÔºåÂÆ¢Êà∑Á´ØÁöÑÁ∫øÁ®ãÊï∞„ÄÇÂÆÉÂåÖÂê´Threads_running„ÄÇ Â¶ÇÊûúThreads_createdÂæàÂ§ßÔºåÂèØËÉΩÈúÄË¶ÅË∞ÉÊï¥thread_cache_size„ÄÇ</p>

<p>Á∫øÁ®ãcacheÂëΩ‰∏≠Áéá=Threads_created/ConnectionsÔºåcacheÂëΩ‰∏≠ÁéáÂΩìÁÑ∂Ë∂äÂ§ßË∂äÂ•ΩÔºåÂ¶ÇÊûúÂëΩ‰∏≠ÁéáËæÉ‰ΩéÔºåÂèØ‰ª•ËÄÉËôëÂ¢ûÂä†thread_cache_size„ÄÇ</p>

<p>Â∑≤ÁªèËøûÊé•ÁöÑËøûÊé•Êï∞
Thread_connectedÂΩìÂâçÊâìÂºÄÁöÑËøûÊé•Êï∞„ÄÇ</p>

<p>Ê¥ªË∑ÉËøûÊé•Êï∞
Threads_runningÂÆòÊñπÁöÑËØ¥Ê≥ïÊòØ‚ÄúÊ≤°ÊúâsleepÁöÑÁ∫øÁ®ãÊï∞‚Äù„ÄÇÈ°æÂêçÊÄù‰πâÊòØÔºöÂú®DBÁ´ØÊ≠£Âú®ÊâßË°åÁöÑÂÆ¢Êà∑Á´ØÁ∫øÁ®ãÊÄªÊï∞„ÄÇServerÁ´Ø‰øùÊåÅËøô‰∫õËøûÊé•ÂêåÊó∂ÂÆ¢Êà∑Á´ØÁ≠âÂæÖÂõûÂ§ç„ÄÇÊúâ‰∫õÁ∫øÁ®ãÂèØËÉΩÊ∂àËÄóCPUÊàñËÄÖIOÔºåÊúâ‰∫õÁ∫øÁ®ãÂèØËÉΩÂï•‰πüÊ≤°ÂÅöÂçïÁ∫ØÁ≠âË°®ÈîÅÊàñË°åÈîÅÈáäÊîæ„ÄÇÂΩìDBÊâßË°åÂÆåËøô‰∏™Á∫øÁ®ãÔºåÂÆ¢Êà∑Á´ØÊî∂Âà∞ÂõûÂ§çÔºåÁ∫øÁ®ãÁöÑÁä∂ÊÄÅÂ∞±‰ºö‰ªé‚Äùrunning‚Äù ÂèòÊàê ‚Äúconnected‚Äù.</p>

<p>Â¶ÇÊûúÂèëÁé∞Ê¥ªË∑ÉÈìæÊé•Êï∞Á™ÅÁÑ∂Â¢ûÈ´òÔºåÈÄöÂ∏∏ÊòØ‰ª•‰∏ãÂéüÂõ†Ôºö</p>

<p>Â∫îÁî®ÁºìÂ≠òÂ§±Êïà
Á™ÅÂèëÊµÅÈáè</p>

<p>https://cloud.tencent.com/developer/article/1816132</p>

<p>Êü•ÁúãprocesslistËøô‰∏™Ë°®ÔºåË°®ÁªìÊûÑ
IDÔºöÁ∫øÁ®ãIDÔºåËøô‰∏™‰ø°ÊÅØÂØπÁªüËÆ°Êù•ËØ¥Ê≤°ÊúâÂ§™Â§ß‰ΩúÁî®</p>

<p>USERÔºöËøûÊé•‰ΩøÁî®ÁöÑË¥¶Âè∑ÔºåËøô‰∏™ÊòØ‰∏Ä‰∏™ÁªüËÆ°Áª¥Â∫¶ÔºåÁî®‰∫éÁªüËÆ°Êù•Ëá™ÊØè‰∏™Ë¥¶Âè∑ÁöÑËøûÊé•Êï∞</p>

<p>HOSTÔºöËøûÊé•ÂÆ¢Êà∑Á´ØÁöÑIP/hostname+ÁΩëÁªúÁ´ØÂè£Âè∑ÔºåËøô‰πüÊòØ‰∏Ä‰∏™ÁªüËÆ°Áª¥Â∫¶ÔºåÁî®‰∫éÁ°ÆÂÆöÂèëËµ∑ËøûÊé•ÁöÑÂÆ¢Êà∑Á´Ø</p>

<p>DBÔºöËøûÊé•‰ΩøÁî®ÁöÑdefault databaseÔºåDBÈÄöÂ∏∏ÂØπÂ∫îÂÖ∑‰ΩìÊúçÂä°ÔºåÂèØ‰ª•Áî®‰∫éÂà§Êñ≠ÊúçÂä°ÁöÑËøûÊé•ÂàÜÂ∏ÉÔºåËøôÁÆó‰∏Ä‰∏™ÁªüËÆ°Áª¥Â∫¶</p>

<p>COMMANDÔºöËøûÊé•ÁöÑÂä®‰ΩúÔºåÂÆûÈôÖ‰∏äÊòØËØ¥ËøûÊé•Â§Ñ‰∫éÂì™‰∏™Èò∂ÊÆµÔºåÂ∏∏ËßÅÁöÑÊúâSleep„ÄÅQuery„ÄÅConnect„ÄÅStatisticsÁ≠âÔºåËøô‰πüÊòØ‰∏Ä‰∏™ÁªüËÆ°Áª¥Â∫¶Ôºå‰∏ªË¶ÅÁî®‰∫éÂà§Êñ≠ËøûÊé•ÊòØÂê¶Â§Ñ‰∫éÁ©∫Èó≤Áä∂ÊÄÅ</p>

<p>TIMEÔºöËøûÊé•Â§Ñ‰∫éÂΩìÂâçÁä∂ÊÄÅÁöÑÊó∂Èó¥ÔºåÂçï‰ΩçÊòØsÔºåËøô‰∏™Âú®ÂêéÈù¢ËøõË°åÂàÜÊûêÔºåÊöÇ‰∏çÁÆóÂú®ËøûÊé•Áä∂ÊÄÅÁöÑÁªüËÆ°Áª¥Â∫¶‰∏≠</p>

<p>STATEÔºöËøûÊé•ÁöÑÁä∂ÊÄÅÔºåË°®Á§∫ÂΩìÂâçMySQlËøûÊé•Ê≠£Âú®ÂÅö‰ªÄ‰πàÊìç‰ΩúÔºåËøôÁÆó‰∏Ä‰∏™ÁªüËÆ°Áª¥Â∫¶ÔºåÂèØËÉΩÁöÑÂÄº‰πüÊØîËæÉÂ§öÔºåËØ¶ÁªÜÂèØ‰ª•Êü•ÈòÖÂÆòÊñπÊñáÊ°£</p>

<p>INFOÔºöËøûÊé•Ê≠£Âú®ÊâßË°åÁöÑSQLÔºåËøô‰∏™Âú®‰∏ã‰∏ÄËäÇÂàÜÊûêÔºåÊöÇ‰∏çÁÆóÂú®ËøûÊé•Áä∂ÊÄÅÁöÑÁªüËÆ°Áª¥Â∫¶‰∏≠</p>

<p>https://dbaplus.cn/news-11-1396-1.html</p>

<p>mysql -uroot -h127.0.0.1 -e‚Äùuse svc_t; show processlist;‚Äù |grep -v Sleep |wc -l
show status like ‚ÄòTable%‚Äô;
mysql -uroot -h127.0.0.1 -e‚Äùuse svc_t;show status like ‚ÄòTable%‚Äô;‚Äù
mysql -uroot -h127.0.0.1 -e‚Äùuse svc_t;show status like ‚Äò%lock%‚Äô;‚Äù
mysql -uroot -h127.0.0.1 -e‚Äùuse svc_t;SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; ‚Äú
mysql -uroot -h127.0.0.1 -e‚Äùuse svc_t;SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;  ‚Äú
mysql -uroot -h127.0.0.1 -e‚Äùuse svc_t;show variables like ‚Äò%timeout%‚Äô; ‚Äú</p>

<p>ÂêéÂè∞Á∫øÁ®ã
ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåInnoDB Â≠òÂÇ®ÂºïÊìéÊúâ 13 ‰∏™ÂêéÂè∞Á∫øÁ®ãÔºö</p>

<p>‰∏Ä‰∏™ master Á∫øÁ®ã</p>

<p>‰∏Ä‰∏™ÈîÅÁõëÊéßÁ∫øÁ®ã</p>

<p>‰∏Ä‰∏™ÈîôËØØÁõëÊéßÁ∫øÁ®ã</p>

<p>ÂçÅ‰∏™ IO Á∫øÁ®ã</p>

<p>ÊèíÂÖ•ÁºìÂ≠òÁ∫øÁ®ã</p>

<p>Êó•ÂøóÁ∫øÁ®ã</p>

<p>ËØªÁ∫øÁ®ãÔºàÈªòËÆ§ 4 ‰∏™Ôºâ</p>

<p>ÂÜôÁ∫øÁ®ãÔºàÈªòËÆ§ 4 ‰∏™Ôºâ</p>

<p>ÂÜÖÂ≠òÊ±†
InnoDB Â≠òÂÇ®ÂºïÊìéÁöÑÂÜÖÂ≠òÊ±†ÂåÖÂê´ÔºöÁºìÂÜ≤Ê±†„ÄÅÊó•ÂøóÁºìÂ≠òÊ±†„ÄÅÈ¢ùÂ§ñÂÜÖÂ≠òÊ±†„ÄÇËøô‰∫õÂÜÖÂ≠òÁöÑÂ§ßÂ∞èÂàÜÂà´Áî±ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÂèÇÊï∞ÂÜ≥ÂÆö„ÄÇÂÖ∂‰∏≠Âç†ÊØîÊúÄÂ§ßÁöÑÊòØÁºìÂÜ≤Ê±†ÔºåÈáåÈù¢ÂåÖÂê´‰∫ÜÊï∞ÊçÆÁºìÂ≠òÈ°µ„ÄÅÁ¥¢Âºï„ÄÅÊèíÂÖ•ÁºìÂ≠ò„ÄÅËá™ÈÄÇÂ∫îÂìàÂ∏åÁ¥¢Âºï„ÄÅÈîÅ‰ø°ÊÅØÂíåÊï∞ÊçÆÂ≠óÂÖ∏„ÄÇInnoDB ‰ºöÂú®ËØªÂèñÊï∞ÊçÆÂ∫ìÊï∞ÊçÆÁöÑÊó∂ÂÄôÔºåÂ∞ÜÊï∞ÊçÆÁºìÂ≠òÂà∞ÁºìÂÜ≤Ê±†‰∏≠ÔºåËÄåÂú®‰øÆÊîπÊï∞ÊçÆÁöÑÊó∂ÂÄôÔºå‰ºöÂÖàÊääÁºìÂÜ≤Ê±†‰∏≠ÁöÑÊï∞ÊçÆ‰øÆÊîπÊéâÔºå‰∏ÄÊó¶‰øÆÊîπËøáÁöÑÊï∞ÊçÆÈ°µÂ∞±‰ºöË¢´Ê†áËÆ∞‰∏∫ËÑèÈ°µÔºåËÄåËÑèÈ°µÂàô‰ºöË¢´ master Á∫øÁ®ãÊåâÁÖß‰∏ÄÂÆöÁöÑÈ¢ëÁéáÂà∑Êñ∞Âà∞Á£ÅÁõò‰∏≠„ÄÇÊó•ÂøóÁºìÂ≠òÂàôÊòØÁºìÂ≠ò‰∫Üredo-log ‰ø°ÊÅØÔºåÁÑ∂ÂêéÂÜçÂà∑Êñ∞Âà∞ redo-log Êñá‰ª∂‰∏≠„ÄÇÈ¢ùÂ§ñÂÜÖÂ≠òÊ±†ÂàôÊòØÂú®ÂØπ‰∏Ä‰∫õÊï∞ÊçÆÁªìÊûÑÊú¨Ë∫´ÂàÜÈÖçÂÜÖÂ≠òÊó∂‰ºö‰ªéÈ¢ùÂ§ñÂÜÖÂ≠òÊ±†‰∏≠Áî≥ËØ∑ÂÜÖÂ≠òÔºåÂΩìËØ•Âå∫ÂüüÂÜÖÂ≠ò‰∏çË∂≥Âàô‰ºöÂà∞ÁºìÂÜ≤Ê±†‰∏≠Áî≥ËØ∑„ÄÇ</p>

<p>Master Thread
InnoDB Â≠òÂÇ®ÂºïÊìéÁöÑ‰∏ªË¶ÅÂ∑•‰ΩúÈÉΩÂú®‰∏Ä‰∏™ÂçïÁã¨ÁöÑ Master Thread ‰∏≠ÂÆåÊàêÔºåÂÖ∂ÂÜÖÈÉ®Áî±Âõõ‰∏™Âæ™ÁéØ‰ΩìÊûÑÊàêÔºö‰∏ªÂæ™ÁéØÔºà loop Ôºâ„ÄÅÂêéÂè∞Âæ™ÁéØÔºà background loop Ôºâ„ÄÅÂà∑Êñ∞Âæ™ÁéØÔºà flush loop Ôºâ„ÄÅÊöÇÂÅúÂæ™ÁéØÔºà suspend loop Ôºâ
https://www.pianshen.com/article/476679761/</p>

<p>‰∏Ä„ÄÅÂÖ≥‰∫é‰∏Ä‰∏™SQLÁöÑÁÆÄÂçïÁöÑÂ∑•‰ΩúËøáÁ®ã
1„ÄÅÂ∑•‰ΩúÂâçÊèêÊèèËø∞
„ÄÄ„ÄÄ1„ÄÅÂêØÂä®MySQLÔºåÂú®ÂÜÖÂ≠ò‰∏≠ÂàÜÈÖç‰∏Ä‰∏™Â§ßÁ©∫Èó¥innodb_buffer_pool(ËøòÊúâlog_buffer)
„ÄÄ„ÄÄ2„ÄÅÂ§öÁî®Êà∑Á∫øÁ®ãËøûÊé•MySQLÔºå‰ªéÂÜÖÂ≠òÂàÜÈÖçÁî®Êà∑Â∑•‰ΩúÁ©∫Èó¥(ÂÖ∂‰∏≠ÊéíÂ∫èÁ©∫Èó¥)
„ÄÄ„ÄÄ3„ÄÅÁ£ÅÁõò‰∏äÊúâÊï∞ÊçÆÂ∫ìÊñá‰ª∂„ÄÅib_logfile„ÄÅtmpÁõÆÂΩï„ÄÅundo
2„ÄÅSQLÁöÑÁÆÄÊòìÊµÅÁ®ã
„ÄÄ„ÄÄ1„ÄÅDQLÊìç‰Ωú
„ÄÄ„ÄÄ„ÄÄ„ÄÄ1„ÄÅÈ¶ñÂÖàËøõË°åÂÜÖÂ≠òËØª
„ÄÄ„ÄÄ„ÄÄ„ÄÄ2„ÄÅÂ¶ÇÊûúbuffer pool‰∏≠Ê≤°ÊúâÊâÄÈúÄÊï∞ÊçÆÔºåÂ∞±ËøõË°åÁâ©ÁêÜËØª
„ÄÄ„ÄÄ„ÄÄ„ÄÄ3„ÄÅÁâ©ÁêÜËØªÊï∞ÊçÆËØªÂÖ•buffer poolÔºåÂÜçËøîÂõûÁªôÁî®Êà∑Â∑•‰ΩúÁ©∫Èó¥
„ÄÄ„ÄÄ2„ÄÅDMLÊìç‰Ωú(‰æãupdate)
„ÄÄ„ÄÄ„ÄÄ„ÄÄ1„ÄÅÂÜÖÂ≠òËØªÔºåÁÑ∂ÂêéËøõË°åÁâ©ÁêÜËØªÔºåËØªÂèñÊâÄÈúÄ‰øÆÊîπÁöÑÊï∞ÊçÆË°å
„ÄÄ„ÄÄ„ÄÄ„ÄÄ2„ÄÅ‰ªéÁ£ÅÁõòË∞ÉÂÖ•undoÈ°µÂà∞buffer pool‰∏≠
„ÄÄ„ÄÄ„ÄÄ„ÄÄ3„ÄÅ‰øÆÊîπÂâçÁöÑÊï∞ÊçÆÂ≠òÂÖ•undoÈ°µÈáåÔºå‰∫ßÁîüredo
„ÄÄ„ÄÄ„ÄÄ„ÄÄ4„ÄÅ‰øÆÊîπÊï∞ÊçÆË°å(buffer pool‰∏≠Êï∞ÊçÆÈ°µÊàêËÑèÈ°µ)Ôºå‰∫ßÁîüredo
„ÄÄ„ÄÄ„ÄÄ„ÄÄ5„ÄÅÁîüÊàêÁöÑredoÂÖàÊòØÂ≠ò‰∫éÁî®Êà∑Â∑•‰ΩúÁ©∫Èó¥ÔºåÊã©Êú∫Êã∑ÂÖ•log_buffer‰∏≠
„ÄÄ„ÄÄ„ÄÄ„ÄÄ6„ÄÅlogÁ∫øÁ®ã‰∏çÊñ≠ÁöÑÂ∞Ülog_buffer‰∏≠ÁöÑËÆ∞ÂΩïÂÜôÂÖ•redo logfile‰∏≠
„ÄÄ„ÄÄ„ÄÄ„ÄÄ7„ÄÅ‰øÆÊîπÂÆåÊâÄÊúâÊï∞ÊçÆË°åÔºåÊèê‰∫§‰∫ãÂä°ÔºåÂàªÊÑèÂÜçËß¶Âèë‰∏Ä‰∏ãlogÁ∫øÁ®ã
„ÄÄ„ÄÄ„ÄÄ„ÄÄ8„ÄÅÂæÖlog_buffer‰∏≠ÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØÈÉΩÂÜôÂÆåÔºåÂìçÂ∫î‰∫ãÂä°Êèê‰∫§ÊàêÂäü
„ÄÄ„ÄÄËá≥Ê≠§ÔºåÊó•ÂøóÂÜôÂÖ•Á£ÅÁõòÔºåÂÜÖÂ≠òËÑèÂùóËøòÂú®buffer pool‰∏≠(ÂêéÂè∞Âë®ÊúüÂÜôÂÖ•Á£ÅÁõòÔºåÈáäÊîæbuffer poolÁ©∫Èó¥)„ÄÇ
„ÄÄ„ÄÄ
„ÄÄ„ÄÄMySQLÁöÑÂ∑•‰ΩúÊú∫Âà∂ÊòØÂçïËøõÁ®ãÂ§öÁ∫øÁ®ãÔºöIOÁ∫øÁ®ã=‰∏Ä‰∏™logÁ∫øÁ®ã+Âõõ‰∏™readÁ∫øÁ®ã+Âõõ‰∏™writeÁ∫øÁ®ã
„ÄÄ„ÄÄ
„ÄÄ„ÄÄ1„ÄÅËØªÊìç‰ΩúÔºöinnodb_read_io_threads
„ÄÄ„ÄÄ1„ÄÅÂèëËµ∑ËÄÖÔºöÁî®Êà∑Á∫øÁ®ãÂèëËµ∑ËØªËØ∑Ê±Ç
„ÄÄ„ÄÄ2„ÄÅÂÆåÊàêËÄÖÔºöËØªÁ∫øÁ®ãÊâßË°åËØ∑Ê±ÇÈòüÂàó‰∏≠ÁöÑËØªËØ∑Ê±ÇÊìç‰Ωú
„ÄÄ„ÄÄ3„ÄÅÂ¶Ç‰ΩïË∞ÉÊï¥ËØªÁ∫øÁ®ãÁöÑÊï∞Èáè
„ÄÄ„ÄÄ2„ÄÅÂÜôÊìç‰ΩúÔºöinnodb_write_io_threads
„ÄÄ„ÄÄ1„ÄÅÂèëËµ∑ËÄÖÔºöpage_cleanerÁ∫øÁ®ãÂèëËµ∑
„ÄÄ„ÄÄ2„ÄÅÂÆåÊàêËÄÖÔºöÂÜôÁ∫øÁ®ãÊâßË°åËØ∑Ê±ÇÈòüÂàó‰∏≠ÁöÑÂÜôËØ∑Ê±ÇÊìç‰Ωú
„ÄÄ„ÄÄ3„ÄÅÂ¶Ç‰ΩïË∞ÉÊï¥ÂÜôÁ∫øÁ®ãÁöÑÊï∞Èáè
„ÄÄ„ÄÄhttps://www.cnblogs.com/geaozhang/p/7214257.html
„ÄÄ„ÄÄ
„ÄÄ„ÄÄ
 Killing Threads (PROCESSLIST, KILL)
 Killing threads (KILL)
Once you‚Äôve identified the problem thread, you can use the KILL command to kill it. There are basic two variations on the KILL command.</p>

<h1 id="kill-the-entire-connection">Kill the entire connection.</h1>
<p>KILL thread_id;
KILL CONNECTION thread_id;</p>

<h1 id="terminate-the-currently-executing-statement-but-leave-the-connection-intact">Terminate the currently executing statement, but leave the connection intact.</h1>
<p>KILL QUERY thread_id;
https://oracle-base.com/articles/mysql/mysql-killing-threads</p>

<p>27.12.21.5 The processlist Table
ID</p>

<p>The connection identifier. This is the same value displayed in the Id column of the SHOW PROCESSLIST statement, displayed in the PROCESSLIST_ID column of the Performance Schema threads table, and returned by the CONNECTION_ID() function within the thread.</p>

<p>USER</p>

<p>The MySQL user who issued the statement. A value of system user refers to a nonclient thread spawned by the server to handle tasks internally, for example, a delayed-row handler thread or an I/O or SQL thread used on replica hosts. For system user, there is no host specified in the Host column. unauthenticated user refers to a thread that has become associated with a client connection but for which authentication of the client user has not yet occurred. event_scheduler refers to the thread that monitors scheduled events (see Section 25.4, ‚ÄúUsing the Event Scheduler‚Äù).</p>

<p>Note
A USER value of system user is distinct from the SYSTEM_USER privilege. The former designates internal threads. The latter distinguishes the system user and regular user account categories (see Section 6.2.11, ‚ÄúAccount Categories‚Äù).</p>

<p>HOST</p>

<p>The host name of the client issuing the statement (except for system user, for which there is no host). The host name for TCP/IP connections is reported in host_name:client_port format to make it easier to determine which client is doing what.</p>

<p>DB</p>

<p>The default database for the thread, or NULL if none has been selected.</p>

<p>COMMAND</p>

<p>The type of command the thread is executing on behalf of the client, or Sleep if the session is idle. For descriptions of thread commands, see Section 8.14, ‚ÄúExamining Server Thread (Process) Information‚Äù. The value of this column corresponds to the COM_xxx commands of the client/server protocol and Com_xxx status variables. See Section 5.1.10, ‚ÄúServer Status Variables‚Äù</p>

<p>TIME</p>

<p>The time in seconds that the thread has been in its current state. For a replica SQL thread, the value is the number of seconds between the timestamp of the last replicated event and the real time of the replica host. See Section 17.2.3, ‚ÄúReplication Threads‚Äù.</p>

<p>STATE</p>

<p>An action, event, or state that indicates what the thread is doing. For descriptions of STATE values, see Section 8.14, ‚ÄúExamining Server Thread (Process) Information‚Äù.</p>

<p>Most states correspond to very quick operations. If a thread stays in a given state for many seconds, there might be a problem that needs to be investigated.</p>

<p>INFO</p>

<p>The statement the thread is executing, or NULL if it is executing no statement. The statement might be the one sent to the server, or an innermost statement if the statement executes other statements. For example, if a CALL statement executes a stored procedure that is executing a SELECT statement, the INFO value shows the SELECT statement.</p>

<p>https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/performance-schema-processlist-table.html#function_connection-id
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/performance-schema-processlist-table.html</p>

<p>ÂºÄÂêØÊï∞ÊçÆÂ∫ìÁöÑeventÊâßË°åË∞ÉÂ∫¶</p>

<blockquote>
  <p>Êü•ÁúãÊòØÂê¶ÂºÄÂêØÂÆöÊó∂Âô®</p>
</blockquote>

<p>mysql&gt; show variables like ‚Äò%event_scheduler%‚Äô;
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+‚Äî‚Äî-+
| Variable_name   | Value |
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+‚Äî‚Äî-+
| event_scheduler | OFF   |
+‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì+‚Äî‚Äî-+
https://www.cnblogs.com/geaozhang/p/6821692.html</p>

<p>How to share mysql connection between http goroutines?
The database/sql package manages the connection pooling automatically for you.</p>

<p>sql.Open(..) returns a handle which represents a connection pool, not a single connection. The database/sql package automatically opens a new connection if all connections in the pool are busy.</p>

<p>Applied to your code this means, that you just need to share the db-handle and use it in the HTTP handlers:</p>

<p>https://stackoverflow.com/questions/17376207/how-to-share-mysql-connection-between-http-goroutines</p>

<p>In Go 1.1 or newer, you can use db.SetMaxIdleConns(N) to limit the number of idle connections in the pool. This doesn‚Äôt limit the pool size, though.
In Go 1.2.1 or newer, you can use db.SetMaxOpenConns(N) to limit the number of total open connections to the database. Unfortunately, a deadlock bug (fix) prevents db.SetMaxOpenConns(N) from safely being used in 1.2.</p>

<p>http://go-database-sql.org/connection-pool.html
SetMaxOpenConnsÁî®‰∫éËÆæÁΩÆÊúÄÂ§ßÊâìÂºÄÁöÑËøûÊé•Êï∞ÔºåÈªòËÆ§ÂÄº‰∏∫0Ë°®Á§∫‰∏çÈôêÂà∂„ÄÇ
SetMaxIdleConnsÁî®‰∫éËÆæÁΩÆÈó≤ÁΩÆÁöÑËøûÊé•Êï∞„ÄÇ</p>

<p>ËÆæÁΩÆÊúÄÂ§ßÁöÑËøûÊé•Êï∞ÔºåÂèØ‰ª•ÈÅøÂÖçÂπ∂ÂèëÂ§™È´òÂØºËá¥ËøûÊé•mysqlÂá∫Áé∞too many connectionsÁöÑÈîôËØØ„ÄÇËÆæÁΩÆÈó≤ÁΩÆÁöÑËøûÊé•Êï∞ÂàôÂΩìÂºÄÂêØÁöÑ‰∏Ä‰∏™ËøûÊé•‰ΩøÁî®ÂÆåÊàêÂêéÂèØ‰ª•ÊîæÂú®Ê±†ÈáåÁ≠âÂÄô‰∏ã‰∏ÄÊ¨°‰ΩøÁî®„ÄÇ</p>

<p>https://cloud.tencent.com/developer/article/1071721
http://hopehook.com/blog/golang_db_pool</p>

<p>MySQLÁöÑMaxIdleConns‰∏çÂêàÁêÜÔºå‰ºöÂèòÊàêÁü≠ËøûÊé•
ÊòØÊàë‰ª¨Go MySQLÂÆ¢Êà∑Á´ØÊúÄÈáçË¶ÅÁöÑÈÖçÁΩÆ„ÄÇ</p>

<p>maxIdleCount ÊúÄÂ§ßÁ©∫Èó≤ËøûÊé•Êï∞ÔºåÈªòËÆ§‰∏çÈÖçÁΩÆÔºåÊòØ2‰∏™ÊúÄÂ§ßÁ©∫Èó≤ËøûÊé•</p>

<p>maxOpen ÊúÄÂ§ßËøûÊé•Êï∞ÔºåÈªòËÆ§‰∏çÈÖçÁΩÆÔºåÊòØ‰∏çÈôêÂà∂ÊúÄÂ§ßËøûÊé•Êï∞</p>

<p>maxLifetime ËøûÊé•ÊúÄÂ§ßÂ≠òÊ¥ªÊó∂Èó¥</p>

<p>maxIdleTime Á©∫Èó≤ËøûÊé•ÊúÄÂ§ßÂ≠òÊ¥ªÊó∂Èó¥
ÂΩìÁ™ÅÂèëÊµÅÈáèÊÉÖÂÜµ‰∏ãÔºåÁî±‰∫éËØ∑Ê±ÇÈáèÁ∫ßËøáÂ§ßÔºåË∂ÖËøá‰∫ÜÊúÄÂ§ßÁ©∫Èó≤ËøûÊé•Êï∞ÁöÑË¥üËΩΩÔºåÈÇ£‰πàÊñ∞ÁöÑËøûÊé•Âú®ÊîæÂÖ•ËøûÊé•Ê±†ÁöÑÊó∂ÂÄôÔºå‰ºöË¢´ÂÖ≥Èó≠ÔºåÂ∞ÜËøûÊé•ÂèòÊàêÁü≠ËøûÊé•ÔºåÂØºËá¥ÊúçÂä°ÊÄßËÉΩËøõ‰∏ÄÊ≠•ÊÅ∂Âåñ„ÄÇ‰∏∫‰∫ÜÈÅøÂÖçËøôÁßçÊÉÖÂÜµÔºå‰∏ãÈù¢Âàó‰∏æ‰∫ÜÔºåÂèØ‰ª•‰ºòÂåñÁöÑÊé™ÊñΩ„ÄÇ</p>

<p>ÊèêÂâçÂ∞ÜmaxIdleConnsËÆæÂ§ßÔºåÈÅøÂÖçÂá∫Áé∞Áü≠ËøûÊé•</p>

<p>ÂÅöÂ•ΩmysqlËØªÂÜôÂàÜÁ¶ª</p>

<p>ÊèêÂçámysqlÁöÑÂêûÂêêÈáèÔºöÁ≤æÁÆÄËøîÂõûÂ≠óÊÆµÔºåÊ≤°ÂøÖË¶ÅÁöÑÂ≠óÊÆµ‰∏çË¶ÅËøîÂõûÔºåËÉΩÂ§üÂ§üÂø´Â§çÁî®ËøûÊé•</p>

<p>ÂêûÂêêÈáèÁöÑÂåÖÂ∞ΩÈáè‰∏çË¶ÅÂ§™Â§ßÔºåÈÅøÂÖçÂàÜÂåÖ</p>

<p>‰ºòÂåñËøûÊé•Ê±†ÔºåÂΩìÂÆ¢Êà∑Á´ØÂà∞MySQLÁöÑËøûÊé•Êï∞Â§ß‰∫éÊúÄÂ§ßÁ©∫Èó≤ËøûÊé•ÁöÑÊó∂ÂÄôÔºåÂÖ≥Èó≠ËÉΩÂ§üÂÅö‰∏Ä‰∏ãÂª∂ËøüÔºàÂÆòÊñπ‰∏çÊîØÊåÅÔºå‰º∞ËÆ°Âè™ËÉΩËá™Â∑±ÂÆûÁé∞Ôºâ</p>

<p>ËØªËØ∑Ê±ÇÁöÑÊúÄÂ•Ω‰∏çË¶ÅÊîæMySQLÈáåÔºåÂ∞ΩÈáèÊîæredisÈáå
https://blog.51cto.com/u_15127567/2714595
https://developpaper.com/golang-connection-pool-you-must-understand/</p>
:ET