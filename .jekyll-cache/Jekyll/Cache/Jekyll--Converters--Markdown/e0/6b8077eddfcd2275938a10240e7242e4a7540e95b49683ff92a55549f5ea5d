I"j<p>主键自增：</p>

<p>CREATE TABLE   test
(
id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(15) NOT NULL
) AUTO_INCREMENT = 100;</p>

<p>可在建表时可用“AUTO_INCREMENT=n”选项来指定一个自增的初始值。</p>

<p>alter table tbname auto_increment = x ;
设置表tbname的唯一auto_increment字段起始值从x开始，如果此表数据量很多的话，这样执行起来会很慢.</p>

<p>AUTO_INCREMENT说明：</p>

<p>（1）如果把一个NULL插入到一个AUTO_INCREMENT数据列里去，MySQL将自动生成下一个序列编号。编号从1开始，并1为基数递增。</p>

<p>（2）把0插入AUTO_INCREMENT数据列的效果与插入NULL值一样。但不建议这样做，还是以插入NULL值为好。</p>

<p>（3）当插入记录时，没有为AUTO_INCREMENT明确指定值，则等同插入NULL值。</p>

<p>（4）当插入记录时，如果为AUTO_INCREMENT数据列明确指定了一个数值，则会出现两种情况，情况一，如果插入的值与已有的编号重复，则会出现出错信息，因为AUTO_INCREMENT数据列的值必须是唯一的；情况二，如果插入的值大于已编号的值，则会把该插入到数据列中，并使在下一个编号将从这个新值开始递增。也就是说，可以跳过一些编号。</p>

<p>（5）如果用UPDATE命令更新自增列，如果列值与已有的值重复，则会出错。如果大于已有值，则下一个编号从该值开始递增。
<!-- more -->
mysql中有自增长字段，在做数据库的主主同步时需要在参数文件中设置自增长的两个相关配置：auto_increment_offset和auto_increment_increment。</p>

<p>auto_increment_offset表示自增长字段从那个数开始，他的取值范围是1 .. 65535
auto_increment_increment表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535
在主主同步配置时，需要将两台服务器的auto_increment_increment增长量都配置为2，而要把auto_increment_offset分别配置为1和2.这样才可以避免两台服务器同时做更新时自增长字段的值之间发生冲突。</p>

<p>https://blog.csdn.net/xuxu120/article/details/72833848</p>

<p>扩展资料</p>

<p>在使用AUTO_INCREMENT时，应注意以下几点：</p>

<p>1、AUTO_INCREMENT是数据列的一种属性，只适用于整数类型数据列。</p>

<p>2、设置AUTO_INCREMENT属性的数据列应该是一个正数序列，所以应该把该数据列声明为UNSIGNED，这样序列的编号个可增加一倍。</p>

<p>3、AUTO_INCREMENT数据列必须有唯一索引，以避免序号重复(即是主键或者主键的一部分)。</p>

<p>4、AUTO_INCREMENT数据列必须具备NOT NULL属性。</p>

<p>5、AUTO_INCREMENT数据列序号的最大值受该列的数据类型约束，如TINYINT数据列的最大编号是127,如加上UNSIGNED，则最大为255。</p>

<p>一旦达到上限，AUTO_INCREMENT就会失效。</p>

<p>6、当进行全表删除时，MySQL AUTO_INCREMENT会从1重新开始编号。</p>

<p>这是因为进行全表操作时，MySQL(和PHP搭配之最佳组合)实际是做了这样的优化操作：先把数据表里的所有数据和索引删除，然后重建数据表。</p>

<p>7、如果想删除所有的数据行又想保留序列编号信息，可这样用一个带where的delete命令以抑制MySQL(和PHP搭配之最佳组合)的优化：delete from table_name where 1。</p>

<p>也可以用last_insert_id（）获取刚刚自增过的值。</p>

<p>https://www.cnblogs.com/isme-zjh/p/11542834.html</p>

<p>auto_increment坑：</p>

<p>　　1. 实例重启，主键冲突：</p>

<p>　　内存中的autoinc值，在系统重启后，使用select max(id) from table来初始化。所以，如果你设计的业务表，存在delete操作，那么一旦你的实例crash过，重启后，可能会复用以前使用过的id值。如果你需要持续对这个表进行逻辑备份，那么就可能会碰到主键冲突的问题。</p>

<p>　　2. load file阻塞：</p>

<p>　　在设置innodb_autoinc_lock_mode=1的时候，MySQL为了维护单个statement语句的id连续性，当不确定插入条数的时候，会在语句整个执行过程中</p>

<p>　　持有LOCK_AUTO_INC, /* locks the auto-inc counter of a table in an exclusive mode */</p>

<p>　　这个锁是表级别的，使用互斥模式。</p>

<p>　　所以，在繁忙的表上，如果要导入数据，小心可能阻塞正常的业务写入，并发写入在这个时候也会阻塞的。
　　
　　
　　https://www.cnblogs.com/yuyue2014/p/4813959.html
传统auto_increment原理
mysql innodb引擎的表中的auto_increment字段是通过在内存中维护一个auto-increment计数器，来实现该字段的赋值，注意自增字段必须是索引,而且是索引的第一列,不一定要是主键。</p>

<p>https://www.jianshu.com/p/054cf6c10116</p>

<p>可在建表时可用“AUTO_INCREMENT=n”选项来指定一个自增的初始值。</p>

<p>可用alter table table_name AUTO_INCREMENT=n命令来重设自增的起始值。</p>

<p>https://www.jianshu.com/p/054cf6c10116</p>

<p>https://www.cnblogs.com/yuyue2014/p/4813959.html</p>
:ET