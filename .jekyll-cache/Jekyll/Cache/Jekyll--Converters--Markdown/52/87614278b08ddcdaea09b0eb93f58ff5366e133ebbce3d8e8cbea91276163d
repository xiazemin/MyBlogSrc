I"4<p>//加锁，注意锁要以指针的形式传进来，不然只是拷贝
func total1(num *int, mu *sync.Mutex, ch chan bool) {
    mu.Lock();
    for i := 0; i &lt; 1000; i++ {
        *num += i;
    }
    ch &lt;- true;
    mu.Unlock();
}
//Lock、Unlock与RLock、RUnlock不能嵌套使用
func printNum(num int, cond *sync.Cond) {
    cond.L.Lock();
    if num &lt; 5 {
        //num小于5时，进入等待状态
        cond.Wait();
    }
    //大于5的正常输出
    fmt.Println(num);
    cond.L.Unlock();
}
    //Once.Do()保证多次调用只执行一次
    once := sync.Once{};
    ch := make(chan bool, 3);
    for i := 0; i &lt; 3; i++ {
        go func(n int) {
            once.Do(func() {
                //只会执行一次，因为闭包引用了变量n，最后的值为2
                fmt.Println(n)</p>

<p>//读写锁，多了读锁定，和读解锁，让多个goroutine同时读取对象
    rwmutex := sync.RWMutex{};
   //组等待，等待一组goroutine的结束
    wg := sync.WaitGroup{};
    //增加计数器
    wg.Add(10);
    for i:= 0; i&lt; 10; i++ {
        go func(n int) {
            fmt.Print(n, “ “);
            //这里表示该goroutine执行完成
            wg.Done();
        }(i);
    }
    //等待所有线程执行完成
    wg.Wait();
<!-- more -->
无论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就说，在任何时刻最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。对于互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。但是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，”自旋”一词就是因此而得名。</p>
:ET