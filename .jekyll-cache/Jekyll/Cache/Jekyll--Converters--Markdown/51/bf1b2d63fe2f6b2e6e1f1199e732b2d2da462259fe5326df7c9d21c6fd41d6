I"x<p>产生Graphviz 文件
用 Golang 产生Graphviz 文件的封装方法如下
https://github.com/awalterschulze/gographviz
我们使用它的范例代码如下：</p>

<p>package main</p>

<p>import (
    “fmt”
    “github.com/awalterschulze/gographviz”
)</p>

<p>func main() {
    graphAst, _ := gographviz.Parse([]byte(<code class="language-plaintext highlighter-rouge">digraph G{}</code>))
    graph := gographviz.NewGraph()
    gographviz.Analyse(graphAst, graph)
    graph.AddNode(“G”, “a”, nil)
    graph.AddNode(“G”, “b”, nil)
    graph.AddEdge(“a”, “b”, true, nil)
    fmt.Println(graph.String())
}
使用 dot 生成 png 的命令行如下：</p>

<p>dot 11.gv -T png -o 11.png
<!-- more --></p>

<p>完整的 Go 代码如下：</p>

<p>package main</p>

<p>import (
    “bytes”
    “fmt”
    “github.com/awalterschulze/gographviz”
    “io/ioutil”
    “os/exec”
)</p>

<p>func main() {
    graphAst, _ := gographviz.Parse([]byte(<code class="language-plaintext highlighter-rouge">digraph G{}</code>))
    graph := gographviz.NewGraph()
    gographviz.Analyse(graphAst, graph)
    graph.AddNode(“G”, “a”, nil)
    graph.AddNode(“G”, “b”, nil)
    graph.AddEdge(“a”, “b”, true, nil)
    fmt.Println(graph.String())</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 输出文件
ioutil.WriteFile("11.gv", []byte(graph.String()), 0666)

// 产生图片
system("dot 11.gv -T png -o 12.png") }
</code></pre></div></div>

<p>//调用系统指令的方法，参数s 就是调用的shell命令
func system(s string) {
    cmd := exec.Command(<code class="language-plaintext highlighter-rouge">/bin/sh</code>, <code class="language-plaintext highlighter-rouge">-c</code>, s) //调用Command函数
    var out bytes.Buffer                    //缓冲字节</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmd.Stdout = &amp;out //标准输出
err := cmd.Run()  //运行指令 ，做判断
if err != nil {
    fmt.Println(err)
}
fmt.Printf("%s", out.String()) //输出执行结果 }
</code></pre></div></div>

<p>goimportdot : 一个帮你迅速了解 golang 项目结构的工具</p>

<p>https://github.com/yqylovy/goimportdot</p>

<p>go get -u github.com/yqylovy/goimportdot
goimportdot -pkg=yourpackagename &gt; pkg.dot 
dot -Tsvg pkg.dot &gt;pkg.svg</p>

<p>画包的依赖关系图
goimportdot -pkg=github.com/yqylovy/goimportdot &gt;goimportdot.dot
dot -Tsvg goimportdot.dot &gt;goimportdot.svg
goimportdot -pkg=github.com/beego &gt;beego.dot
dot -Tsvg beego.dot &gt;beego.svg</p>

<p>https://github.com/ilikeorangutans/grails-service-visualizer
https://ilikeorangutans.github.io/2014/05/03/using-golang-and-graphviz-to-visualize-complex-grails-applications/</p>

<p>https://github.com/skratchdot/open-golang</p>

<p>go-callvis 是github上一个开源项目，可以用来查看golang代码调用关系。
安装go-callvis
go get -u github.com/TrueFurby/go-callvis
cd $GOPATH/src/github.com/TrueFurby/go-callvis &amp;&amp; make</p>

<p>查看github.com/github/orchestrator/go/http 这个package下面的调用关系：</p>

<p>$ go-callvis -focus github.com/github/orchestrator/go/http  github.com/github/orchestrator/go/cmd/orchestrator</p>

<p>https://www.cnblogs.com/lanyangsh/p/10011093.html</p>

<p>https://blog.csdn.net/qq_34857250/article/details/100643339</p>

<p>https://blog.csdn.net/lanyang123456/article/details/84425565
http://www.mamicode.com/info-detail-2529639.html</p>

<p>https://www.bbsmax.com/A/8Bz8Gmmydx/</p>

<p>http://www.360doc.com/content/18/0328/16/51898798_741004626.shtml</p>

:ET