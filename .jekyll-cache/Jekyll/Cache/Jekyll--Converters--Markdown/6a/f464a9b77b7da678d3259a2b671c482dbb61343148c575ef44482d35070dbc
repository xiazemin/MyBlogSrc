I"Ku<ol>
  <li>用文件名查找文件</li>
</ol>

<p>2.用文件名查找文件，忽略大小写</p>

<ol>
  <li>
    <p>使用mindepth和maxdepth限定搜索指定目录的深度</p>
  </li>
  <li>
    <p>在find命令查找到的文件上执行命令</p>
  </li>
  <li>
    <p>相反匹配</p>
  </li>
  <li>
    <p>使用inode编号查找文件</p>
  </li>
  <li>
    <p>根据文件权限查找文件</p>
  </li>
  <li>
    <p>找到home目录及子目录下所有的空文件(0字节文件)</p>
  </li>
  <li>
    <p>查找5个最大的文件</p>
  </li>
  <li>
    <p>查找5个最小的文件</p>
  </li>
  <li>
    <p>使用-type查找指定文件类型的文件</p>
  </li>
  <li>
    <p>通过和其他文件比较修改时间查找文件</p>
  </li>
  <li>
    <p>通过文件大小查找文件</p>
  </li>
  <li>
    <p>给常用find操作取别名</p>
  </li>
  <li>
    <p>用find命令删除大型打包文件</p>
  </li>
</ol>

<p>16.找到在1个小时内被更改的文件</p>

<p>17.找到1个小时内被访问过的文件</p>

<p>18.查找一个小时内状态被改变的文件</p>

<p>19.搜索仅仅限定于文件，不显示文件夹</p>

<p>20.仅仅查找非隐藏的文件（不显示隐藏文件）</p>

<p>21.查找文件修改时间在某一文件修改后的文件</p>

<p>22.查找文件访问时间在某一文件的修改时间之后的文件</p>

<p>23.查找状态改变时间在某个文件修改时间之后的文件：</p>

<p>24.在find命令输出上使用 ls -l，列举出1小时内被编辑过的文件的详细信息</p>

<p>25.仅仅在当前文件系统中搜索</p>

<p>26.在同一个命令中使用多个{}</p>

<ol>
  <li>使用多个{}实例</li>
</ol>

<p>28.将错误重定向到/dev/nul</p>

<p>29.将文件名中的空格换成下划线</p>

<p>30.在find结果中同时执行两条命令</p>

<p>31、常用指令
<!-- more -->
二、find命令实用实例总结</p>

<p>======================================</p>

<p>一、基于name查询文件</p>

<h1 id="find---name-tecminttxt">find . -name tecmint.txt</h1>

<h1 id="find-home--name-tecminttxt">find /home -name tecmint.txt</h1>

<h1 id="find-home--iname-tecminttxt">find /home -iname tecmint.txt</h1>

<h1 id="find---type-d--name-tecmint">find / -type d -name Tecmint</h1>

<h1 id="find---type-f--name-tecmintphp">find . -type f -name tecmint.php</h1>

<h1 id="find---type-f--name-php">find . -type f -name “*.php”</h1>

<p>二、基于权限查询文件</p>

<h1 id="find---type-f--perm-0777--print">find . -type f -perm 0777 -print</h1>

<h1 id="find---type-f---perm-777">find / -type f ! -perm 777</h1>

<h1 id="find---perm-2644">find / -perm 2644</h1>

<h1 id="find---perm-1551">find / -perm 1551</h1>

<h1 id="find---perm-us">find / -perm /u=s</h1>

<h1 id="find---perm-gs">find / -perm /g+s</h1>

<h1 id="find---perm-ur">find / -perm /u=r</h1>

<h1 id="find---perm-ax">find / -perm /a=x</h1>

<h1 id="find---type-f--perm-0777--print--exec-chmod-644-">find / -type f -perm 0777 -print -exec chmod 644 {};</h1>

<h1 id="find---type-d--perm-777--print--exec-chmod-755-">find / -type d -perm 777 -print -exec chmod 755 {};</h1>

<h1 id="find---type-f--name-tecminttxt--execrm--f--">find . -type f -name “tecmint.txt” -execrm -f {} ;</h1>

<h1 id="find---type-f--name-txt--exec-rm--f-">find . -type f -name “*.txt” -exec rm -f{} ;</h1>

<h1 id="find---type-f--name-mp3--exec-rm--f-">find . -type f -name “*.mp3” -exec rm -f{} ;</h1>

<h1 id="find-tmp--type-f--empty">find /tmp -type f -empty</h1>

<h1 id="find-tmp--type-d--empty">find /tmp -type d -empty</h1>

<h1 id="find-tmp--type-f--name-">find /tmp -type f -name “.*”</h1>

<p>三、基于用户和组查询文件</p>

<h1 id="find---user-root--name-tecminttxt">find / -user root -name tecmint.txt</h1>

<h1 id="find-home--user-tecmint">find /home -user tecmint</h1>

<h1 id="find-home--group-developer">find /home -group developer</h1>

<h1 id="find-home--user-tecmint--iname-txt">find /home -user tecmint -iname “*.txt”</h1>

<p>四、基于时间查询文件或目录</p>

<h1 id="find---mtime-50">find / -mtime 50</h1>

<h1 id="find---atime-50">find / -atime 50</h1>

<h1 id="find---mtime-50-mtime--100">find / -mtime +50 –mtime -100</h1>

<h1 id="find---cmin--60">find / -cmin -60</h1>

<h1 id="find---mmin--60">find / -mmin -60</h1>

<h1 id="find---amin--60">find / -amin -60</h1>

<p>五、基于大小查询文件或目录</p>

<h1 id="find---size-50m">find / -size 50M</h1>

<h1 id="find---size-50m--size--100m">find / -size +50M -size -100M</h1>

<h1 id="find---size-100m--exec-rm--rf--">find / -size +100M -exec rm -rf {} ;</h1>

<h1 id="find---type-f--name-mp3--size-10m--exec-rm--">find / -type f -name *.mp3 -size +10M -exec rm {} ;</h1>

<p>========================================</p>

<p>三、详细信息</p>

<p>除了在一个目录结构下查找文件这种基本的操作，你还可以用find命令实现一些实用的操作，使你的命令行之旅更加简易。本文将介绍31种无论是于新手还是老鸟都非常有用的Linux find命令。</p>

<p>首先，在你的home目录下面创建下面的空文件，来测试下面的find命令示例。</p>

<h1 id="vimcreate_sample_filessh">vimcreate_sample_files.sh</h1>

<p>touchMybashProgram.sh</p>

<p>touch mycprogram.c</p>

<p>touch MyCProgram.c</p>

<p>touch Program.c</p>

<p>mkdir backup</p>

<p>cd backup</p>

<p>touchMybashProgram.sh</p>

<p>touch mycprogram.c</p>

<p>touch MyCProgram.c</p>

<p>touch Program.c</p>

<h1 id="chmod-xcreate_sample_filessh">chmod +xcreate_sample_files.sh</h1>

<p>#./create_sample_files.sh</p>

<h1 id="ls--r">ls -R</h1>

<p>.:</p>

<p>backup                  MybashProgram.sh  MyCProgram.c</p>

<p>create_sample_files.sh  mycprogram.c      Program.c</p>

<p>./backup:</p>

<p>MybashProgram.sh  mycprogram.c MyCProgram.c  Program.c</p>

<ol>
  <li>用文件名查找文件</li>
</ol>

<p>这是find命令的一个基本用法。下面的例子展示了用MyCProgram.c作为查找名在当前目录及其子目录中查找文件的方法。</p>

<h1 id="find--namemycprogramc">find -name”MyCProgram.c”</h1>

<p>./backup/MyCProgram.c</p>

<p>./MyCProgram.c</p>

<p>2.用文件名查找文件，忽略大小写</p>

<p>这是find命令的一个基本用法。下面的例子展示了用MyCProgram.c作为查找名在当前目录及其子目录中查找文件的方法，忽略了大小写。</p>

<h1 id="find--inamemycprogramc">find -iname”MyCProgram.c”</h1>

<p>./mycprogram.c</p>

<p>./backup/mycprogram.c</p>

<p>./backup/MyCProgram.c</p>

<p>./MyCProgram.c</p>

<ol>
  <li>使用mindepth和maxdepth限定搜索指定目录的深度</li>
</ol>

<p>在root目录及其子目录下查找passwd文件。</p>

<h1 id="find---namepasswd">find / -namepasswd</h1>

<p>./usr/share/doc/nss_ldap-253/pam.d/passwd</p>

<p>./usr/bin/passwd</p>

<p>./etc/pam.d/passwd</p>

<p>./etc/passwd</p>

<p>在root目录及其1层深的子目录中查找passwd. (例如root —level 1, and one sub-directory — level 2)</p>

<h1 id="find--maxdepth-2-name-passwd">find -maxdepth 2-name passwd</h1>

<p>./etc/passwd</p>

<p>在root目录下及其最大两层深度的子目录中查找passwd文件. (例如 root — level 1, and two sub-directories — level 2 and 3 )</p>

<h1 id="find---maxdepth-3-name-passwd">find / -maxdepth 3-name passwd</h1>

<p>./usr/bin/passwd</p>

<p>./etc/pam.d/passwd</p>

<p>./etc/passwd</p>

<p>在第二层子目录和第四层子目录之间查找passwd文件。</p>

<h1 id="find--mindepth-3-maxdepth-5--name-passwd">find -mindepth 3-maxdepth 5 -name passwd</h1>

<p>./usr/bin/passwd</p>

<p>./etc/pam.d/passwd</p>

<ol>
  <li>在find命令查找到的文件上执行命令</li>
</ol>

<p>下面的例子展示了find命令来计算所有不区分大小写的文件名为“MyCProgram.c”的文件的MD5验证和。{}将会被当前文件名取代。</p>

<p>find -iname”MyCProgram.c” -exec md5sum {} ;</p>

<p>d41d8cd98f00b204e9800998ecf8427e  ./mycprogram.c</p>

<p>d41d8cd98f00b204e9800998ecf8427e  ./backup/mycprogram.c</p>

<p>d41d8cd98f00b204e9800998ecf8427e  ./backup/MyCProgram.c</p>

<p>d41d8cd98f00b204e9800998ecf8427e  ./MyCProgram.c</p>

<ol>
  <li>相反匹配</li>
</ol>

<p>显示所有的名字不是MyCProgram.c的文件或者目录。由于maxdepth是1，所以只会显示当前目录下的文件和目录。</p>

<p>find -maxdepth 1-not -iname “MyCProgram.c”</p>

<p>.</p>

<p>./MybashProgram.sh</p>

<p>./create_sample_files.sh</p>

<p>./backup</p>

<p>./Program.c</p>

<ol>
  <li>使用inode编号查找文件</li>
</ol>

<p>任何一个文件都有一个独一无二的inode编号，借此我们可以区分文件。创建两个名字相似的文件，例如一个有空格结尾，一个没有。</p>

<p>touch”test-file-name”</p>

<h1 id="touchtest-file-name-">touch”test-file-name “</h1>

<p>[Note: There is aspace at the end]</p>

<h1 id="ls--1-test">ls -1 test*</h1>

<p>test-file-name</p>

<p>test-file-name</p>

<p>从ls的输出不能区分哪个文件有空格结尾。使用选项-i，可以看到文件的inode编号，借此可以区分这两个文件。</p>

<p>ls -i1 test*</p>

<p>16187429test-file-name</p>

<p>16187430test-file-name</p>

<p>你可以如下面所示在find命令中指定inode编号。在此，find命令用inode编号重命名了一个文件。</p>

<p>find -inum 16187430-exec mv {} new-test-file-name ;</p>

<p># ls -i1 <em>test</em></p>

<p>16187430new-test-file-name</p>

<p>16187429test-file-name</p>

<p>你可以在你想对那些像上面一样的糟糕命名的文件做某些操作时使用这一技术。例如，名为file?.txt的文件名字中有一个特殊字符。若你想执行“rm file?.txt”，下面所示的所有三个文件都会被删除。所以，采用下面的步骤来删除”file?.txt”文件。</p>

<p>ls</p>

<p>file1.txt  file2.txt file?.txt</p>

<p>找到每一个文件的inode编号。</p>

<p>ls -i1</p>

<p>804178 file1.txt</p>

<p>804179 file2.txt</p>

<p>804180 file?.txt</p>

<p>如下所示：?使用inode编号来删除那些具有特殊符号的文件名。</p>

<p>find -inum 804180-exec rm {} ;</p>

<h1 id="ls">ls</h1>

<p>file1.txt  file2.txt</p>

<p>[Note: The file withname “file?.txt” is now removed]</p>

<ol>
  <li>根据文件权限查找文件</li>
</ol>

<p>下面的操作时合理的：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>找到具有指定权限的文件

忽略其他权限位，检查是否和指定权限匹配

根据给定的八进制/符号表达的权限搜索
</code></pre></div></div>

<p>此例中，假设目录包含以下文件。注意这些文件的权限不同。</p>

<p>ls -l</p>

<p>total 0</p>

<p>-rwxrwxrwx 1 rootroot 0 2009-02-19 20:31 all_for_all</p>

<p>-rw-r–r– 1 rootroot 0 2009-02-19 20:30 everybody_read</p>

<p>———- 1 rootroot 0 2009-02-19 20:31 no_for_all</p>

<p>-rw——- 1 rootroot 0 2009-02-19 20:29 ordinary_file</p>

<p>-rw-r—– 1 rootroot 0 2009-02-19 20:27 others_can_also_read</p>

<p>—-r—– 1 rootroot 0 2009-02-19 20:27 others_can_only_read</p>

<p>找到具有组读权限的文件。使用下面的命令来找到当前目录下对同组用户具有读权限的文件，忽略该文件的其他权限。</p>

<p>find . -perm -g=r-type f -exec ls -l {} ;</p>

<p>-rw-r–r– 1 rootroot 0 2009-02-19 20:30 ./everybody_read</p>

<p>-rwxrwxrwx 1 rootroot 0 2009-02-19 20:31 ./all_for_all</p>

<p>—-r—– 1 rootroot 0 2009-02-19 20:27 ./others_can_only_read</p>

<p>-rw-r—– 1 rootroot 0 2009-02-19 20:27 ./others_can_also_read</p>

<p>找到对组用户具有只读权限的文件。</p>

<p>find . -perm g=r-type f -exec ls -l {} ;</p>

<p>—-r—– 1 rootroot 0 2009-02-19 20:27 ./others_can_only_read</p>

<p>找到对组用户具有只读权限的文件(使用八进制权限形式)。</p>

<p>find . -perm 040-type f -exec ls -l {} ;</p>

<p>—-r—– 1 rootroot 0 2009-02-19 20:27 ./others_can_only_read</p>

<ol>
  <li>找到home目录及子目录下所有的空文件(0字节文件)</li>
</ol>

<p>下面命令的输出文件绝大多数都是锁定文件盒其他程序创建的place hoders</p>

<p>find ~ -empty</p>

<p>只列出你home目录里的空文件。</p>

<p>find . -maxdepth 1-empty</p>

<p>只列出当年目录下的非隐藏空文件。</p>

<p>find . -maxdepth 1-empty -not -name “.*”</p>

<ol>
  <li>查找5个最大的文件</li>
</ol>

<p>下面的命令列出当前目录及子目录下的5个最大的文件。这会需要一点时间，取决于命令需要处理的文件数量。</p>

<table>
  <tbody>
    <tr>
      <td>find . -type f -execls -s {} ;</td>
      <td>sort -n -r</td>
      <td>head -5</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>查找5个最小的文件</li>
</ol>

<p>方法同查找5个最大的文件类似，区别只是sort的顺序是降序。</p>

<table>
  <tbody>
    <tr>
      <td>find . -type f -execls -s {} ;</td>
      <td>sort -n</td>
      <td>head -5</td>
    </tr>
  </tbody>
</table>

<p>上面的命令中，很可能你看到的只是空文件(0字节文件)。如此，你可以使用下面的命令列出最小的文件，而不是0字节文件。</p>

<table>
  <tbody>
    <tr>
      <td>find . -not -empty-type f -exec ls -s {} ;</td>
      <td>sort -n</td>
      <td>head -5</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>使用-type查找指定文件类型的文件</li>
</ol>

<p>只查找socket文件</p>

<p>find . -type s</p>

<p>查找所有的目录</p>

<p>find . -type d</p>

<p>查找所有的一般文件</p>

<p>find . -type f</p>

<p>查找所有的隐藏文件</p>

<p>find . -type f -name”.*”</p>

<p>查找所有的隐藏目录</p>

<p>find -type d -name”.*”</p>

<ol>
  <li>通过和其他文件比较修改时间查找文件</li>
</ol>

<p>显示在指定文件之后做出修改的文件。下面的find命令将显示所有的在ordinary_file之后创建修改的文件。</p>

<p>ls -lrt</p>

<p>total 0</p>

<p>-rw-r—– 1 rootroot 0 2009-02-19 20:27 others_can_also_read</p>

<p>—-r—– 1 rootroot 0 2009-02-19 20:27 others_can_only_read</p>

<p>-rw——- 1 rootroot 0 2009-02-19 20:29 ordinary_file</p>

<p>-rw-r–r– 1 rootroot 0 2009-02-19 20:30 everybody_read</p>

<p>-rwxrwxrwx 1 rootroot 0 2009-02-19 20:31 all_for_all</p>

<p>———- 1 rootroot 0 2009-02-19 20:31 no_for_all</p>

<h1 id="find--newerordinary_file">find -newerordinary_file</h1>

<p>.</p>

<p>./everybody_read</p>

<p>./all_for_all</p>

<p>./no_for_all</p>

<ol>
  <li>通过文件大小查找文件</li>
</ol>

<p>使用-size选项可以通过文件大小查找文件。</p>

<p>查找比指定文件大的文件</p>

<p>find ~ -size +100M</p>

<p>查找比指定文件小的文件</p>

<p>find ~ -size -100M</p>

<p>查找符合给定大小的文件</p>

<p>find ~ -size 100M</p>

<p>注意: – 指比给定尺寸小，+ 指比给定尺寸大。没有符号代表和给定尺寸完全一样大。</p>

<ol>
  <li>给常用find操作取别名</li>
</ol>

<p>若你发现有些东西很有用，你可以给他取别名。并且在任何你希望的地方执行。</p>

<p>常用的删除a.out文件。</p>

<p>aliasrmao=”find . -iname a.out -exec rm {} ;”</p>

<h1 id="rmao">rmao</h1>

<p>删除c程序产生的core文件。</p>

<p>alias rmc=”find. -iname core -exec rm {} ;”</p>

<h1 id="rmc">rmc</h1>

<ol>
  <li>用find命令删除大型打包文件</li>
</ol>

<p>下面的命令删除大于100M的*.zip文件。</p>

<p>find / -type f -name*.zip -size +100M -exec rm -i {} ;”</p>

<p>用别名rm100m删除所有大雨100M的*.tar文件。使用同样的思想可以创建rm1g,rm2g,rm5g的一类别名来删除所有大于1G,2G,5G的文件。</p>

<p>aliasrm100m=”find / -type f -name *.tar -size +100M -exec rm -i {} ;”</p>

<h1 id="aliasrm1gfind---type-f--name-tar--size-1g--exec-rm--i--">aliasrm1g=”find / -type f -name *.tar -size +1G -exec rm -i {} ;”</h1>

<h1 id="aliasrm2gfind---type-f--name-tar--size-2g--exec-rm--i--">aliasrm2g=”find / -type f -name *.tar -size +2G -exec rm -i {} ;”</h1>

<h1 id="aliasrm5gfind---type-f--name-tar--size-5g--exec-rm--i--">aliasrm5g=”find / -type f -name *.tar -size +5G -exec rm -i {} ;”</h1>

<h1 id="rm100m">rm100m</h1>

<h1 id="rm1g">rm1g</h1>

<h1 id="rm2g">rm2g</h1>

<h1 id="rm5g">rm5g</h1>

<p>基于访问/修改/更改时间查找文件</p>

<p>你可以找到基于以下三个文件的时间属性的文件。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>访问时间的文件。文件访问时，访问时间得到更新。

的文件的修改时间。文件内容修改时，修改时间得到更新。

更改文件的时间。更改时间时，被更新的inode数据的变化。
</code></pre></div></div>

<p>在下面的例子中，min选项之间的差异和时间选项是参数。</p>

<p>分论点将它的参数为分钟。例如，60分钟（1小时）= 60分钟。时间参数，将它的参数为24小时。例如，时间2 = 2 * 24小时（2天）。虽然这样做的24个小时计算，小数部分都将被忽略，所以25小时为24小时，和47小时取为24小时，仅48小时为48小时。要获得更清晰的参考atime的部分find命令的手册页。</p>

<p>16.找到在1个小时内被更改的文件</p>

<p>想要通过文件修改时间找出文件，可以使用参数 -mmin -mtime。下面是man手册中有关mmin和mtime的定义。</p>

<p>-mmin n 文件最后一次修改是在n分钟之内</p>

<p>-mtime n 文件最后一次修改是在 n*24小时之内（译者注：也就是n天了呗）</p>

<p>执行下面例子中的命令，将会找到当前目录以及其子目录下，最近一次修改时间在1个小时（60分钟）之内的文件或目录</p>

<h1 id="find---amin--60-1">find . -amin -60</h1>

<p>同样的方式，执行下面例子中的命令，将会找到24小时（1天）内被访问了的文件（文件系统根目录 / 下）</p>

<h1 id="find---atime--1">find / -atime -1</h1>

<p>17.找到1个小时内被访问过的文件</p>

<p>想要通过文件访问时间找出文件，可以使用参数 -amin -atime。下面是man手册中有关amin和atime的定义。</p>

<p>-amin n 文件最后一次访问是在n分钟之内</p>

<p>-atime n 文件最后一次访问是在 n*24小时之内</p>

<p>执行下面例子中的命令，将会找到当前目录以及其子目录下，最近一次访问时间在1个小时（60分钟）之内的文件或目录</p>

<h1 id="find---amin--60-2">find . -amin -60</h1>

<p>同样的方式，执行下面例子中的命令，将会找到24小时（1天）内被访问了的文件（文件系统根目录 / 下）</p>

<h1 id="find---atime--1-1">find / -atime -1</h1>

<p>18.查找一个小时内状态被改变的文件</p>

<p>（译者注：这里的改变更第1个例子的更改文件内容时间是不同概念，这里是更改的是文件inode的数据，比如文件的权限，所属人等等信息）</p>

<p>要查找文件的inode的更改时间，使用-cmin和-ctime选项</p>

<p>-cmin n  文件的状态在n分钟内被改变</p>

<p>-ctime n  文件状态在n*24小时内（也就是n天内）被改变</p>

<p>（译者注：如果上面的n为-n形式，则表示n分钟/天之内，n为+n则表示n分钟/天之前）</p>

<p>下面的例子在当前目录和其子目录下面查找一个小时内文件状态改变的文件（也就是60分钟内）：</p>

<h1 id="find---cmin--60-1">find . -cmin -60</h1>

<p>同样的道理，下面的例子在根目录/及其子目录下一天内（24小时内）文件状态被改变的文件列表：</p>

<h1 id="find---ctime--1">find / -ctime -1</h1>

<p>19.搜索仅仅限定于文件，不显示文件夹</p>

<p>上面的例子搜索出来不仅仅有文件，还会显示文件夹。因为当一个文件被访问的时候，它所处的文件夹也会被访问，如果你对文件夹不感兴趣，那么可以使用 -type f 选项</p>

<p>下面的例子会显示30分钟内被修改过的文件，文件夹不显示：</p>

<h1 id="findetcsysconfig--amin--30">find/etc/sysconfig -amin -30</h1>

<p>.</p>

<p>./console</p>

<p>./network-scripts</p>

<p>./i18n</p>

<p>./rhn</p>

<p>./rhn/clientCaps.d</p>

<p>./networking</p>

<p>./networking/profiles</p>

<p>./networking/profiles/default</p>

<p>./networking/profiles/default/resolv.conf</p>

<p>./networking/profiles/default/hosts</p>

<p>./networking/devices</p>

<p>./apm-scripts</p>

<p>[注: 上面的输出包含了文件和文件夹]</p>

<h1 id="findetcsysconfig--amin--30--type-f">find/etc/sysconfig -amin -30 -type f</h1>

<p>./i18n</p>

<p>./networking/profiles/default/resolv.conf</p>

<p>./networking/profiles/default/hosts</p>

<p>[注: 上面的输出仅仅包含文件]</p>

<p>20.仅仅查找非隐藏的文件（不显示隐藏文件）：</p>

<p>如果我们查找的时候不想隐藏文件也显示出来，可以使用下面的正则式查找：</p>

<p>下面的命令会显示当前目录及其子目录下15分钟内文件内容被修改过的文件，并且只列出非隐藏文件。也就是说，以.开头的文件时不会显示出来的</p>

<h1 id="find---mmin--15---regex--">find . -mmin -15( ! -regex “.<em>/..</em>” )</h1>

<p>基于文件比较的查找命令</p>

<p>我们平时通过更别的东西进行比较，会更容易记住一些事情。比如说我想找出在我编辑test文件之后编辑过的文件。你可以通过test这个文件的编辑时间作为比较基准去查找之后编辑过的文件：</p>

<p>21.查找文件修改时间在某一文件修改后的文件：</p>

<p>语法： find -newerFILE</p>

<p>下面的例子显示在/etc/passwd修改之后被修改过的文件。对于系统管理员，想知道你新增了一个用户后去跟踪系统的活动状态是很有帮助的（万一那新用户不老实，一上来就乱搞，你很快就知道了 ^_^）：</p>

<h1 id="find--neweretcpasswd">find -newer/etc/passwd</h1>

<p>22.查找文件访问时间在某一文件的修改时间之后的文件：</p>

<h1 id="find--neweretcpasswd-1">find -newer/etc/passwd</h1>

<p>下面的例子显示所有在/etc/hosts文件被修改后被访问到的文件。如果你新增了一个主机/端口记录在/etc/hosts文件中，你很可能很想知道在那之后有什么文件被访问到了，下面是这个命令：</p>

<h1 id="find--aneweretchosts">find -anewer/etc/hosts</h1>

<p>23.查找状态改变时间在某个文件修改时间之后的文件：</p>

<p>语法： find -cnewerFILE</p>

<p>下面的例子显示在修改文件/etc/fstab之后所有文件状态改变过的文件。如果你在/etc/fstab新增了一个挂载点，你很可能想知道之后哪些文件的状态发生了改变，这时候你可以使用如下命令：</p>

<h1 id="find--cneweretcfstab">find -cnewer/etc/fstab</h1>

<p>在查找到的文件列表结果上直接执行命令：</p>

<p>这之前你已经看到了如果通过find命令去查找各种条件的文件列表。如果你对这些find命令还不熟悉，我建议你看完上面的第一部分</p>

<p>接下来这部分我们向你介绍如果在find命令上执行各种不同的命令，也就是说如何去操作find命令查找出来的文件列表。</p>

<p>我们能在find命令查找出来的文件名列表上指定任意的操作：</p>

<h1 id="find---exec--">find <CONDITIONto Find="" files=""> -exec <OPERATION> ;</OPERATION></CONDITIONto></h1>

<p>其中的OPERATION可以是任意的命令，下面列举一下比较常用的：</p>

<p>rm 命令，用于删除find查找出来的文件</p>

<p>mv 命令，用于重命名查找出的文件</p>

<p>ls -l 命令，显示查找出的文件的详细信息</p>

<p>md5sum，对查找出的文件进行md5sum运算，可以获得一个字符串，用于检测文件内容的合法性</p>

<p>wc 命令，用于统计计算文件的单词数量，文件大小等待</p>

<p>执行任何Unix的Shell命令</p>

<p>执行你自己写的shell脚本，参数就是每个查找出来的文件名</p>

<p>24.在find命令输出上使用 ls-l，列举出1小时内被编辑过的文件的详细信息</p>

<h1 id="find--mmin--60">find -mmin -60</h1>

<p>./cron</p>

<p>./secure</p>

<p># find -mmin -60 -exec ls -l {} ;</p>

<p>-rw——-  1 root root 1028 Jun 21 15:01 ./cron</p>

<p>-rw——-  1 root root 831752 Jun 21 15:42 ./secure</p>

<p>25.仅仅在当前文件系统中搜索</p>

<p>系统管理员有时候仅仅想在/挂载的文件系统分区上搜索，而不想去搜索其他的挂载分区，比如/home/挂载分区。如果你有多个分区被挂载了，你想在/下搜索，一般可以按下面的这样做</p>

<p>下面这个命令会搜索根目录/及其子目录下所有.log结尾的文件名。如果你有多个分区在/下面，那么这个搜索会去搜索所有的被挂载的分区：</p>

<h1 id="find---namelog">find / -name”*.log”</h1>

<p>如果我们使用-xdev选项，那么仅仅会在在当前文件系统中搜索，下面是在xdev的manpage上面找到的一段-xdev的定义：</p>

<p>-xdev Don’t descenddirectories on other filesystems.</p>

<p>下面的命令会在/目录及其子目录下搜索当前文件系统(也就是/挂载的文件系统)中所有以.log结尾的文件，也就是说如果你有多个分区挂载在/下面，下面的搜索不会去搜索其他的分区的（比如/home/）</p>

<h1 id="find---xdev--namelog">find / -xdev -name”*.log”</h1>

<p>26.在同一个命令中使用多个{}</p>

<p>linux手册说命令中只能使用一个{}，不过你可以像下面这样在同一个命令中使用多个{}</p>

<h1 id="find--nametxt-cp--bkup-">find -name”*.txt” cp {} {}.bkup ;</h1>

<p>注意，在同一个命令中使用这个{}是可以的，但是在不同的命令里就不行了，也就是说，如果你想象下面这样重命名文件是行不通的</p>

<p>find -name”*.txt” -exec mv {} <code class="language-plaintext highlighter-rouge">basename {} .htm</code>.html ;</p>

<ol>
  <li>使用多个{}实例</li>
</ol>

<p>你可以像下面这样写一个shell脚本去模拟上面那个重命名的例子</p>

<h1 id="mv-1basename-1-htmhtml">mv “$1”“<code class="language-plaintext highlighter-rouge">basename "$1" .htm</code>.html”</h1>

<p>上面的双引号是为了防止文件名中出现的空格，不加的话会有问题。然后你把这个shell脚本保存为mv.sh，你可以像下面这样使用find命令了</p>

<p>find -name”*.html” -exec ./mv.sh ‘{}’ ;</p>

<p>所以，任何情况下你在find命令执行中想使用同一个文件名多次的话，先写一个脚本，然后在find中通过-exec执行这个脚本，把文件名参数传递进去就行，这是最简单的办法</p>

<p>28.将错误重定向到/dev/nul</p>

<p>重定向错误输出一般不是什么好的想法。一个有经验的程序员懂得在终端显示错误并及时修正它是很重要的。</p>

<p>尤其是在find命令中重定向错误不是个好的实践。但是如果你确实不想看到那些烦人的错误，想把错误都重定向到null设备中（也就是linux上的黑洞装置，任何丢进去的东西消失的无影无踪了）。你可以像下面这样做</p>

<p>find -name”*.txt” 2»/dev/null</p>

<p>有时候这是很有用的。比如，如果你想通过你自己的账号在/目录下查找所有的*.conf文件，你会得到很多很多的”Permission denied”的错误消息，就像下面这样：</p>

<p>$ find / -name”*.conf”</p>

<p>/sbin/generate-modprobe.conf</p>

<p>find:/tmp/orbit-root: Permission denied</p>

<p>find:/tmp/ssh-gccBMp5019: Permission denied</p>

<p>find:/tmp/keyring-5iqiGo: Permission denied</p>

<p>find:/var/log/httpd: Permission denied</p>

<p>find: /var/log/ppp:Permission denied</p>

<p>/boot/grub/grub.conf</p>

<p>find:/var/log/audit: Permission denied</p>

<p>find:/var/log/squid: Permission denied</p>

<p>find:/var/log/samba: Permission denied</p>

<p>find:/var/cache/alchemist/printconf.rpm/wm: Permission denied</p>

<p>[Note: There are twovalid *.conf files burned in the “Permission denied” messages]</p>

<p>你说烦人不？所以，如果你只想看到find命令真实的查找结果而不是这些”Permission denied”错误消息，你可以将这些错误消息重定向到/dev/null中去</p>

<p>$ find / -name”*.conf” 2»/dev/null</p>

<p>/sbin/generate-modprobe.conf</p>

<p>/boot/grub/grub.conf</p>

<p>[Note: All the”Permission denied” messages are not displayed]</p>

<p>29.将文件名中的空格换成下划线</p>

<p>你从网上下载下来的音频文件的文件名很多都带有空格。但是带有空格的文件名在linux(类Unix)系统里面是很不好的。你可以使用find然后后面加上rename命令的替换功能去重命名这些文件，将空格转换成下划线</p>

<p>下面显示怎样将所有mp3文件的文件名中的空格换成_</p>

<p>$ find . -type f-iname “*.mp3″ -exec rename “s/ /_/g” {} ;</p>

<p>30.在find结果中同时执行两条命令</p>

<p>在find的man page页面中，下面是一次文件查找遍历中使用两条命令的语法举例</p>

<p>下面的find命令的例子，遍历文件系统一次，列出拥有setuid属性的文件和目录，写入/root/suid.txt文件，如果文件大小超过100M，将其记录到/root/big.txt中</p>

<h1 id="find----perm-4000--fprintf-rootsuidtxt-m-u-p---">find / ( -perm-4000 -fprintf /root/suid.txt ‘%#m %u %p ‘ ) ,</h1>

<p>( -size +100M-fprintf /root/big.txt ‘%-10s %p ‘ )</p>

<p>31、常用指令</p>

<p>find /backup/rman_backup/ -mtime +45 -exec rm -rf {} ;  删除45天前的文件</p>

<p>find /tmp -mtime +7-size +1M -exec rm -rf {} ;</p>

<p>find -mtime +7 -nameabc* -exec rm -rf {} ;</p>

<p>find /tmp -mtime +7-size +1M -ok rm -rf {} ;</p>
:ET