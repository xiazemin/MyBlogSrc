I"eA<p>具名组匹配
问号 + 尖括号 + 组名 + 要匹配的内容</p>

<p>var re_date = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/;
var match_date = re_date.exec("1999-12-31");
console.log(match_date.groups.year);//1999
console.log(match_date.groups.month);//12
console.log(match_date.groups.day === match_date[3]);//true
//字符串替换时，使用$<组名>引用具名组。
console.log("2015-01-02".replace(re_date,"$<day>/$<month>/$<year>"));//02/01/2015</year></month></day></组名></day></month></year></p>

<!-- more -->
<p>常用方法
exec()</p>

<p>RegExpObject.exec(string):返回一个数组，第0项为与正则表达式匹配的结果；第1项是与第一个子表达是匹配的结果，以此类推。</p>

<p>当RegExpObject是全局正则表达式时，会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string，知道找不到匹配时，返回null，并把 lastIndex 属性重置为 0。</p>

<font color="red">注意</font>
<p>：如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把 lastIndex 属性重置为 0</p>

<p>例：</p>

<p>var reg=/(b)a(\d){2}/g;
console.log(reg.exec(“ba451ba11”));//[“ba45”, “b”, “5”, index: 0, input: “ba451ba11”] (\d)为子表达式
console.log(reg.exec(“ba451ba11”));//[“ba11”, “b”, “1”, index: 5, input: “ba451ba11”]
match()</p>

<p>stringObject.match(regexp):如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配.</p>

<p>var reg = /ab|cd/g;
console.log(“abcd”.match(reg));//[“ab”,”cd”]
如果正则表达式不包含 g标志，str.match() 将返回与 RegExp.exec()相同的结果。</p>

<p>var reg = /a(\d)b/;
console.log(“a1b”.match(reg));//[“a1b”, “1”, index: 0, input: “a1b”]
console.log(reg.exec(“a1b”));
var reg = /a(\d)b/g;
console.log(“a1b”.match(reg));//[“a1b”]
console.log(reg.exec(“a1b”));// [“a1b”, “1”, index: 0, input: “a1b”]
捕获型分组
被正则表达式捕获(匹配)到的字符串会被暂存起来</p>

<p>由分组捕获到的字符串会从1开始编号</p>

<p>var reg = /t(e)(st(\d?))/g;
console.log(reg.exec(“test1test2test3”));//[“test1”, “e”, “st1”, “1”, index: 0, input: “test1test2test3”]
console.log(reg.exec(“test1test2test3”));//[“test2”, “e”, “st2”, “2”, index: 5, input: “test1test2test3”]
console.log(reg.exec(“test1test2test3”));//[“test3”, “e”, “st3”, “3”, index: 10, input: “test1test2test3”]
引用
分组捕获到的字符串会从1开始编号</p>

<p>var reg = /(\d{4})-(\d{2})-(\d{2})/;
console.log(reg.test(“2020-05-04”));//true
console.log(RegExp.$1);//2020
console.log(RegExp.$2);//05
console.log(RegExp.$3);//04
搭配replace
var newDate = date.replace(/(\d{4})-(\d{2})-(\d{2})/,”$3-$2-$1”);
console.log(newDate);//04-05-2020
这个例子表示，将符合/(\d{4})-(\d{2})-(\d{2})/的字符串替换成$3-$2-$1格式，2020-05-04匹配时，$1、$2、$3分别对应匹配到的2020、05、04</p>

<p>反向引用
在正则表达式中进行引用</p>

<p>\1表示第1个()匹配的引用，\2表示第2个()匹配的引用，以此类推</p>

<p>var reg = /(\d{2}(\w))\2/;// /(\d{2}(\w))(\w)/
console.log(reg.test(“11aa”));//true
console.log(/(\d{2}(\w))(\w)/.test(“11aa”));//true
如果引用了越界或者不存在的编号的话，就被被解析为普通的表达式</p>

<p>竖线 |
var reg = /\s<em>(+|[0-9]+)\s</em>/g;//匹配加号或者数字
console.log(reg.exec(“a1+2”));//[“1”, “1”, index: 0, input: “a1+2”]
console.log(reg.exec(“a1+2”));//[”+”, “+”, index: 0, input: “a1+2”]
console.log(reg.exec(“a1+2”));//[“2”, “2”, index: 0, input: “a1+2”]
只能匹配到数字或者只匹配加号</p>

<p>python—正则中的(?P<name>group)
application=tornado.web.Application([
    (r"/index/(?P<num>\d*)/(?P<nid>\d*)",home.IndexHandler),
],**settings)
结合函数</nid></num></name></p>

<p>class IndexHandler(tornado.web.RequestHandler):
    def get(self,nid=’‘,num=’’):
        print(nid,num)
        self.write(‘&lt;h1&gt;hello world&lt;/h1&gt;’)
(?P<num>\d*)是将后面匹配的\d*数据，取一个组名，这个组名必须是唯一的，不重复的，没有特殊符号
函数可以获得这个组名下的数据，一种就是按照上面路由中的形式传递和被解析
另一种是正则匹配使用group(组名)可以获取到这个组名下的数据，同group(1),group(2)类似</num></p>

<p>P这种风格是Python首先提出，后来.Net的人也弄了一个自己的解决方案，你可能看到过(?<name>group)还有\k<name>这种</name></name></p>

<p>https://regex101.com/#python
http://www.regular-expressions.info/named.html</p>

<p>import re</p>

<h1 id="将匹配的数字乘以-2">将匹配的数字乘以 2</h1>
<p>def double(matched):
    value = int(matched.group(‘value‘))
    return str(value * 2)</p>

<p>s = ‘A23G4HFD567‘
print(re.sub(‘(?P<value>\d+)‘, double, s))
 ?P<value>的意思就是命名一个名字为value的组，匹配规则符合后面的/d+</value></value></p>

<p>.1     什么是捕获组
捕获组就是把正则表达式中子表达式匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用。当然，这种引用既可以是在正则表达式内部，也可以是在正则表达式外部。</p>

<p>捕获组有两种形式，一种是普通捕获组，另一种是命名捕获组，通常所说的捕获组指的是普通捕获组。语法如下：</p>

<p>普通捕获组：(Expression)</p>

<p>命名捕获组：(?<name>Expression)</name></p>

<p>普通捕获组在大多数支持正则表达式的语言或工具中都是支持的，而命名捕获组目前只有.NET、PHP、Python等部分语言支持，据说Java会在7.0中提供对这一特性的支持。上面给出的命名捕获组的语法是.NET中的语法，另外在.NET中使用(?’name’Expression)与使用(?<name>Expression)是等价的。在PHP和Python中命名捕获组语法为：(?P<name>Expression)。</name></name></p>

<p>另外需要说明的一点是，除(Expression)和(?<name>Expression)语法外，其它的(?...)语法都不是捕获组。</name></p>

<p>1.2     捕获组编号规则
编号规则指的是以数字为捕获组进行编号的规则，在普通捕获组或命名捕获组单独出现的正则表达式中，编号规则比较清晰，在普通捕获组与命名捕获组混合出现的正则表达式中，捕获组的编号规则稍显复杂。</p>

<p>在展开讨论之前，需要说明的是，编号为0的捕获组，指的是正则表达式整体，这一规则在支持捕获组的语言中，基本上都是适用的。下面对其它编号规则逐一展开讨论。</p>

<p>1.2.1  普通捕获组编号规则
如果没有显式为捕获组命名，即没有使用命名捕获组，那么需要按数字顺序来访问所有捕获组。在只有普通捕获组的情况下，捕获组的编号是按照“(”出现的顺序，从左到右，从1开始进行编号的 。</p>

<p>正则表达式：(\d{4})-(\d{2}-(\d\d))</p>

<p>  </p>

<p>上面的正则表达式可以用来匹配格式为yyyy-MM-dd的日期，为了在下表中得以区分，月和日分别采用了\d{2}和\d\d这两种写法。</p>

<p>用以上正则表达式匹配字符串：2008-12-31，匹配结果为：</p>

<p>编号</p>

<p>命名</p>

<p>捕获组</p>

<p>匹配内容</p>

<p>0</p>

<p> 	
(\d{4})-(\d{2}-(\d\d))</p>

<p>2008-12-31</p>

<p>1</p>

<p> 	
(\d{4})</p>

<p>2008</p>

<p>2</p>

<p> </p>

<p>(\d{2}-(\d\d))</p>

<p>12-31</p>

<p>3</p>

<p> </p>

<p>(\d\d)</p>

<p>31</p>

<p>1.2.2  命名捕获组编号规则
命名捕获组通过显式命名，可以通过组名方便的访问到指定的组，而不需要去一个个的数编号，同时避免了在正则表达式扩展过程中，捕获组的增加或减少对引用结果导致的不可控。</p>

<p>不过容易忽略的是，命名捕获组也参与了编号的，在只有命名捕获组的情况下，捕获组的编号也是按照“(”出现的顺序，从左到右，从1开始进行编号的 。</p>

<p>正则表达式：(?<year>\d{4})-(?<date>\d{2}-(?<day>\d\d))</day></date></year></p>

<p> </p>

<p>用以上正则表达式匹配字符串：2008-12-31</p>

<p>匹配结果为：</p>

<p>编号</p>

<p>命名</p>

<p>捕获组</p>

<p>匹配内容</p>

<p>0</p>

<p> 	
(?<year>\d{4})-(?<date>\d{2}-(?<day>\d\d))</day></date></year></p>

<p>2008-12-31</p>

<p>1</p>

<p>year</p>

<p>(?<year>\d{4})</year></p>

<p>2008</p>

<p>2</p>

<p>date</p>

<p>(?<date>\d{2}-(?<day>\d\d))</day></date></p>

<p>12-31</p>

<p>3</p>

<p>day</p>

<p>(?<day>\d\d)</day></p>

<p>31</p>

<p>1.2.3  普通捕获组与命名捕获组混合编号规则
当一个正则表达式中，普通捕获组与命名捕获组混合出现时，捕获组的编号规则稍显复杂。对于其中的命名捕获组，随时都可以通过组名进行访问，而对于普通捕获组，则只能通过确定其编号后进行访问。</p>

<p>混合方式的捕获组编号，首先按照普通捕获组中“(”出现的先后顺序，从左到右，从1开始进行编号，当普通捕获组编号完成后，再按命名捕获组中“(”出现的先后顺序，从左到右，接着普通捕获组的编号值继续进行编号。</p>

<p>也就是先忽略命名捕获组，对普通捕获组进行编号，当普通捕获组完成编号后，再对命名捕获组进行编号。</p>

<p>正则表达式：(\d{4})-(?<date>\d{2}-(\d\d))</date></p>

<p> </p>

<p>用以上正则表达式匹配字符串：2008-12-31，匹配结果为：</p>

<p>编号</p>

<p>命名</p>

<p>捕获组</p>

<p>匹配内容</p>

<p>0</p>

<p> 	
(\d{4})-(?<date>\d{2}-(\d\d))</date></p>

<p>2008-12-31</p>

<p>1</p>

<p> 	
(\d{4})</p>

<p>2008</p>

<p>3</p>

<p>date</p>

<p>(?<date>\d{2}-(\d\d))</date></p>

<p>12-31</p>

<p>2</p>

<p> </p>

<p>(\d\d)</p>

<p>31</p>

<p>2       捕获组的引用
对捕获组的引用一般有以下几种：</p>

<p>1)       正则表达式中，对前面捕获组捕获的内容进行引用，称为反向引用；</p>

<table>
  <tbody>
    <tr>
      <td>2)       正则表达式中，(?(name)yes</td>
      <td>no)的条件判断结构；</td>
    </tr>
  </tbody>
</table>

<p>3)       在程序中，对捕获组捕获内容的引用。</p>

<p>2.1     反向引用
捕获组捕获到的内容，不仅可以在正则表达式外部通过程序进行引用，也可以在正则表达式内部进行引用，这种引用方式就是反向引用。</p>

<p>反向引用的作用通常是用来查找或限定重复，限定指定标识配对出现等等。</p>

<p>对于普通捕获组和命名捕获组的引用，语法如下：</p>

<p>普通捕获组反向引用：\k<number>，通常简写为\number</number></p>

<p>命名捕获组反向引用：\k<name>或者\k'name'</name></p>

<p>普通捕获组反向引用中number是十进制的数字，即捕获组的编号；命名捕获组反向引用中的name为命名捕获组的组名。</p>

<p>反向引用涉及到的内容比较多，后续单独说明。</p>

<p>2.2     条件判断表达式
条件判断结构在平衡组中谈到过，基本应用和扩展应用都可以在其中找到例子，这里不再赘述，请参考 .NET正则基础之——平衡组。</p>

<p>2.3     程序中引用
根据语言的不同，程序中对捕获组引用的方式也有所不同，下面就JavaScript和.NET进行举例说明。</p>

<p>2.3.1  JavaScript中的引用
由于JavaScript中不支持命名捕获组，所以对于捕获组的引用就只支持普通捕获组的反向引用和$number方式的引用。程序中的引用一般在替换和匹配时使用。</p>

<p>注：以下应用举例仅考虑简单应用场景，对于<a href="javascript:document.write('&lt;b&gt;hello&lt;/b&gt;')"></a>这种复杂场景暂不考虑。</p>

<p>1)         在Replace中引用，通常是通过$number方式引用。</p>

<p>举例：替换掉html标签中的属性。</p>

<textarea id="result" rows="10" cols="100"></textarea>
<script type="text/javascript"> 
var data = "<table id=\"test\"><tr class=\"light\"><td> test </td></tr></table>";
var reg = /<([a-z]+)[^>]*>/ig;
document.getElementById("result").value = data.replace(reg, "<$1>");
</script>

<p>//输出</p>
<table><tr><td> test </td></tr></table>

<p>2)         在匹配时的引用，通常通过RegExp.$number方式引用。</p>

<p>举例：同时获取&lt;img…&gt;中的src和name属性值，属性的顺序不固定。参考 一条正则能不能同时取出一个img标记的src和name?</p>

<p> </p>

<p> </p>

<p> </p>

<p>2.3.2  .NET中的引用
由于.NET支持命名捕获组，所以在.NET中的引用方式会多一些。通常也是在两种场景下应用，一是替换，一是匹配。</p>

<p>1)         替换中的引用</p>

<p>普通捕获组：$number</p>

<p>命名捕获组：${name}</p>

<p>替换中应用，仍是上面的例子。</p>

<p>举例：替换掉html标签中的属性。使用普通捕获组。</p>

<p>string data = “&lt;table id="test"&gt;&lt;tr class="light"&gt;&lt;td&gt; test &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;”;</p>

<p>richTextBox2.Text = Regex.Replace(data, @”(?i)&lt;([a-z]+)[^&gt;]*&gt;”, “&lt;$1&gt;”);</p>

<p>//输出</p>
<table><tr><td> test </td></tr></table>

<p>使用命名捕获组。</p>

<p>string data = “&lt;table id="test"&gt;&lt;tr class="light"&gt;&lt;td&gt; test &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;”;</p>

<p>richTextBox2.Text = Regex.Replace(data, @”(?i)&lt;(?<tag>[a-z]+)[^&gt;]*&gt;", "&lt;${tag}&gt;");</tag></p>

<p>//输出</p>
<table><tr><td> test </td></tr></table>

<p>2)         匹配后的引用</p>

<p>对于匹配结果中捕获组捕获内容的引用，可以通过Groups和Result对象进行引用。</p>

<p>string test = “&lt;a href="http://www.csdn.net"&gt;CSDN&lt;/a&gt;”;</p>

<p>Regex reg = new Regex(@”(?is)&lt;a(?:(?!href=).)*href=([’””]?)(?<url>[^""'\s&gt;]*)\1[^&gt;]*&gt;(?<text>(?:(?!&lt;/a&gt;).)*)&lt;/a&gt;");</text></url></p>

<p>MatchCollection mc = reg.Matches(test);</p>

<p>foreach (Match m in mc)</p>

<p>{</p>

<p>     richTextBox2.Text += “m.Value：”.PadRight(25) + m.Value + “\n”;</p>

<p>     richTextBox2.Text += “m.Result("$0")：”.PadRight(25) + m.Result(“$0”) + “\n”;</p>

<p>     richTextBox2.Text += “m.Groups[0].Value：”.PadRight(25) + m.Groups[0].Value + “\n”;</p>

<p>     richTextBox2.Text += “m.Result("$2")：”.PadRight(25) + m.Result(“$2”) + “\n”;</p>

<p>     richTextBox2.Text += “m.Groups[2].Value：”.PadRight(25) + m.Groups[2].Value + “\n”;</p>

<p>     richTextBox2.Text += “m.Result("${url}")：”.PadRight(25) + m.Result(“${url}”) + “\n”;</p>

<p>     richTextBox2.Text += “m.Groups["url"].Value：”.PadRight(25) + m.Groups[“url”].Value + “\n”;</p>

<p>     richTextBox2.Text += “m.Result("$3")：”.PadRight(25) + m.Result(“$3”) + “\n”;</p>

<p>     richTextBox2.Text += “m.Groups[3].Value：”.PadRight(25) + m.Groups[3].Value + “\n”;</p>

<p>     richTextBox2.Text += “m.Result("${text}")：”.PadRight(25) + m.Result(“${text}”) + “\n”;</p>

<p>     richTextBox2.Text += “m.Groups["text"].Value：”.PadRight(25) + m.Groups[“text”].Value + “\n”;</p>

<p>}</p>

<p>//输出</p>

<p>m.Value：                 <a href="http://www.csdn.net">CSDN</a></p>

<p>m.Result(“$0”)：          <a href="http://www.csdn.net">CSDN</a></p>

<p>m.Groups[0].Value：       <a href="http://www.csdn.net">CSDN</a></p>

<p>m.Result(“$2”)：          http://www.csdn.net</p>

<p>m.Groups[2].Value：       http://www.csdn.net</p>

<p>m.Result(“${url}”)：      http://www.csdn.net</p>

<p>m.Groups[“url”].Value：   http://www.csdn.net</p>

<p>m.Result(“$3”)：          CSDN</p>

<p>m.Groups[3].Value：       CSDN</p>

<p>m.Result(“${text}”)：     CSDN</p>

<p>m.Groups[“text”].Value：  CSDN</p>

<p>对于捕获组0的引用，可以简写作m.Value。</p>

<p>https://blog.csdn.net/lxcnn/article/details/4146148</p>

<p>https://www.crifan.com/detailed_explanation_about_python_regular_express_match_named_group/</p>

<p>https://www.crifan.com/detailed_explanation_about_python_regular_express_named_group/</p>

:ET