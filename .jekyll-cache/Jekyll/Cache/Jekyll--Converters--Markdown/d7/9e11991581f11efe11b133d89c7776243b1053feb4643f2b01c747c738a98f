I"<p>Dockerfile中RUN，CMD和ENTRYPOINT都能够用于执行命令，下面是三者的主要用途：</p>

<p>RUN命令执行命令并创建新的镜像层，通常用于安装软件包
CMD命令设置容器启动后默认执行的命令及其参数，但CMD设置的命令能够被docker run命令后面的命令行参数替换
ENTRYPOINT配置容器启动时的执行命令（不会被忽略，一定会被执行，即使运行 docker run时指定了其他命令）
<!-- more -->
Shell格式和Exec格式运行命令
我们可用两种方式指定 RUN、CMD 和 ENTRYPOINT 要运行的命令：Shell 格式和 Exec 格式：</p>

<p>Shell格式：<instruction> <command />。例如：apt-get install python3
Exec格式：<instruction> ["executable", "param1", "param2", ...]。例如： ["apt-get", "install", "python3"]</instruction></instruction></p>

<p>CMD 和 ENTRYPOINT 推荐使用 Exec 格式，因为指令可读性更强，更容易理解。RUN 则两种格式都可以。</p>

<p>https://www.jianshu.com/p/f0a0f6a43907</p>

<p>Shell格式底层会调用/bin/sh -c来执行命令,可以解析变量,而下面的exec格式不会:
需要改写成以下形式:ENTRYPOINT [“/bin/sh”, “-c”, “echo hello, $name”]
Exec格式时,ENTRYPOINT可以通过CMD提供额外参数,CMD的额外参数可以在容器启动时动态替换。在shell格式时ENTRYPOINT会忽略任何CMD或docker run提供的参数。</p>

<p>https://blog.csdn.net/hetoto/article/details/99700608</p>

<p>$ echo \(17429 
$ sh -c 'echo\)’ 
76322 
$ sh -c “echo \(" 
17429 
$ 
第一次报告原始shell的进程ID;第二个报告shell运行的进程ID为sh;第三是报告原始shell的进程ID的昂贵方式。请注意，单引号与双引号也很重要。在这里，行情不会出现在C调用（壳去除参数周围的引号），并\)值将是子壳：</p>

<p>char *argv[] = { “sh”, “-c”, “echo $$”, 0 }; 
execvp(argv[0], argv);</p>

<p>http://cn.voidcc.com/question/p-giwhbrkw-bcv.html</p>

<p>用法:bash -c “cmd string”
通常使用shell去运行脚本，两种方法 bash xxx.sh，另外一种就是bash -c “cmd string”
对于bash xxx.sh, 首先bash 会在当前目录去寻找xxx.sh，如果找到，就直接运行，找不到则按照环境变量$PATH的指定路径，按顺序去找，如果找到，则执行，找不到则报错。
shell脚本的参数$0就是要执行的shell脚本xxx.sh， $1就是后面紧跟xxx.sh的参数，$2 $3依次类推</p>

<p>而对于bash -c “cmd string”
首先我们看看官方的说明解释</p>

<p>-c        If the -c option is present, then commands are read from the first non-option argument command_string.  If there are arguments after the command_string, they are
           assigned to the positional parameters, starting with $0.
大致意思就是，如果用-c 那么bash 会从第一个非选项参数后面的字符串中读取命令，如果字符串有多个空格，第一个空格前面的字符串是要执行的命令，也就是$0, 后面的是参数，即$1, $2….</p>

<p>https://www.jianshu.com/p/198d819d24d1</p>

<p>使用bash -c 要注意两点</p>

<p>-c 第一个字符串一定要是命令路径，不能是文件名，如果把./atest前面的./去掉，那么就会报找不到命令
命令文件必须要有可执行权限，即./atest 的必须就有x属性
个人理解bash -c “./atest hello world”实际上和./atest hello world等价，所以也就有了上面1 2两个注意点。而且这个时候在./atest开头的位置，我们一般写的#!/usr/bin/sh #!/usr/bin/env python这种语句就起作用了（所以，开头一定要按shell规范写），因为这种情况下真正执行脚本的程序就是开头指定的行，如果没有指定，默认使用bash(这是在shell中执行命令)。 bash -c “./atest hello world”和./atest hello world等价，那具体有没有什么区别呢？ 是有的，上面的介绍是直接在终端中运行命令。那当我们在代码中要运行上面的脚本的时候，比如fork + exec的时候，这种情况下一般就使用bash -c，但是这时候要注意bash的环境变量，就跟在crontab中跑这个脚本差不多，千万注意环境变量。</p>

<p>CMD [“-c”, “cmd1 &amp;&amp; cmd2”]</p>

<p>sh ./xxx</p>

<p>syntax error: unexpected word (expecting “)”)</p>

<p>sh -c ./xxx 成功</p>

<p>https://blog.csdn.net/u014470581/article/details/51493150</p>

<p>https://blog.csdn.net/BobChill/article/details/84647575</p>

<p>https://askubuntu.com/questions/1107617/how-do-i-use-command-line-arguments-to-sh-in-the-c-command-string</p>

:ET