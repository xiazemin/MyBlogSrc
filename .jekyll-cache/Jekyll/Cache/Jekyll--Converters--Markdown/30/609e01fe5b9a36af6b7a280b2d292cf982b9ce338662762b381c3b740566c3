I"l"<p>https://anto.pt/post/go-lessons-learnt-by-refactoring/
Not gonna lie. I’m not a Go expert, I’m still improving day by day, and most of my knowledge is coming while working with it.</p>

<p>A little context: I recently moved to a new company and they are starting using the Go language for some of the projects currently developing. I found myself reading a bunch of code written by people who only recently started writing Go, and came from years of experience in other languages - i.e. Java and C++.</p>

<p>After asking for a refactor of the code before it gets too tangled, I’ve seen some non-idiomatic patterns emerge and I’m documenting them here for future references. We starts from basics but you may found them interesting as well!
<!-- more -->
Names cluttering
This one is really common and already discussed everywhere but I’m facing it on a daily basis so I’m going to repeat it here.</p>

<p>Always think about how a function or type is going to be referenced from the outside:</p>

<p>Don’t</p>

<p>package services</p>

<p>func NewService() { /* … */ }</p>

<p>// services.NewService()</p>

<p>Do</p>

<p>package services</p>

<p>func New() { /* … */ }</p>

<p>// services.New()</p>

<p>Slices initialization
Don’t</p>

<p>slice := []int{}
// or
slice := make([]int, 0)</p>

<p>Do</p>

<p>var slice []int</p>

<p>// you can still append(), even if list is nil
slice = append(slice, 4)</p>

<p>The reason is that the first snippet will initialize a slice with length 0 and it’s really not necessary most of the time.</p>

<p>A nil slice will act just like a zero-length slice, without the useless memory allocation.</p>

<p>Change behaviour through composition
This is a method actually used in Go stdlib sort package, where there’s a Interface with some common methods, and a reverse struct that changes the behavior for one of the methods of Interface to make it sort reversed.</p>

<p>In this example, I’m showing how easy it is to take a Stringer and return a Stringer, meaning that anywhere a Stringer was used it’s still valid, but it will print the string uppercase.</p>

<p>type upperStringer struct {
	fmt.Stringer
}</p>

<p>func (us *upperStringer) String() string {
	return strings.ToUpper(us.Stringer.String())
}</p>

<p>func Upper(s fmt.Stringer) fmt.Stringer {
	return &amp;upperStringer{s}
}</p>

<p>This is made possible by embedding an interface so that my custom String() method can call the original String() method.</p>

<p>Check your receiver pointer for nil
Don’t</p>

<p>type T struct{
	name string
}</p>

<p>func (t *T) PrintName() {
	fmt.Println(t.name)
}</p>

<p>You should check for the pointer, and take some kind of action instead of panicking:</p>

<p>Do</p>

<p>type T struct{
	name string
}</p>

<p>func (t *T) PrintName() {
	if t == nil {
		fmt.Println(“A nil has no name”)
	} else {
		fmt.Println(t.name)
	}
}</p>

<p>func main() {
	var t *T
	t.PrintName()
	// Output: A nil has no name
}</p>

<p>Avoid unneeded singleton pattern
(or be safe and implement it correctly)</p>

<p>Don’t</p>

<p>package foo</p>

<p>type Foo struct{}</p>

<p>func (f *Foo) Bar() {
  // do stuff
}</p>

<p>func GetFoo() *Foo {
	return newFoo()
}</p>

<p>// foo is the singleton instance.
var foo *Foo</p>

<p>func newFoo() *Foo {
	if foo != nil {
		return foo
	}
	foo = &amp;Foo{}
	return foo
}</p>

<p>Let’s start with a real bug I encountered refactoring this: GetFoo() is not thread-safe! If you have a bunch of goroutines booting and asking for their Foo, you are ending up with race conditions.</p>

<p>But instead of adding a mutex, let’s step back. Do you need a singleton?</p>

<p>Go, just like a lot of other languages, doesn’t force you to create a class for everything. If I can, I’d prefer to just have a package foo with the functions I need.</p>

<p>Do</p>

<p>package foo</p>

<p>func Bar() {
}</p>

<p>This is so much cleaner, isn’t it?</p>

<p>If you’re wondering how can you mock the foo package for testing, I’ll just show you in the following sections - promise, but before doing that I need to show a neat trick:</p>

<p>A function can satisfy an interface by calling itself</p>

<p>package io</p>

<p>type Reader interface{
	Read(p []byte) (n int, err error)
}</p>

<p>package main</p>

<p>// ReaderFunc wraps a simple function into an io.Reader.
type ReaderFunc func(p []byte) (n int, err error)</p>

<p>func (f ReaderFunc) Read(p []byte) (n int, err error) {
	return f(p)
}</p>

<p>// Mock is a function that acts like Reader.Read().
func Mock(p []byte) (n int, err error) {
	s := []byte(“hello\n”)
	n = copy(p, s)
	return
}</p>

<p>func main() {
	// you cannot:
	// bufio.NewReader(ReaderMock)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// but for example you can now:
r := bufio.NewReader(ReaderFunc(Mock))

l, _ := r.ReadString('\n')
fmt.Println(l) }
</code></pre></div></div>

<p>We actually made a function to satisfy the Reader interface by calling itself. If you are a little confused that’s ok, just read it again a couple of times and remember that ReaderFunc(Mock) is a type cast, not a function call.</p>

<p>Testing without singletons and other OOP patterns
So back to the singleton problem. We saw how to remove a useless type, the new problem is that now we can’t easily mock that methods:</p>

<p>Before</p>

<p>// foo.go</p>

<p>package foo</p>

<p>type IFoo interface {
	Bar()
}</p>

<p>// main.go</p>

<p>package main
func Run(f IFoo) {
	f.Bar()
}</p>

<p>func main() {
	Run(foo.GetFoo())
}</p>

<p>// main_test.go</p>

<p>package main</p>

<p>func TestRun(t *testing.T) {
	Run(&amp;MockFoo{})
}</p>

<p>type MockFoo struct {}</p>

<p>func (f *MockFoo) Bar {
	fmt.Println(“Mocking Bar()”)
}</p>

<p>But it turns out that’s not an idiomatic way of thinking in Go. There is A LOT to talk about interfaces and how they are different from other languages but let’s just relax and focus on our test.</p>

<p>We have these files:</p>

<p>Now</p>

<p>// foo.go</p>

<p>package foo</p>

<p>func Bar() { /<em>…</em>/ }</p>

<p>// main.go</p>

<p>package main</p>

<p>func Run() {
  foo.Bar()
}</p>

<p>func main() {
  Run()
}</p>

<p>// main_test.go</p>

<p>package main</p>

<p>func TestRun(t <em>testing.T) {
  /</em> ???????? */
}</p>

<p>The problem is that Run() strictly depends on foo.Bar() while it should not.</p>

<p>Before, Run used a dependency injection of an IFoo. In more idiomatic way, we can say that anyone that can Bar() is sufficient - let’s call it a Barrer:</p>

<p>// main.go</p>

<p>package main</p>

<p>type Barrer interface{
	Bar()
}</p>

<p>func Run(b Barrer) {
	b.Bar()
}</p>

<p>func main() {
	type fooBarrer struct{}
	func (f *fooBarrer) Bar() {
		foo.Bar()
	}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run(&amp;fooBarrer{}) }
</code></pre></div></div>

<p>But having to define a new type inside the main seems to overcomplicate things. Applying the previous section we can have a function implements the Barrer interface:</p>

<p>// main.go</p>

<p>package main</p>

<p>type Barrer interface{
	Bar()
}</p>

<p>type BarrerFunc func()</p>

<p>func (f BarrerFunc) Bar() {
	f()
}</p>

<p>func Run(b Barrer) {
	b.Bar()
}</p>

<p>func main() {
	Run(BarrerFunc(foo.Bar))
}</p>

<p>At this point, testing Run is trivial:</p>

<p>// main_test.go</p>

<p>func TestRun(…) {
	Run(BarrerFunc(func() {
		// … do some tests
	}))
}</p>

<p>I’m trying to keep this example as simple as possible and it doesn’t really feel necessary to have a Barrer and a BarrerFunc, but you have to trust me that as complexity grows, you can benefit a lot from this pattern.</p>

<p>Talking about interfaces
How is IFoo different from Barrer? First of all, the name - an IFoo is a set methods implemented by Foo. A Barrer is just someone that can Bar.</p>

<p>If you still don’t see the difference, an interface like IFoo is implemented only once by Foo and it’s going to grow indefinitely over time. But our Run only needed one of these methods!</p>

<p>There’s also an important difference that could get unnoticed from my examples. IFoo was defined in the foo package, together with its class. And that’s normal because of how tightly the interface is coupled to its implementation.</p>

<p>In Go you don’t do that! The Barrer interface is defined nearly where it’s used: in the main package. That’s possible thanks to Go implicit satisfaction of interfaces, package foo doesn’t need to know what interfaces it implements.</p>

<p>If you think about it, that’s truly different from the main object-oriented programming such as Java. And in my opinion, is one of the peculiarities that make Go such a beautiful language</p>
:ET