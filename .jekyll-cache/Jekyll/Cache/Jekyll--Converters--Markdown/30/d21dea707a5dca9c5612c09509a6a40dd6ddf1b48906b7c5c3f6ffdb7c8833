I"b<p>函数的调用过程主要要点在于借助寄存器和内存帧栈传递参数和返回值。虽然同为编译型语言，Go 相较 C 对寄存器和栈的使用有一些差别，同时，Go 语言自带协程并引入 defer 等语句，在调用过程上显得更加复杂。 理解Go函数调用在CPU指令层的过程有助于编写高效的代码，在性能优化、Bug排查的时候，能更迅速的确定要点。本文以简短的示例代码和对应的汇编代码演示了Go的调用过程，展示了不同数据类型的参数的实际传递过程，同时分析了匿名函数、闭包作为参数或者返回值传递时，在内存上的实际数据结构。对于协程对栈的使用和实现细节，本文不展开。
<!-- more -->
术语
栈：每个进程/线程/goroutine有自己的调用栈，参数和返回值传递、函数的局部变量存放通常通过栈进行。和数据结构中的栈一样，内存栈也是后进先出，地址是从高地址向低地址生长。
栈帧：（stack frame）又常被称为帧（frame）。一个栈是由很多帧构成的，它描述了函数之间的调用关系。每一帧就对应了一次尚未返回的函数调用，帧本身也是以栈的形式存放数据的。
caller 调用者
callee 被调用者，如在 函数 A 里 调用 函数 B，A 是 caller，B 是 callee
寄存器(X86)</p>
:ET