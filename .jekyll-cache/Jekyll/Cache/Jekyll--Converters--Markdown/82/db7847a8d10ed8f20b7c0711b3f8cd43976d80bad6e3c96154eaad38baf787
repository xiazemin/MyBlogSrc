I"T
<p>npm 可以在项目package.json里面自定义脚本命令</p>

<p>复制代码
复制代码
package.json文件</p>

<p>{
  “script”:{
    “dev”: “webpack -w”
  }
}
复制代码
复制代码
package.json文件中的字段script的每一个属性都是一个自定义的脚本命令。</p>

<p>在命令行中可以通过执行npm run dev来执行这段脚本。</p>

<p>执行原理</p>

<p>使用npm run script执行脚本的时候都会创建一个shell，然后在shell中执行指定的脚本。</p>

<p>这个shell会将当前项目的可执行依赖目录（即node_modules/.bin）添加到环境变量path中，当执行之后之后再恢复原样。就是说脚本命令中的依赖名会直接找到node_modules/.bin下面的对应脚本，而不需要加上路径。</p>

<p>执行顺序</p>

<p>一个npm脚本可以执行多个任务，这些任务之间可以指定不同的执行顺序。</p>

<p>‘&amp;’ 并行执行顺序，同时执行
“dev”:”node test.js &amp; webpack”</p>

<p>‘&amp;&amp;’继发顺序，执行前面之后才可以执行后面
“dev”:”node test.js &amp;&amp; webpack”
顺序钩子</p>

<p>npm脚本自带两个顺序钩子，’pre’ 和 ‘post’</p>

<p>“predev”:”node test_one.js”,
“dev”:”node test_two.js”,
“postdev”:”node test_three.js”
当执行 npm run dev 的时候默认就会执行</p>

<p>npm run predev &amp;&amp; npm run dev &amp;&amp; npm run postdev
获取当前正在运行的脚本名称</p>

<p>npm 提供一个npm_lifecycle_event变量，返回当前正在运行的脚本名称，可以配合顺序钩子使用</p>

<p>复制代码
复制代码
npm run dev</p>

<p>const target = process.env.npm_lifecycle_event;</p>

<p>if(target === ‘predev’){
  console.log(‘the process is predev’)<br />
}
if(target === ‘dev’){
  console.log(‘the process is dev’)
}
if(target === ‘postdev’){
  console.log(‘this process is postdev’)
}
复制代码
复制代码</p>

<p>四个可以简写的脚本执行命令</p>

<p>npm start === npm run start
npm stop === npm run stop
npm test === npm run test
npm restart === npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start
使用package.json内部变量</p>

<p>通过npm_package_前缀，npm脚本可以拿到npm的内部变量</p>

<p>复制代码
复制代码
package.json:
{
  “name”:”zzpzds”,
  “script”:”node test.js”
}</p>

<p>test.js:
console.log(process.env.npm_package_name) //zzpzds
复制代码
<!-- more -->
https://docs.npmjs.com/cli/v6/commands/npm-run-script</p>

<p>http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</p>
:ET