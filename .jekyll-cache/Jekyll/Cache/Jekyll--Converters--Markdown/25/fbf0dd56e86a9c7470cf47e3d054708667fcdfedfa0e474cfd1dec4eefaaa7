I"'<p>1、gcc生成dylib。</p>

<p>gcc -dynamiclib -o mysharedlib.dylib mysharedlib.c</p>

<p>2、gcc生成dylib，指定flatnamespace。</p>

<p>gcc -flat_namespace -dynamiclib -o openhook.dylib openhook.c
3、如何Hook？</p>

<p>dani-2:test leedani$ export DYLD_FORCE_FLAT_NAMESPACE=1
dani-2:test leedani$ export DYLD_INSERT_LIBRARIES=openhook.dylib
dani-2:test leedani$ ./main 
——–zz——hello,dani
<!-- more --></p>

<p>4、Mac offers a way to override functions in a shared library with DYLD_INSERT_LIBRARIES environment variable (which is similar to LD_PRELOAD on Linux). When you make a twin brother of a function that is defined in an existing shared library, put it in you a shared library, and you register your shared library name in DYLD_INSERT_LIBRARIES, your function is used instead of the original one. This is my simple test. Here I’ve replaced f() in mysharedlib.dylib with f() in openhook.dylib.</p>

<p>5、关于DYLD_INSERT_LIBRARIES &amp; DYLD_FORCE_FLAT_NAMESPACE</p>

<p>参考：</p>

<p>1、http://www.h4ck.org.cn/2013/04/hooking-library-calls-on-mac-using-dyld_insert_libraries/</p>

<p>2、http://blog.sina.com.cn/s/blog_45e2b66c0101cde0.html</p>

<p>Mac可以通过设置DYLD_INSERT_LIBRARIES环境变量（linux上对应的环境变量是LD_PRELOAD ，效果实例可见 Android hook——LD_PRELOAD），重写动态链接库中的函数，实现hook功能。</p>

<p>以下是演示实例</p>

<p>一、替换动态链接库中的c函数</p>

<p>实例一：使用openhook.dylib中的f() 替换原始动态链接库mysharedlib.dylib中的f() 。实例来源</p>

<p>（一）、源文件</p>

<ol>
  <li>mysharedlib.h</li>
</ol>

<p>void f();</p>
<ol>
  <li>mysharedlib.c</li>
</ol>

<p>#include
#include “mysharedlib.h”</p>

<p>void f(){
printf(“hello,dani \n”);
}</p>
<ol>
  <li>main.c</li>
</ol>

<p>#include
#include “mysharedlib.h”</p>

<p>int main(){
f();
return 0;
}</p>

<ol>
  <li>openhook.c</li>
</ol>

<p>#include
#include
#include
#include “mysharedlib.h”</p>

<p>typedef void (<em>fType) ();
static void (</em>real_f)()=NULL;</p>

<p>void f(){
if (! real_f){
void * handle = dlopen(“mysharedlib.dylib”, RTLD_NOW);
real_f = (fType) dlsym(handle,”f”);</p>

<p>if(! real_f) printf(“NG”);
}
printf(“——–zz——”);</p>

<p>real_f();
}
关键函数：
dlopen函数原型，void * dlopen( const char * pathname, int mode)，pathname是指定动态链接库地址，mode是打开模式
dlsym函数原型，void* dlsym(void* handle,const char* symbol)，handle是由dlopen打开动态链接库后返回的指针，symbol是指定获取的符号名，对c语言而言，符号名就是函数名，我们可以使用nm查看mysharedlib.dylib</p>

<p>dani-2:testC leedani$ nm mysharedlib.dylib
0000000000000f20 T _f
U _puts
U dyld_stub_binder</p>

<p>（二）、编译</p>
<ol>
  <li>生成mysharedlib.dylib, 该动态链接库的功能就是f(),打印“hello，dani”</li>
</ol>

<p>gcc -dynamiclib -o mysharedlib.dylib mysharedlib.c
dynamiclib选项是指生成动态链接库</p>

<ol>
  <li>编译mysharedlib.dylib与main.c文件，生成最终的可执行文件</li>
</ol>

<p>gcc mysharedlib.dylib main.c -o main</p>
<ol>
  <li>生成openhook.dylib，该动态链接库的功能就是替换mysharedlib.dylib中的f()</li>
</ol>

<p>gcc -flat_namespace -dynamiclib -o openhook.dylib openhook.c
flat_namespace选项指定了链接模式，有两种模式,flat-namespace与two-level
namespace,模式不一样生成的符号表也会不一样（具体区别）。</p>

<p>实例中mysharedlib.dylib没有采用该选项，而openhook.dylib采用了该选项，我们可以查看以下这两个文件的头结构，来对比一下</p>

<p>dani-2:testC leedani$ otool -hV mysharedlib.dylib
mysharedlib.dylib:
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC_64 X86_64 ALL 0x00 DYLIB 13 1200 NOUNDEFS DYLDLINK TWOLEVEL NO_REEXPORTED_DYLIBS</p>

<p>dani-2:testC leedani$ otool -hV openhook.dylib
openhook.dylib:
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC_64 X86_64 ALL 0x00 DYLIB 13 1272 DYLDLINK NO_REEXPORTED_DYLIBS</p>

<p>（三）、运行</p>

<ol>
  <li>正常的运行结果</li>
</ol>

<p>dani-2:test leedani$ ./main
hello,dani</p>
<ol>
  <li>Hook后的运行结果
通过设置环境变量DYLD_INSERT_LIBRARIES（linux上对应的环境变量是LD_PRELOAD ，效果实例可见 Android hook——LD_PRELOAD）</li>
</ol>

<p>dani-2:test leedani$ export DYLD_FORCE_FLAT_NAMESPACE=1
dani-2:test leedani$ export DYLD_INSERT_LIBRARIES=openhook.dylib
dani-2:test leedani$ ./main
——–zz——hello,dani
DYLD_INSERT_LIBRARIES与DYLD_FORCE_FLAT_NAMESPACE环境变量在apple官方手册中有说明，如下所示：</p>

<p>Mac hook——DYLD_INSERT_LIBRARIES - 碳基体 - 碳基体</p>

<p>实例二：替换系统动态链接库中的函数，如下所示替换/usr/lib/libSystem.dylib中的time函数
实例来源
（一）、源码
time .c</p>

<p>#include</p>

<p>//This function will override the one in /usr/lib/libSystem.dylib</p>

<p>time_t time(time_t *tloc){
//January 1st,2013
struct tm timeStruct;
timeStruct.tm_year= 2013-1900;
timeStruct.tm_mon = 0;
timeStruct.tm_mday = 1;
timeStruct.tm_hour = 0;
timeStruct.tm_min = 0;
timeStruct.tm_sec = 0;
timeStruct.tm_isdst = -1;</p>

<p>*tloc = mktime(&amp;timeStruct);</p>

<p>return *tloc;
}</p>

<p>（二）、编译</p>

<p>gcc -flat_namespace -dynamiclib -current_version 1.0 time.o -o libTime.dylib</p>

<p>（三）、运行</p>
<ol>
  <li>正常的运行结果</li>
</ol>

<p>dani-2:test leedani$ date
2013年 2月 1日 星期五 14时46分16秒 CST
2.替换系统函数后的运行结果</p>

<p>dani-2:test leedani$ export DYLD_FORCE_FLAT_NAMESPACE=1
dani-2:test leedani$ export DYLD_INSERT_LIBRARIES=libTime.dylib
dani-2:test leedani$ date
2013年 1月 1日 星期二 00时00分00秒 CST</p>

<p>二、替换动态链接库中的c++ 类方法</p>

<p>实例来源
（一）、源码</p>
<ol>
  <li>mysharedlib.h</li>
</ol>

<p>class AAA
{
public:
int m;</p>

<p>AAA()
{
m = 1234;
}</p>

<p>void fff(int a);
};</p>
<ol>
  <li>mysharedlib.cpp</li>
</ol>

<p>#include
#include “mysharedlib.h”</p>

<p>void AAA::fff(int a)
{</p>

<p>printf(“– Original: %d –”, a);</p>

<p>}</p>
<ol>
  <li>main.cpp</li>
</ol>

<p>#include
#include “mysharedlib.h”</p>

<p>int main()
{</p>

<p>AAA a;</p>

<p>printf(“———main1——-\n”);</p>

<p>a.fff(50);</p>

<p>printf(“\n———main2——-\n”);</p>

<p>return 0;
}</p>
<ol>
  <li>openhook.cpp
#include
#include
#include
#include “mysharedlib.h”</li>
</ol>

<p>typedef void (<em>AAAfffType)(AAA</em>,int);
static void (<em>real_AAAfff)(AAA</em>,int);</p>

<p>extern “C”
{</p>

<p>void _ZN3AAA3fffEi(AAA* a, int b)
{</p>

<p>printf(“———AAA::fff——\n”);
printf(“%d,%d \n”,b,a-&gt;m);</p>

<p>void * handle = dlopen(“mysharedlib.dylib”, RTLD_NOW);</p>

<p>real_AAAfff = (AAAfffType)dlsym(handle, “_ZN3AAA3fffEi”);</p>

<p>if(real_AAAfff) printf(“OK”);</p>

<p>real_AAAfff(a,b);
}
}
关键函数：
dlopen函数原型，void * dlopen( const char * pathname, int mode)，pathname是指定动态链接库地址，mode是打开模式
dlsym函数原型，void* dlsym(void* handle,const char* symbol)，handle是由dlopen打开动态链接库后返回的指针，symbol是指定获取的符号名，对c++语言而言，由于存在name mangling，符号名不再是函数名了，编译器不同生成的符号名也会有所区别，我们可以使用nm查看mysharedlib.dylib</p>

<p>dani-2:testCPP leedani$ nm mysharedlib.dylib
0000000000000f0c T __ZN3AAA3fffEi
U _printf
U dyld_stub_binder
使用关键字extern “C”是为了防止符号名被mangle，使其可以像c一样被dlsym加载，具体的如何在unix环境下使用dlopen 动态加载c＋＋类函数可以看这篇文章《c++ dlopen mini HOWTO》</p>

<p>（二）、编译</p>
<ol>
  <li>生成mysharedlib.dylib, 该动态链接库的功能就是f(),打印“hello，dani”</li>
</ol>

<p>gcc -dynamiclib -lstdc++ -o mysharedlib.dylib mysharedlib.cpp</p>
<ol>
  <li>编译mysharedlib.dylib与main.c文件，生成最终的可执行文件</li>
</ol>

<p>gcc -lstdc++ mysharedlib.dylib main.cpp -o main</p>
<ol>
  <li>生成openhook.dylib，该动态链接库的功能就是替换mysharedlib.dylib中的f()</li>
</ol>

<p>gcc -flat_namespace -dynamiclib -lstdc++ -o openhook.dylib openhook.cpp
（三）、运行</p>
<ol>
  <li>正常运行</li>
</ol>

<p>dani-2:testCPP leedani$ ./main
———main1——-
– Original: 50 –
———main2——-</p>
<ol>
  <li>hook后的结果，通过设置环境变量DYLD_INSERT_LIBRARIES</li>
</ol>

<p>dani-2:test leedani$ export DYLD_FORCE_FLAT_NAMESPACE=1
dani-2:test leedani$ export DYLD_INSERT_LIBRARIES=openhook.dylib</p>

<p>dani-2:testCPP leedani$ ./main
———main1——-
———AAA::fff——
50,1234
OK
– Original: 50 –
———main2——-</p>

<p>三、小结
这种通过设置环境变量DYLD_INSERT_LIBRARIES，动态加载函数、类方法来实现使用自己编写的动态连接库dylib来patch运行中的应用的手段，是外挂、MobileSubstrate插件的主要原理，推广到PC windows平台（dll hook），Android平台（linux平台）（so hook），iOS平台（mac平台）（dylib hook），可以说动态加载技术奠定了软件patch的基础，需要深入了解。</p>

<p>参考：
http://koichitamura.blogspot.com/2008/11/hooking-library-calls-on-mac.html
http://hactheplanet.com/blog/80
https://developer.apple.com/library/mac/#documentation/Darwin/Reference/Manpages/man1/dyld.1.html
https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/dlopen.3.html
https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/dlsym.3.html
https://developer.apple.com/library/mac/#documentation/developertools/conceptual/MachOTopics/1-Articles/executing_files.html</p>

:ET