I"\<p>http://json-schema.org/implementations.html
https://github.com/xeipuuv/gojsonschema
<!-- more -->
深度嵌套的 JSON 数据能用 Go 直接解析出来吗?
都是要定义对应的 struct 才能解析. 可是我遇到的是嵌套的, 一个数组, 里面可能嵌入 struct, 或者另一个数组..</p>

<p>https://gist.github.com/visualskyrim/af21564dddaab4c1e317</p>

<p>https://stackoverflow.com/questions/21268000/unmarshaling-nested-json-objects</p>

<p>三种思路
1，定义嵌套结构体
type Foo struct {
    More String <code class="language-plaintext highlighter-rouge">json:"more"</code>
    Foo  struct {
        Bar string <code class="language-plaintext highlighter-rouge">json:"bar"</code>
        Baz string <code class="language-plaintext highlighter-rouge">json:"baz"</code>
    } <code class="language-plaintext highlighter-rouge">json:"foo"</code>
    //  FooBar  string <code class="language-plaintext highlighter-rouge">json:"foo.bar"</code>
}
2，改写unmarshal方法</p>

<p>type A struct {
    FooBar string // takes foo.bar
    FooBaz string // takes foo.baz
    More   string 
}</p>

<p>func (a *A) UnmarshalJSON(b []byte) error {</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var f interface{}
json.Unmarshal(b, &amp;f)

m := f.(map[string]interface{})

foomap := m["foo"]
v := foomap.(map[string]interface{})

a.FooBar = v["bar"].(string)
a.FooBaz = v["baz"].(string)
a.More = m["more"].(string)

return nil }
</code></pre></div></div>

<p>3，使用gjson
https://github.com/tidwall/gjson</p>

<p>package main</p>

<p>import “github.com/tidwall/gjson”</p>

<p>const json = <code class="language-plaintext highlighter-rouge">{"name":{"first":"Janet","last":"Prichard"},"age":47}</code></p>

<p>func main() {
	value := gjson.Get(json, “name.last”)
	println(value.String())
}</p>
:ET