I"<p>https://asciinema.org/a/302911
https://gocn.vip/topics/9826
<!-- more -->
GDB 有啥用？</p>

<p>想了解代码底层的话，它是一大利器，更别说定位问题啥的。</p>

<p>具体骚操作见曹大的使用 debugger 学习 golang</p>

<p>但 GDB 从安装到可用，可能有一大堆问题要解决（尤其在 Mac 上），我们怎么能优雅的使用它，避免陷入问题中，是本文的重点。</p>

<p>（涉及 Docker 和 Mac 两个平台上运行）</p>

<p>先来看比较推荐的 Docker 方式</p>

<p>Docker 篇：3 步即可调试
docker 加持的话，非常方便，随用随起</p>

<p>先上效果：戳 gdb-debug-go-in-docker</p>

<p>gdb-debug-go-in-docker</p>

<p>具体步骤如下：（完全回归工具本质，换台机器也能调试）</p>

<p>// 1. 已当前目录映射启动gdb
docker run –rm -it –security-opt=”apparmor=unconfined” <br />
  –security-opt=”seccomp=unconfined”  <br />
  –cap-add=SYS_PTRACE -v “$(pwd):/go/src/app” <br />
  newbmiao/gdb-go1.14rc1:latest bash</p>

<p>// 2. 编译go，不使用compressdwarf 、inline and escape
go build -ldflags=-compressdwarf=false -gcflags=all=”-N -l” -o test test.go</p>

<p>// 3. 可以愉快的debug了
gdb ./test
一套打完，收工，就这么简单。文末会附上怎么定义的 docker。</p>

<p>你可能有疑问，docker 这些参数是干啥的，下边附资料，感兴趣自行查看</p>

<p>具体讨论见 issue：apparmor denies ptrace to docker-default profile
AppArmor
AppArmor 是一个 Linux 内核安全模块，可用于限制主机操作系统上运行的进程的功能。每个进程都可以拥有自己的安全配置文件。安全配置文件用来允许或禁止特定功能，例如网络访问或文件读/写/执行权限。</p>

<p>详见AppArmor security profiles for Docker</p>

<p>Seccomp
Seccomp 是 Secure computing mode 的缩写，它是 Linux 内核提供的一个操作，用于限制一个进程可以执行的系统调用．当然，我们需要有一个配置文件来指明进程到底可以执行哪些系统调用，不可以执行哪些系统调用．在 Docker 中，它使用 Seccomp 来限制一个容器可以执行的系统调用。</p>

<p>详见Seccomp security profiles for Docker</p>

<p>SYS_PTRACE
配合seccomp=unconfined, 允许容器使用 ptrace 运行 strace / ltrace 之类的程序。</p>

<p>Mac 篇：需要证书签名
版本： gdb 8.3.1 On macoOS High Serria 10.13.6</p>

<p>步骤:</p>

<p>创建系统证书 gdb-cert
重点是标红处，其他一路下一步即可。（注意证书创建成功，才能签名成功）</p>

<p>创建系统证书</p>

<p>（如果创建失败，可以删除证书，重启创建(推荐)；或者尝试创建登录证书=》导出=》=》加载到系统证书）</p>

<p>gdb 代码签名
已创建脚本，直接执行：</p>

<p>sh debugger/gdb/installMac.sh</p>

<p>gdb 调试（方式同 docker 篇）
证书相关具体参见：PermissionsDarwin
同样列一下可能遇到的问题:</p>

<p>codesign
Unable to find Mach task port for process-id 3884: (os/kern) failure (0x5).
 (please check gdb is codesigned - see taskgated(8))
初次运行卡住
$ gdb ./test</p>
<blockquote>
  <blockquote>
    <blockquote>
      <p>r
Starting program: /Users/newbmiao/Documents/tech/Dig101-Go/test
[New Thread 0xd03 of process 7603]</p>
      <h1 id="卡住">卡住。。。</h1>
      <p>解决方法：</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>直接别的窗口找到对应进程 id，kill 掉，后续会正常</p>

<p>ps aux|grep gdb
kill -9 xxx
SIG113 问题
详见：GDB kind of doesn’t work on macOS Sierra</p>

<p>解决方法：</p>

<h1 id="gdb-的配置">gdb 的配置</h1>
<p>$ cat ~/.gdbinit</p>
<h1 id="gdb-dashboard">gdb-dashboard</h1>
<p>// $ cat ~/.gdbinit.d/init
set startup-with-shell off
让 gdb 更理解 go 的调试信息
让 gdb 打印更易读，不压缩 dwarf</p>

<p>go build -ldflags=-compressdwarf=false -gcflags=all=”-N -l” -o test test.go</p>

<p>gdb 使用 $GOROOT/src/runtime/runtime-gdb.py 来加载 go 运行时支持. 可以从二进制文件中查看到: strings test |grep gdb
libsystem_darwin.dylib 错误
直接忽略就行，详见：GDB giving weird errors</p>

<p>详细代码见NewbMiao/free-hands-tips
See more:</p>

<p>cyrus-and/gdb-dashboard
Debugging Go Code with GDB</p>
:ET