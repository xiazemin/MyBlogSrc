I"7,<!-- more -->
<p>PHPDBG是一个PHP的SAPI模块，可以在不用修改代码和不影响性能的情况下控制PHP的运行环境。</p>

<p>PHPDBG的目标是成为一个轻量级、强大、易用的PHP调试平台。可以在PHP5.4和之上版本中使用。在php5.6和之上版本将内部集成。</p>

<p>主要功能：
– 单步调试</p>

<p>– 灵活的下断点方式（类方法、函数、文件:行、内存地址、opcode）</p>

<p>– 可直接调用php的eval</p>

<p>– 可以查看当前执行的代码</p>

<p>– 用户空间API（userland/user space）</p>

<p>– 方便集成</p>

<p>– 支持指定php配置文件</p>

<p>– JIT全局变量</p>

<p>– readline支持（可选），终端操作更方便</p>

<p>– 远程debug，使用java GUI</p>

<p>– 操作简便（具体看help）</p>

<p>安装
为了使用phpdgb，你首先需要下载一个php的源码包。然后下载phpdgb的源码包，并放在php源码包的sapi目录下。最后，你就可以执行命令安装了。编译安装示例如下：
假设我们已经下载php的源码包，并放在了/home/php目录下。</p>

<p>Shell</p>

<p>#cd /home/php/sapi
#git clone https://github.com/krakjoe/phpdbg
#cd ../
#./buildconf –force
#./config.nice
#make -j8
#make install-phpdbg</p>

<p>#cd /home/php/sapi
#git clone https://github.com/krakjoe/phpdbg
#cd ../
#./buildconf –force
#./config.nice
#make -j8
#make install-phpdbg
注意：
1、如果你的php版本是php5.6或者更高的版本，phpdbg已经集成在php的代码包中，无需单独下载了。
2、编译参数中记得要加 –enable-phpdbg。
3、编译时参数，–with-readline 可以选择性添加。如果不添加，phpdbg的history等功能无法使用。</p>

<p>基本使用
参数介绍
phpdbg是php的一个sapi，它可以以命令行的方式调试php。常用参数如下：</p>

<p>The following switches are implemented (just like cli SAPI):
-n ignore php ini
-c search for php ini in path
-z load zend extension
-d define php ini entry
The following switches change the default behaviour of phpdbg:
-v disables quietness
-s enabled stepping
-e sets execution context
-b boring – disables use of colour on the console
-I ignore .phpdbginit (default init file)
-i override .phpgdbinit location (implies -I)
-O set oplog output file
-q do not print banner on startup
-r jump straight to run
-E enable step through eval()
Note: passing -rr will cause phpdbg to quit after execution, rather than returning to the console</p>

<p>常用功能
之前我们介绍过gdb工具。其实phpdbg和gdb功能有些地方非常相似。如，可以设置断点，可以单步执行，等。只是他们调试的语言不一样，gdb侧重于调试c或者c++语言，而phpdbg侧重于调试php语言。下面我们将对phpdbg的一些常用调试功能做下介绍。要调试的代码如下：
文件test_phpdbg_inc.php源代码如下：</p>

<p>PHP</p>

<p>&lt;?php 
function phpdbg_inc_func()
{   <br />
    echo “phpdbg_inc_func \n”; 
} 
?&gt;
&lt;?php 
function phpdbg_inc_func()
{   <br />
    echo “phpdbg_inc_func \n”; 
} 
?&gt;
文件test_phpdgb.php的源代码如下：</p>

<p>PHP</p>

<p>&lt;?php 
    include(dirname(<strong>FILE</strong>).”/test_phpdbg_inc.php”); 
    class demo{   <br />
        public function <strong>construct(){
             echo __METHOD</strong>.”:”.<strong>LINE</strong>.”\n”;   <br />
        }
        public function func($param){
             $param++;
             echo “method func $param\n”;
        }
        public function <strong>destruct(){
             echo __METHOD</strong>.”:”.<strong>LINE</strong>.”\n”;
        }
    }</p>

<p>function func(){   <br />
      $param = “ali”;
      $param = $param + “baba”;
      echo “function func $param\n”;
  }</p>

<p>$demo = new demo();
  $demo-&gt;func(1);
  func();
  phpdbg_inc_func();
?&gt;
&lt;?php 
    include(dirname(<strong>FILE</strong>).”/test_phpdbg_inc.php”); 
    class demo{   <br />
        public function <strong>construct(){
             echo __METHOD</strong>.”:”.<strong>LINE</strong>.”\n”;   <br />
        }
        public function func($param){
             $param++;
             echo “method func $param\n”;
        }
        public function <strong>destruct(){
             echo __METHOD</strong>.”:”.<strong>LINE</strong>.”\n”;
        }
    }</p>

<p>function func(){   <br />
      $param = “ali”;
      $param = $param + “baba”;
      echo “function func $param\n”;
  }</p>

<p>$demo = new demo();
  $demo-&gt;func(1);
  func();
  phpdbg_inc_func();
?&gt;
启动phpdbg</p>

<p>phpdbg安装成功后，会在安装目录的bin目录下。进入bin目录，直接输入phpdbg即可。如下：</p>

<p>Shell</p>

<p>#phpdeg
[Welcome to phpdbg, the interactive PHP debugger, v0.4.0]
To get help using phpdbg type “help” and press enter
[Please report bugs to <a href="http://github.com/krakjoe/phpdbg/issues">http://github.com/krakjoe/phpdbg/issues</a>]
prompt&gt;</p>

<p>#phpdeg
[Welcome to phpdbg, the interactive PHP debugger, v0.4.0]
To get help using phpdbg type “help” and press enter
[Please report bugs to <a href="http://github.com/krakjoe/phpdbg/issues">http://github.com/krakjoe/phpdbg/issues</a>]
prompt&gt;
要想加载要调试的php脚本，只需要执行exec命令即可。如下：</p>

<p>Shell</p>

<p>#phpdbg
……
prompt&gt; exec ./test_phpdbg.php</p>

<p>#phpdbg
……
prompt&gt; exec ./test_phpdbg.php
当然我们也可以在启动phpdbg的时候，指定e参数。如下：</p>

<p>PHP</p>

<p>#phpdbg -e ./test_phpdbg.php
#phpdbg -e ./test_phpdbg.php
查看帮助信息</p>

<p>如果你之前使用过其他的调试工具，你会发现phpdbg和他们比较相似。但是，你使用初期，还是会经常需要获取帮助信息。通过help命令我们可以获取帮助信息。</p>

<p>PHP</p>

<p>……
prompt&gt; help</p>

<p>phpdbg is a lightweight, powerful and easy to use debugging platform for PHP5.4+
It supports the following commands:</p>

<p>Information
  list     list PHP source
……
……
prompt&gt; help</p>

<p>phpdbg is a lightweight, powerful and easy to use debugging platform for PHP5.4+
It supports the following commands:</p>

<p>Information
  list     list PHP source
……
设置断点</p>

<p>设置断点的命令和gdb一样。都是break，简写形式为b。不过具体的命令参数还是有所差异的。和gdb的断点命令相同之处，它们都可以“按文件名:行号” 或者 行号的方式设置断点。除此之外，phpdbg还提供了一些针对php特有的设置断点的方式。如，根据opline设置断点，根据opcode设置断点等。</p>

<p>众所周知，php代码最终是解析成opcode，然后由php内核一条条执行。一条php语句，可能会解析成多条opcode。如果可以按opcode设置断点，我们就可以更精确的跟踪程序执行过程。下面我们来看看phapdbg设置断点的具体示例。</p>

<p>按opline设置断点：
这里所说的opline，就是以方法入口作为起点，当前代码的行号。如test_phpdgb.php文件中，第18行的代码“$param = $param + “baba”;”的opline就是 2。</p>

<p>PHP</p>

<p>……
prompt&gt; b func#2
prompt&gt; r
demo::__construct:5
method func 2
[Breakpoint #0 resolved at func#2 (opline 0x7f5b230a2e38)]
[Breakpoint #0 resolved at func#2 (opline 0x7f5b230a2e38)]
[Breakpoint #0 resolved at func#2 (opline 0x7f5b230a2e38)]
[Breakpoint #0 in func()#2 at ./test_phpdbg.php:18, hits: 1]</p>
<blockquote>
  <p>00018:     $param = $param + “baba”;
 00019:     echo “function func $param\n”;;
 00020: }
……
……
prompt&gt; b func#2
prompt&gt; r
demo::__construct:5
method func 2
[Breakpoint #0 resolved at func#2 (opline 0x7f5b230a2e38)]
[Breakpoint #0 resolved at func#2 (opline 0x7f5b230a2e38)]
[Breakpoint #0 resolved at func#2 (opline 0x7f5b230a2e38)]
[Breakpoint #0 in func()#2 at ./test_phpdbg.php:18, hits: 1]
00018:     $param = $param + “baba”;
 00019:     echo “function func $param\n”;;
 00020: }
……
查看断点</p>
</blockquote>

<p>和gdb一样，phpdbg也是使用info break命令查看断点。示例如下：</p>

<p>PHP</p>

<p>….
prompt&gt; info break
————————————————
File Breakpoints:
#1      /home/hailong.xhl/test_phpdbg.php:10
————————————————
Opline Breakpoints:
#0      7ff3219e1df0        (function breakpoint)
————————————————
Function opline Breakpoints:
#0      func opline 2
….
….
prompt&gt; info break
————————————————
File Breakpoints:
#1      /home/hailong.xhl/test_phpdbg.php:10
————————————————
Opline Breakpoints:
#0      7ff3219e1df0        (function breakpoint)
————————————————
Function opline Breakpoints:
#0      func opline 2
….
通过上面的显示，我们可以知道。info break的显示结果中会把断点的类型也给显示出来。#后面的数字是断点号。我们可以根据断点号删除断点。</p>

<p>删除断点</p>

<p>和gdb命令不一样。phpdbg的删除断点不是delete命令，而是break del 命令。示例如下：</p>

<p>PHP</p>

<p>……
prompt&gt; break del 1
[Deleted breakpoint #1]
prompt&gt;
……
……
prompt&gt; break del 1
[Deleted breakpoint #1]
prompt&gt;
……
break del 后面的数字1就是断点号。</p>

<p>查看代码</p>

<p>phpdbg查看代码的命令也是list。但是和gdb相比，使用的方式更多样一些。
显示指定函数的代码：</p>

<p>Shell</p>

<p>……
prompt&gt; l f func
 00017:     $param = “ali”;
 00018:     $param = $param + “baba”;
 00019:     echo “function func $param\n”;;
 00020: }
 00021:
prompt&gt;
……
……
prompt&gt; l f func
 00017:     $param = “ali”;
 00018:     $param = $param + “baba”;
 00019:     echo “function func $param\n”;;
 00020: }
 00021:
prompt&gt;
……
单步执行</p>

<p>phpdbg的单步执行只有一个命令 step。和gdb的step命令差不多。都是一行一行的执行代码。注意，phpdbg是没有next命令的。</p>

<p>PHP</p>

<p>….
prompt&gt; s
[Breakpoint #0 resolved at func#2 (opline 0x152ba40)]
[L19           0x152ba70 ZEND_ADD_STRING          C2      @0    ./test_phpdbg.php]</p>
<blockquote>
  <p>00019:     echo “function func $param\n”;;
 00020: }
 00021:
….
….
prompt&gt; s
[Breakpoint #0 resolved at func#2 (opline 0x152ba40)]
[L19           0x152ba70 ZEND_ADD_STRING          C2      @0    ./test_phpdbg.php]
00019:     echo “function func $param\n”;;
 00020: }
 00021:
….
继续执行</p>
</blockquote>

<p>和gdb一样，phpdbg的继续执行命令也是continue，简写形式为c。</p>

<p>执行php代码</p>

<p>这个是phpdbg的一个特色。可以在调试的过程中使用ev命令执行任意的php代码。如：</p>

<p>Shell</p>

<p>……
prompt&gt; ev $var = “val”;
val
prompt&gt; ev var_dump($var);
string(3) “val”
……
……
prompt&gt; ev $var = “val”;
val
prompt&gt; ev var_dump($var);
string(3) “val”
……
可以通过这种方式，在调试过程中动态的修改变量值，查看执行效果。</p>
:ET