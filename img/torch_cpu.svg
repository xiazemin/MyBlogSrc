<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>runtime.mstart1 (4 samples, 0.27%)</title><rect x="1186.8" y="261" width="3.2" height="15.0" fill="rgb(252,79,1)" rx="2" ry="2" />
<text  x="1189.85" y="271.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.13%)</title><rect x="14.7" y="181" width="1.6" height="15.0" fill="rgb(237,84,22)" rx="2" ry="2" />
<text  x="17.73" y="191.5" ></text>
</g>
<g >
<title>runtime.casgstatus (4 samples, 0.27%)</title><rect x="824.5" y="85" width="3.2" height="15.0" fill="rgb(250,170,36)" rx="2" ry="2" />
<text  x="827.50" y="95.5" ></text>
</g>
<g >
<title>runtime.profilealloc (2 samples, 0.13%)</title><rect x="14.7" y="149" width="1.6" height="15.0" fill="rgb(234,80,32)" rx="2" ry="2" />
<text  x="17.73" y="159.5" ></text>
</g>
<g >
<title>runtime.sysmon (4 samples, 0.27%)</title><rect x="1186.8" y="245" width="3.2" height="15.0" fill="rgb(208,87,7)" rx="2" ry="2" />
<text  x="1189.85" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_reacquired (3 samples, 0.20%)</title><rect x="842.6" y="85" width="2.4" height="15.0" fill="rgb(212,227,49)" rx="2" ry="2" />
<text  x="845.62" y="95.5" ></text>
</g>
<g >
<title>runtime.gotraceback (2 samples, 0.13%)</title><rect x="1097.0" y="85" width="1.6" height="15.0" fill="rgb(207,83,26)" rx="2" ry="2" />
<text  x="1100.05" y="95.5" ></text>
</g>
<g >
<title>runtime.unlock (2 samples, 0.13%)</title><rect x="1176.6" y="101" width="1.6" height="15.0" fill="rgb(231,135,30)" rx="2" ry="2" />
<text  x="1179.61" y="111.5" ></text>
</g>
<g >
<title>fmt.(*fmt).fmt_integer (12 samples, 0.80%)</title><rect x="37.6" y="149" width="9.4" height="15.0" fill="rgb(226,153,27)" rx="2" ry="2" />
<text  x="40.57" y="159.5" ></text>
</g>
<g >
<title>runtime.save (2 samples, 0.13%)</title><rect x="827.7" y="85" width="1.5" height="15.0" fill="rgb(240,89,46)" rx="2" ry="2" />
<text  x="830.65" y="95.5" ></text>
</g>
<g >
<title>runtime.nextSample (6 samples, 0.40%)</title><rect x="1180.5" y="165" width="4.8" height="15.0" fill="rgb(242,80,26)" rx="2" ry="2" />
<text  x="1183.55" y="175.5" ></text>
</g>
<g >
<title>runtime.entersyscall (14 samples, 0.93%)</title><rect x="818.2" y="117" width="11.0" height="15.0" fill="rgb(216,162,45)" rx="2" ry="2" />
<text  x="821.20" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.07%)</title><rect x="860.7" y="165" width="0.8" height="15.0" fill="rgb(225,212,32)" rx="2" ry="2" />
<text  x="863.73" y="175.5" ></text>
</g>
<g >
<title>runtime.setprofilebucket (89 samples, 5.94%)</title><rect x="1108.1" y="117" width="70.1" height="15.0" fill="rgb(245,48,48)" rx="2" ry="2" />
<text  x="1111.08" y="127.5" >runtime..</text>
</g>
<g >
<title>runtime.duffzero (3 samples, 0.20%)</title><rect x="1098.6" y="149" width="2.4" height="15.0" fill="rgb(230,175,3)" rx="2" ry="2" />
<text  x="1101.62" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock (3 samples, 0.20%)</title><rect x="1178.2" y="149" width="2.3" height="15.0" fill="rgb(247,84,14)" rx="2" ry="2" />
<text  x="1181.18" y="159.5" ></text>
</g>
<g >
<title>runtime.eqslice (2 samples, 0.13%)</title><rect x="1106.5" y="133" width="1.6" height="15.0" fill="rgb(246,61,9)" rx="2" ry="2" />
<text  x="1109.50" y="143.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (10 samples, 0.67%)</title><rect x="837.1" y="101" width="7.9" height="15.0" fill="rgb(208,225,30)" rx="2" ry="2" />
<text  x="840.10" y="111.5" ></text>
</g>
<g >
<title>runtime.addspecial (80 samples, 5.34%)</title><rect x="1109.7" y="101" width="63.0" height="15.0" fill="rgb(219,43,47)" rx="2" ry="2" />
<text  x="1112.65" y="111.5" >runtim..</text>
</g>
<g >
<title>os.(*File).Write (1,003 samples, 66.96%)</title><rect x="55.7" y="197" width="790.1" height="15.0" fill="rgb(228,166,4)" rx="2" ry="2" />
<text  x="58.69" y="207.5" >os.(*File).Write</text>
</g>
<g >
<title>runtime.lock (5 samples, 0.33%)</title><rect x="1172.7" y="101" width="3.9" height="15.0" fill="rgb(207,7,7)" rx="2" ry="2" />
<text  x="1175.67" y="111.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (20 samples, 1.34%)</title><rect x="829.2" y="117" width="15.8" height="15.0" fill="rgb(248,168,47)" rx="2" ry="2" />
<text  x="832.23" y="127.5" ></text>
</g>
<g >
<title>os.epipecheck (1 samples, 0.07%)</title><rect x="845.0" y="181" width="0.8" height="15.0" fill="rgb(219,26,41)" rx="2" ry="2" />
<text  x="847.98" y="191.5" ></text>
</g>
<g >
<title>runtime/pprof.WriteHeapProfile (2 samples, 0.13%)</title><rect x="14.7" y="245" width="1.6" height="15.0" fill="rgb(228,150,24)" rx="2" ry="2" />
<text  x="17.73" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.13%)</title><rect x="14.7" y="165" width="1.6" height="15.0" fill="rgb(214,160,22)" rx="2" ry="2" />
<text  x="17.73" y="175.5" ></text>
</g>
<g >
<title>runtime.freespecial (7 samples, 0.47%)</title><rect x="17.1" y="165" width="5.5" height="15.0" fill="rgb(233,226,33)" rx="2" ry="2" />
<text  x="20.09" y="175.5" ></text>
</g>
<g >
<title>runtime.step (105 samples, 7.01%)</title><rect x="1014.3" y="53" width="82.7" height="15.0" fill="rgb(214,72,46)" rx="2" ry="2" />
<text  x="1017.34" y="63.5" >runtime.s..</text>
</g>
<g >
<title>runtime.pcvalue (197 samples, 13.15%)</title><rect x="941.9" y="69" width="155.1" height="15.0" fill="rgb(212,41,50)" rx="2" ry="2" />
<text  x="944.87" y="79.5" >runtime.pcvalue</text>
</g>
<g >
<title>sync.(*Pool).Get (4 samples, 0.27%)</title><rect x="52.5" y="181" width="3.2" height="15.0" fill="rgb(224,97,16)" rx="2" ry="2" />
<text  x="55.54" y="191.5" ></text>
</g>
<g >
<title>runtime.callers (2 samples, 0.13%)</title><rect x="14.7" y="117" width="1.6" height="15.0" fill="rgb(249,38,11)" rx="2" ry="2" />
<text  x="17.73" y="127.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.07%)</title><rect x="21.8" y="117" width="0.8" height="15.0" fill="rgb(209,213,21)" rx="2" ry="2" />
<text  x="24.82" y="127.5" ></text>
</g>
<g >
<title>syscall.Write (987 samples, 65.89%)</title><rect x="67.5" y="165" width="777.5" height="15.0" fill="rgb(248,118,30)" rx="2" ry="2" />
<text  x="70.50" y="175.5" >syscall.Write</text>
</g>
<g >
<title>runtime.(*mspan).sweep (8 samples, 0.53%)</title><rect x="16.3" y="181" width="6.3" height="15.0" fill="rgb(208,71,51)" rx="2" ry="2" />
<text  x="19.30" y="191.5" ></text>
</g>
<g >
<title>runtime.casgstatus (6 samples, 0.40%)</title><rect x="832.4" y="101" width="4.7" height="15.0" fill="rgb(243,217,2)" rx="2" ry="2" />
<text  x="835.38" y="111.5" ></text>
</g>
<g >
<title>runtime.mstart (4 samples, 0.27%)</title><rect x="1186.8" y="277" width="3.2" height="15.0" fill="rgb(225,85,1)" rx="2" ry="2" />
<text  x="1189.85" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.07%)</title><rect x="861.5" y="117" width="0.8" height="15.0" fill="rgb(223,139,41)" rx="2" ry="2" />
<text  x="864.52" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.40%)</title><rect x="10.0" y="261" width="4.7" height="15.0" fill="rgb(226,222,46)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.gosweepone.func1 (8 samples, 0.53%)</title><rect x="16.3" y="213" width="6.3" height="15.0" fill="rgb(234,216,53)" rx="2" ry="2" />
<text  x="19.30" y="223.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.13%)</title><rect x="14.7" y="37" width="1.6" height="15.0" fill="rgb(227,107,33)" rx="2" ry="2" />
<text  x="17.73" y="47.5" ></text>
</g>
<g >
<title>runtime.unlock (1 samples, 0.07%)</title><rect x="1171.9" y="85" width="0.8" height="15.0" fill="rgb(250,213,39)" rx="2" ry="2" />
<text  x="1174.88" y="95.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc.func1 (89 samples, 5.94%)</title><rect x="1108.1" y="133" width="70.1" height="15.0" fill="rgb(205,18,45)" rx="2" ry="2" />
<text  x="1111.08" y="143.5" >runtime..</text>
</g>
<g >
<title>runtime.callers.func1 (2 samples, 0.13%)</title><rect x="14.7" y="85" width="1.6" height="15.0" fill="rgb(205,62,4)" rx="2" ry="2" />
<text  x="17.73" y="95.5" ></text>
</g>
<g >
<title>runtime.getcallerpc (2 samples, 0.13%)</title><rect x="819.0" y="101" width="1.6" height="15.0" fill="rgb(227,79,32)" rx="2" ry="2" />
<text  x="821.99" y="111.5" ></text>
</g>
<g >
<title>fmt.newPrinter (7 samples, 0.47%)</title><rect x="50.2" y="197" width="5.5" height="15.0" fill="rgb(222,6,28)" rx="2" ry="2" />
<text  x="53.17" y="207.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (1 samples, 0.07%)</title><rect x="1108.9" y="101" width="0.8" height="15.0" fill="rgb(233,84,46)" rx="2" ry="2" />
<text  x="1111.87" y="111.5" ></text>
</g>
<g >
<title>runtime.callers (295 samples, 19.69%)</title><rect x="866.2" y="149" width="232.4" height="15.0" fill="rgb(214,206,45)" rx="2" ry="2" />
<text  x="869.25" y="159.5" >runtime.callers</text>
</g>
<g >
<title>runtime.callers.func1 (292 samples, 19.49%)</title><rect x="868.6" y="117" width="230.0" height="15.0" fill="rgb(233,83,43)" rx="2" ry="2" />
<text  x="871.61" y="127.5" >runtime.callers.func1</text>
</g>
<g >
<title>runtime.systemstack (8 samples, 0.53%)</title><rect x="16.3" y="229" width="6.3" height="15.0" fill="rgb(233,137,9)" rx="2" ry="2" />
<text  x="19.30" y="239.5" ></text>
</g>
<g >
<title>runtime.reentersyscall (11 samples, 0.73%)</title><rect x="820.6" y="101" width="8.6" height="15.0" fill="rgb(240,142,20)" rx="2" ry="2" />
<text  x="823.56" y="111.5" ></text>
</g>
<g >
<title>internal/pprof/profile.(*Profile).preEncode (2 samples, 0.13%)</title><rect x="14.7" y="197" width="1.6" height="15.0" fill="rgb(205,100,37)" rx="2" ry="2" />
<text  x="17.73" y="207.5" ></text>
</g>
<g >
<title>runtime.readvarint (59 samples, 3.94%)</title><rect x="1050.6" y="37" width="46.4" height="15.0" fill="rgb(236,117,16)" rx="2" ry="2" />
<text  x="1053.57" y="47.5" >runt..</text>
</g>
<g >
<title>fmt.(*pp).doPrintln (26 samples, 1.74%)</title><rect x="26.5" y="197" width="20.5" height="15.0" fill="rgb(225,67,54)" rx="2" ry="2" />
<text  x="29.54" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.07%)</title><rect x="861.5" y="133" width="0.8" height="15.0" fill="rgb(237,140,2)" rx="2" ry="2" />
<text  x="864.52" y="143.5" ></text>
</g>
<g >
<title>sync.(*Pool).Put (4 samples, 0.27%)</title><rect x="47.0" y="181" width="3.2" height="15.0" fill="rgb(253,213,11)" rx="2" ry="2" />
<text  x="50.02" y="191.5" ></text>
</g>
<g >
<title>runtime.findmoduledatap (1 samples, 0.07%)</title><rect x="935.6" y="69" width="0.8" height="15.0" fill="rgb(208,79,2)" rx="2" ry="2" />
<text  x="938.57" y="79.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.07%)</title><rect x="1189.2" y="229" width="0.8" height="15.0" fill="rgb(216,31,50)" rx="2" ry="2" />
<text  x="1192.21" y="239.5" ></text>
</g>
<g >
<title>main.main (1,478 samples, 98.66%)</title><rect x="22.6" y="245" width="1164.2" height="15.0" fill="rgb(215,1,28)" rx="2" ry="2" />
<text  x="25.60" y="255.5" >main.main</text>
</g>
<g >
<title>runtime.sweepone (8 samples, 0.53%)</title><rect x="16.3" y="197" width="6.3" height="15.0" fill="rgb(224,221,46)" rx="2" ry="2" />
<text  x="19.30" y="207.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (403 samples, 26.90%)</title><rect x="863.1" y="165" width="317.4" height="15.0" fill="rgb(222,207,6)" rx="2" ry="2" />
<text  x="866.10" y="175.5" >runtime.mProf_Malloc</text>
</g>
<g >
<title>fmt.(*fmt).pad (2 samples, 0.13%)</title><rect x="45.4" y="133" width="1.6" height="15.0" fill="rgb(237,103,50)" rx="2" ry="2" />
<text  x="48.45" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (89 samples, 5.94%)</title><rect x="1108.1" y="149" width="70.1" height="15.0" fill="rgb(224,183,8)" rx="2" ry="2" />
<text  x="1111.08" y="159.5" >runtime..</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.07%)</title><rect x="17.1" y="149" width="0.8" height="15.0" fill="rgb(206,75,32)" rx="2" ry="2" />
<text  x="20.09" y="159.5" ></text>
</g>
<g >
<title>runtime.gentraceback (290 samples, 19.36%)</title><rect x="870.2" y="101" width="228.4" height="15.0" fill="rgb(233,195,30)" rx="2" ry="2" />
<text  x="873.19" y="111.5" >runtime.gentraceback</text>
</g>
<g >
<title>all (1,498 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(213,139,17)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.fastrand (1 samples, 0.07%)</title><rect x="1184.5" y="149" width="0.8" height="15.0" fill="rgb(251,204,23)" rx="2" ry="2" />
<text  x="1187.49" y="159.5" ></text>
</g>
<g >
<title>runtime.fastrand (10 samples, 0.67%)</title><rect x="1004.1" y="53" width="7.9" height="15.0" fill="rgb(230,212,46)" rx="2" ry="2" />
<text  x="1007.10" y="63.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.13%)</title><rect x="14.7" y="101" width="1.6" height="15.0" fill="rgb(212,193,52)" rx="2" ry="2" />
<text  x="17.73" y="111.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (2 samples, 0.13%)</title><rect x="14.7" y="53" width="1.6" height="15.0" fill="rgb(239,180,27)" rx="2" ry="2" />
<text  x="17.73" y="63.5" ></text>
</g>
<g >
<title>runtime.lock (3 samples, 0.20%)</title><rect x="20.2" y="133" width="2.4" height="15.0" fill="rgb(228,32,48)" rx="2" ry="2" />
<text  x="23.24" y="143.5" ></text>
</g>
<g >
<title>fmt.Fprintln (1,043 samples, 69.63%)</title><rect x="24.2" y="213" width="821.6" height="15.0" fill="rgb(227,64,7)" rx="2" ry="2" />
<text  x="27.18" y="223.5" >fmt.Fprintln</text>
</g>
<g >
<title>fmt.(*pp).free (4 samples, 0.27%)</title><rect x="47.0" y="197" width="3.2" height="15.0" fill="rgb(242,13,23)" rx="2" ry="2" />
<text  x="50.02" y="207.5" ></text>
</g>
<g >
<title>runtime.main (1,478 samples, 98.66%)</title><rect x="22.6" y="261" width="1164.2" height="15.0" fill="rgb(209,212,36)" rx="2" ry="2" />
<text  x="25.60" y="271.5" >runtime.main</text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.13%)</title><rect x="1185.3" y="197" width="1.5" height="15.0" fill="rgb(219,62,11)" rx="2" ry="2" />
<text  x="1188.27" y="207.5" ></text>
</g>
<g >
<title>fmt.Println (1,044 samples, 69.69%)</title><rect x="23.4" y="229" width="822.4" height="15.0" fill="rgb(254,141,52)" rx="2" ry="2" />
<text  x="26.39" y="239.5" >fmt.Println</text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (1 samples, 0.07%)</title><rect x="860.7" y="149" width="0.8" height="15.0" fill="rgb(206,9,52)" rx="2" ry="2" />
<text  x="863.73" y="159.5" ></text>
</g>
<g >
<title>runtime.convT2E (433 samples, 28.91%)</title><rect x="845.8" y="229" width="341.0" height="15.0" fill="rgb(245,49,43)" rx="2" ry="2" />
<text  x="848.77" y="239.5" >runtime.convT2E</text>
</g>
<g >
<title>runtime.typedmemmove (2 samples, 0.13%)</title><rect x="1185.3" y="213" width="1.5" height="15.0" fill="rgb(237,18,5)" rx="2" ry="2" />
<text  x="1188.27" y="223.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (2 samples, 0.13%)</title><rect x="54.1" y="165" width="1.6" height="15.0" fill="rgb(235,168,24)" rx="2" ry="2" />
<text  x="57.11" y="175.5" ></text>
</g>
<g >
<title>runtime.gosweepone (8 samples, 0.53%)</title><rect x="16.3" y="245" width="6.3" height="15.0" fill="rgb(223,28,37)" rx="2" ry="2" />
<text  x="19.30" y="255.5" ></text>
</g>
<g >
<title>sync.(*Pool).pin (2 samples, 0.13%)</title><rect x="48.6" y="165" width="1.6" height="15.0" fill="rgb(206,96,37)" rx="2" ry="2" />
<text  x="51.60" y="175.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (24 samples, 1.60%)</title><rect x="28.1" y="181" width="18.9" height="15.0" fill="rgb(213,169,52)" rx="2" ry="2" />
<text  x="31.12" y="191.5" ></text>
</g>
<g >
<title>runtime.goexit (1,488 samples, 99.33%)</title><rect x="14.7" y="277" width="1172.1" height="15.0" fill="rgb(206,40,17)" rx="2" ry="2" />
<text  x="17.73" y="287.5" >runtime.goexit</text>
</g>
<g >
<title>runtime.lock (4 samples, 0.27%)</title><rect x="1101.0" y="149" width="3.1" height="15.0" fill="rgb(213,22,29)" rx="2" ry="2" />
<text  x="1103.99" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (427 samples, 28.50%)</title><rect x="848.9" y="197" width="336.4" height="15.0" fill="rgb(244,128,13)" rx="2" ry="2" />
<text  x="851.92" y="207.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.findmoduledatap (3 samples, 0.20%)</title><rect x="1012.0" y="53" width="2.3" height="15.0" fill="rgb(234,6,13)" rx="2" ry="2" />
<text  x="1014.98" y="63.5" ></text>
</g>
<g >
<title>runtime.stkbucket (5 samples, 0.33%)</title><rect x="1104.1" y="149" width="4.0" height="15.0" fill="rgb(239,2,14)" rx="2" ry="2" />
<text  x="1107.14" y="159.5" ></text>
</g>
<g >
<title>runtime/pprof.writeHeap (2 samples, 0.13%)</title><rect x="14.7" y="229" width="1.6" height="15.0" fill="rgb(236,24,43)" rx="2" ry="2" />
<text  x="17.73" y="239.5" ></text>
</g>
<g >
<title>runtime.gentraceback (2 samples, 0.13%)</title><rect x="14.7" y="69" width="1.6" height="15.0" fill="rgb(246,6,24)" rx="2" ry="2" />
<text  x="17.73" y="79.5" ></text>
</g>
<g >
<title>runtime._System (6 samples, 0.40%)</title><rect x="10.0" y="277" width="4.7" height="15.0" fill="rgb(239,49,46)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>fmt.(*pp).fmtInteger (17 samples, 1.13%)</title><rect x="33.6" y="165" width="13.4" height="15.0" fill="rgb(231,202,27)" rx="2" ry="2" />
<text  x="36.63" y="175.5" ></text>
</g>
<g >
<title>os.(*File).write (989 samples, 66.02%)</title><rect x="65.9" y="181" width="779.1" height="15.0" fill="rgb(241,212,21)" rx="2" ry="2" />
<text  x="68.93" y="191.5" >os.(*File).write</text>
</g>
<g >
<title>runtime.profilealloc (410 samples, 27.37%)</title><rect x="862.3" y="181" width="323.0" height="15.0" fill="rgb(222,202,31)" rx="2" ry="2" />
<text  x="865.31" y="191.5" >runtime.profilealloc</text>
</g>
<g >
<title>runtime.(*mcache).nextFree.func1 (1 samples, 0.07%)</title><rect x="861.5" y="149" width="0.8" height="15.0" fill="rgb(230,189,31)" rx="2" ry="2" />
<text  x="864.52" y="159.5" ></text>
</g>
<g >
<title>runtime.mProf_Free (6 samples, 0.40%)</title><rect x="17.9" y="149" width="4.7" height="15.0" fill="rgb(242,113,19)" rx="2" ry="2" />
<text  x="20.88" y="159.5" ></text>
</g>
<g >
<title>sync.runtime_procPin (2 samples, 0.13%)</title><rect x="54.1" y="149" width="1.6" height="15.0" fill="rgb(232,19,9)" rx="2" ry="2" />
<text  x="57.11" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.07%)</title><rect x="861.5" y="165" width="0.8" height="15.0" fill="rgb(217,1,29)" rx="2" ry="2" />
<text  x="864.52" y="175.5" ></text>
</g>
<g >
<title>runtime.getcallerpc (1 samples, 0.07%)</title><rect x="867.8" y="133" width="0.8" height="15.0" fill="rgb(227,41,17)" rx="2" ry="2" />
<text  x="870.82" y="143.5" ></text>
</g>
<g >
<title>runtime.newobject (427 samples, 28.50%)</title><rect x="848.9" y="213" width="336.4" height="15.0" fill="rgb(227,103,16)" rx="2" ry="2" />
<text  x="851.92" y="223.5" >runtime.newobject</text>
</g>
<g >
<title>runtime.bgsweep (8 samples, 0.53%)</title><rect x="16.3" y="261" width="6.3" height="15.0" fill="rgb(207,228,12)" rx="2" ry="2" />
<text  x="19.30" y="271.5" ></text>
</g>
<g >
<title>runtime.findfunc (31 samples, 2.07%)</title><rect x="911.9" y="85" width="24.5" height="15.0" fill="rgb(234,162,30)" rx="2" ry="2" />
<text  x="914.94" y="95.5" >r..</text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.13%)</title><rect x="45.4" y="117" width="1.6" height="15.0" fill="rgb(235,13,9)" rx="2" ry="2" />
<text  x="48.45" y="127.5" ></text>
</g>
<g >
<title>internal/pprof/profile.(*Profile).Write (2 samples, 0.13%)</title><rect x="14.7" y="213" width="1.6" height="15.0" fill="rgb(234,193,7)" rx="2" ry="2" />
<text  x="17.73" y="223.5" ></text>
</g>
<g >
<title>runtime.retake (2 samples, 0.13%)</title><rect x="1187.6" y="229" width="1.6" height="15.0" fill="rgb(252,192,5)" rx="2" ry="2" />
<text  x="1190.64" y="239.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (2 samples, 0.13%)</title><rect x="14.7" y="133" width="1.6" height="15.0" fill="rgb(210,14,44)" rx="2" ry="2" />
<text  x="17.73" y="143.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (204 samples, 13.62%)</title><rect x="936.4" y="85" width="160.6" height="15.0" fill="rgb(208,219,31)" rx="2" ry="2" />
<text  x="939.36" y="95.5" >runtime.funcspdelta</text>
</g>
<g >
<title>main.heapProfile (2 samples, 0.13%)</title><rect x="14.7" y="261" width="1.6" height="15.0" fill="rgb(210,125,24)" rx="2" ry="2" />
<text  x="17.73" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (2 samples, 0.13%)</title><rect x="860.7" y="181" width="1.6" height="15.0" fill="rgb(218,4,26)" rx="2" ry="2" />
<text  x="863.73" y="191.5" ></text>
</g>
<g >
<title>syscall.Syscall (981 samples, 65.49%)</title><rect x="72.2" y="133" width="772.8" height="15.0" fill="rgb(216,67,21)" rx="2" ry="2" />
<text  x="75.23" y="143.5" >syscall.Syscall</text>
</g>
<g >
<title>syscall.write (986 samples, 65.82%)</title><rect x="68.3" y="149" width="776.7" height="15.0" fill="rgb(229,84,33)" rx="2" ry="2" />
<text  x="71.29" y="159.5" >syscall.write</text>
</g>
<g >
<title>runtime.systemstack (292 samples, 19.49%)</title><rect x="868.6" y="133" width="230.0" height="15.0" fill="rgb(208,144,15)" rx="2" ry="2" />
<text  x="871.61" y="143.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.duffcopy (14 samples, 0.93%)</title><rect x="993.1" y="53" width="11.0" height="15.0" fill="rgb(228,54,4)" rx="2" ry="2" />
<text  x="996.07" y="63.5" ></text>
</g>
</g>
</svg>
